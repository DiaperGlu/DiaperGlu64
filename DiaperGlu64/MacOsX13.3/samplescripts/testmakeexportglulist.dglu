( //////////////////////////////////////////////////////////////////////////////////////// )
( //                                                                                       )
( //    Copyright 2023 James Patrick Norris                                                )
( //                                                                                       )
( //    This file is part of Diaperglu 5.11.                                               )
( //                                                                                       )
( //    Diaperglu 5.11 is free software; you can redistribute it and/or modify             )
( //    it under the terms of the GNU General Public License as published by               )
( //    the Free Software Foundation; either version 2 of the License, or                  )
( //    {at your option} any later version.                                                )
( //                                                                                       )
( //    Diaperglu 5.11 is distributed in the hope that it will be useful,                  )
( //    but WITHOUT ANY WARRANTY; without even the implied warranty of                     )
( //    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      )
( //    GNU General Public License for more details.                                       )
( //                                                                                       )
( //    You should have received a copy of the GNU General Public License                  )
( //    along with Diaperglu 5.11; if not, write to the Free Software                      )
( //    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA          )
( //                                                                                       )
( //////////////////////////////////////////////////////////////////////////////////////// )

( /////////////////////////////// )
( // James Patrick Norris      // )
( // www.rainbarrel.com        // )
( // June 10, 2023             // )
( // version 5.11              // )
( /////////////////////////////// )

// making a new buffer and setting it as the current compile buffer

HEX 1000 -1 NEWBUFFER DUP CONSTANT mydestbufid
PCURRENTCOMPILEBUFFER !


// Making an nglu hlist for this buffer

NEW-HLIST CONSTANT mydestgluhlistid

-1 ( no parent ) mydestgluhlistid
NEW$ $" NGlu" NEW-ELEMENT DROP

0 ( root is parent ) mydestgluhlistid
$" mysymbollistname" NGLU-SYMBOLS >NEW$ NEW-ELEMENT CONSTANT mygluhlistsymbolselementid


X86-WORDLIST >SEARCH-ORDER


// make a c calling convention function for 
//  UINT64 myincfunc(UINT64 x) { return (x+1); }

mygluhlistsymbolselementid mydestgluhlistid
mydestbufid GETBUFFERLENGTH >NEW$ $" myincfunc" NEW-ELEMENT DROP

RDI RAX -> MOV, RAX INC, RET,


// make a c calling convention function for 
//  UINT64 mydecfunc(UINT64 x) { return (x-1); }

mygluhlistsymbolselementid mydestgluhlistid
mydestbufid GETBUFFERLENGTH >NEW$ $" mydecfunc" NEW-ELEMENT DROP

RDI RAX -> MOV, RAX DEC, RET,


// make a c calling convention functin for
//  UINT64 my99func() { return (99); }

mygluhlistsymbolselementid mydestgluhlistid
mydestbufid GETBUFFERLENGTH >NEW$ $" my99func" NEW-ELEMENT DROP

HEX 99 N RAX MOV, RET,


// make a c calling convention functin for
//  UINT64 my12345678func() { return (12345678); }

mygluhlistsymbolselementid mydestgluhlistid
mydestbufid GETBUFFERLENGTH >NEW$ $" my12345678func" NEW-ELEMENT DROP

HEX 12345678 N RAX MOV, RET,

// saving the buffer
mydestbufid $" mytestexportbuf.bin" SAVEFILE$

// saving the glulist
mydestgluhlistid PACK-HLIST 
DUP $" mytestexportbuf.glu" SAVEFILE$ 
FREEBUFFER

// cleaning up
mydestbufid FREEBUFFER
mydestgluhlistid FREE-HLIST


// //////////////////////////////////////////////
// the export glulist and code buffer are done //
// the rest of this script file tests them     //
// //////////////////////////////////////////////

// reloading the buffer
$" mytestexportbuf.bin" LOADFILE$ CONSTANT myreloadedbufid

// reloading the glulist
$" mytestexportbuf.glu" LOADFILE$ UNPACK-HLIST CONSTANT myreloadedgluhlist


// You could look up the parent element id of the symbol list in the
//  reloaded hlist

0 ( nglu root ) myreloadedgluhlist  NGLU-SYMBOLS >NEW$ FIND-ELEMENT-CHILD-BY-NAME$ 
  CONSTANT mysymbollistparentelementid2

mysymbollistparentelementid2 ( nglu root ) myreloadedgluhlist  $" my99func" 
  FIND-ELEMENT-CHILD-BY-NAME$ ( -- foundchildelementid )
  myreloadedgluhlist GET-ELEMENT-VALUE$ $> CONSTANT my99offset

CRLF ." my99offset is " my99offset U.
0 ( no parameters )
my99offset myreloadedbufid O>P 
CALLCDECL

CRLF HEX
." called my99func, function should return 99. It returned " U.

CRLF CRLF ." data stack should be empty, data stack looks like: " CRLF .S


// or run do the glu list to add the symbol list to the list of named symbol lists
// doing the glu list to add the symbol list to the list of named symbol lists

CRLF ." doing NGLU"
myreloadedgluhlist NGLU

CRLF ." getting symbol list element id"
0 ( rootelementid ) $" mysymbollistname" SYMBOLLIST-HLISTID FIND-ELEMENT-CHILD-BY-NAME$
  SYMBOLLIST-HLISTID GET-ELEMENT-VALUE$ ( now need to get elementid from value$ )
  0 GETS$[ND] DROP 8 + @  CONSTANT myreloadedsymbollistelementid

CRLF ." symbol list element id = "  myreloadedsymbollistelementid U.

CRLF ." getting my12345678offset"
myreloadedsymbollistelementid ( nglu root ) myreloadedgluhlist  $" my12345678func" 
  FIND-ELEMENT-CHILD-BY-NAME$ ( -- foundchildelementid )
  myreloadedgluhlist GET-ELEMENT-VALUE$ $> CONSTANT my12345678offset

CRLF ." my12345678offset is " my12345678offset U.
0 ( no parameters )
my12345678offset myreloadedbufid O>P 
CALLCDECL

CRLF HEX
." called my12345678func, function should return 12345678. It returned " U.

CRLF CRLF ." data stack should be empty, data stack looks like: " CRLF .S



