( //////////////////////////////////////////////////////////////////////////////////////// )
( //                                                                                       )
( //    Copyright 2022 James Patrick Norris                                                )
( //                                                                                       )
( //    This file is part of Diaperglu 5.7.                                                )
( //                                                                                       )
( //    Diaperglu 5.7 is free software; you can redistribute it and/or modify              )
( //    it under the terms of the GNU General Public License as published by               )
( //    the Free Software Foundation; either version 2 of the License, or                  )
( //    {at your option} any later version.                                                )
( //                                                                                       )
( //    Diaperglu 5.7 is distributed in the hope that it will be useful,                   )
( //    but WITHOUT ANY WARRANTY; without even the implied warranty of                     )
( //    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      )
( //    GNU General Public License for more details.                                       )
( //                                                                                       )
( //    You should have received a copy of the GNU General Public License                  )
( //    along with Diaperglu 5.7; if not, write to the Free Software                       )
( //    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA          )
( //                                                                                       )
( //////////////////////////////////////////////////////////////////////////////////////// )

( /////////////////////////////// )
( // James Patrick Norris      // )
( // www.rainbarrel.com        // )
( // August 26, 2022           // )
( // version 5.7               // )
( /////////////////////////////// )

// /////////////////////////////////////////
//                                        //
// Test the Life Diaperglu Shared Library //
//                                        //
// /////////////////////////////////////////


// if you want this test to recompile the life subroutine library
//  and build the life subroutine library export function nglu list
//  then uncomment the $" lifedglib.dglu" INCLUDEFILE$ line

// $" lifedglib.dglu" INCLUDEFILE$


// constants for the compilation

DECIMAL
1280 CONSTANT myscreenwidth
752 CONSTANT myscreenheight

HEX

myscreenwidth myscreenheight * CONSTANT pixelsperscreen
myscreenwidth 64 + CONSTANT rowbuffersize

rowbuffersize DUP NEWBUFFER CONSTANT previousrownneighborsbufid
  rowbuffersize previousrownneighborsbufid GROWBUFFER
rowbuffersize DUP NEWBUFFER CONSTANT thisneighborsbufferbufid
  rowbuffersize thisneighborsbufferbufid GROWBUFFER
rowbuffersize DUP NEWBUFFER CONSTANT nextrownneighborsbufid
  rowbuffersize nextrownneighborsbufid GROWBUFFER
rowbuffersize DUP NEWBUFFER CONSTANT toprowneighborsbufid
  rowbuffersize toprowneighborsbufid GROWBUFFER
pixelsperscreen 8 / 64 + DUP NEWBUFFER CONSTANT cellsbufid
  pixelsperscreen 8 / 64 + cellsbufid GROWBUFFER

previousrownneighborsbufid GETSBUFFER DROP CONSTANT ppreviousrownneighborsaddr
thisneighborsbufferbufid GETSBUFFER DROP CONSTANT pthisneighborsbufferaddr
nextrownneighborsbufid GETSBUFFER DROP CONSTANT pnextrownneighborsaddr
toprowneighborsbufid GETSBUFFER DROP CONSTANT ptoprowneighborsaddr
cellsbufid GETSBUFFER DROP CONSTANT pcellsbufferaddr

( rowbuffersize ) myscreenwidth 4 + 4 / CONSTANT rowsizeindwords

myscreenwidth 8 + 8 / CONSTANT rowsizeinqwords


// //////////////////////////
// import the life library //
// //////////////////////////

// load the raw library to a buffer
$" life.dglib" LOADFILE$ CONSTANT life-bufferid

// load/run the diaperglu linker description file to get the export symbol list for the lifelib
//  it's also possible to have the nglu list load the raw library 
$" life.glulist" NGLUFILE$


// this gets the addresses of the exported functions
//  (since the exported functions were loaded into buffers that will not move
//   we don't have to worry about the address pointers going invalid.)

$" lifesymbols" SYMBOLLIST$>EH  2CONSTANT life-symbols-eh  

$" dg_getoverlapsegment" life-symbols-eh HSYMBOL$> CONSTANT dg_getoverlapsegmentoffset
life-bufferid GETSBUFFER DROP dg_getoverlapsegmentoffset + CONSTANT dg_getoverlapsegmentaddr

$" CalcNeighborsForRow" life-symbols-eh HSYMBOL$> CONSTANT CalcNeighborsForRowoffset
life-bufferid GETSBUFFER DROP CalcNeighborsForRowoffset + CONSTANT CalcNeighborsForRowaddr

$" CalcNeighborsForRowFast" life-symbols-eh HSYMBOL$> CONSTANT CalcNeighborsForRowFastoffset
life-bufferid GETSBUFFER DROP CalcNeighborsForRowFastoffset + CONSTANT CalcNeighborsForRowFastaddr

$" UpdateCellsForRow" life-symbols-eh HSYMBOL$> CONSTANT UpdateCellsForRowoffset
life-bufferid GETSBUFFER DROP UpdateCellsForRowoffset + CONSTANT UpdateCellsForRowaddr

$" ClearNeighbors" life-symbols-eh HSYMBOL$> CONSTANT ClearNeighborsoffset
life-bufferid GETSBUFFER DROP ClearNeighborsoffset + CONSTANT ClearNeighborsaddr

$" copyNeighbors" life-symbols-eh HSYMBOL$> CONSTANT copyNeighborsoffset
life-bufferid GETSBUFFER DROP copyNeighborsoffset + CONSTANT copyNeighborsaddr

$" MoveDwords" life-symbols-eh HSYMBOL$> CONSTANT MoveDwordsoffset
life-bufferid GETSBUFFER DROP MoveDwordsoffset + CONSTANT MoveDwordsaddr

$" CalcNeighborsForRowN" life-symbols-eh HSYMBOL$> CONSTANT CalcNeighborsForRowNoffset
life-bufferid GETSBUFFER DROP CalcNeighborsForRowNoffset + CONSTANT CalcNeighborsForRowNaddr

$" UpdateCellsForRowN" life-symbols-eh HSYMBOL$> CONSTANT UpdateCellsForRowNoffset
life-bufferid GETSBUFFER DROP UpdateCellsForRowNoffset + CONSTANT UpdateCellsForRowNaddr

$" LifeBitMapOnce" life-symbols-eh HSYMBOL$> CONSTANT LifeBitMapOnceoffset
life-bufferid GETSBUFFER DROP LifeBitMapOnceoffset + CONSTANT LifeBitMapOnceaddr

$" XorSrcBitmapToDestBitmap" life-symbols-eh HSYMBOL$> 
    CONSTANT XorSrcBitmapToDestBitmapoffset
life-bufferid GETSBUFFER DROP XorSrcBitmapToDestBitmapoffset + 
    CONSTANT XorSrcBitmapToDestBitmapaddr

$" AreaXor" life-symbols-eh HSYMBOL$> 
    CONSTANT AreaXoroffset
life-bufferid GETSBUFFER DROP AreaXoroffset + 
    CONSTANT AreaXoraddr

$" getOverlapOffset" life-symbols-eh HSYMBOL$> 
    CONSTANT getOverlapOffsetoffset
life-bufferid GETSBUFFER DROP getOverlapOffsetoffset + 
    CONSTANT getOverlapOffsetaddr

$" calculateOverlaps" life-symbols-eh HSYMBOL$> 
    CONSTANT calculateOverlapsoffset
life-bufferid GETSBUFFER DROP calculateOverlapsoffset + 
    CONSTANT calculateOverlapsaddr



// ////////////
// test code //
// ////////////

DECIMAL
: TESTdg_getoverlapsegment ( -- )
  // BL             +14  
  // BSX            +10
  // AL             +0C
  // ASX            +8

    ." testing dg_getoverlapsegment" CR

    // case b starts in a, b ends first
    ( BL BSX AL ASX -- OVERLAPL OVERLAPSX )
    2 5 10 1 4 dg_getoverlapsegmentaddr CALLPROCRETUINT128 HEX
    5 = 0= IF ." error, b starts in a, b ends first, wrong start" CR EXIT THEN
    2 = 0= IF ." error, b starts in a, b ends first, wrong length" CR EXIT THEN

    // case b starts in a, b ends with a
    ( BL BSX AL ASX -- OVERLAPL OVERLAPSX )
    5 5 10 1 4 dg_getoverlapsegmentaddr CALLPROCRETUINT128
    5 = 0= IF ." error, b starts in a, b ends with a, wrong start" CR EXIT THEN
    5 = 0= IF ." error, b starts in a, b ends with a, wrong length" CR EXIT THEN

    // case b starts in a, a ends first
    ( BL BSX AL ASX -- OVERLAPL OVERLAPSX )
    6 5 11 1 4 dg_getoverlapsegmentaddr CALLPROCRETUINT128
    5 = 0= IF ." error, b starts in a, a ends first, wrong start" CR EXIT THEN
    6 = 0= IF ." error, b starts in a, a ends first, wrong length" CR EXIT THEN

    // case a starts in b, a ends first
    ( BL BSX AL ASX -- OVERLAPL OVERLAPSX )
    11 1 7 3 4 dg_getoverlapsegmentaddr CALLPROCRETUINT128
    3 = 0= IF ." error, a starts in b, a ends first, wrong start" CR EXIT THEN
    7 = 0= IF ." error, a starts in b, a ends first, wrong length" CR EXIT THEN

    // case a starts in b, b ends same
    ( BL BSX AL ASX -- OVERLAPL OVERLAPSX )
    11 1 9 3 4 dg_getoverlapsegmentaddr CALLPROCRETUINT128
    3 = 0= IF ." error, a starts in b, a ends same, wrong start" CR EXIT THEN
    9 = 0= IF ." error, a starts in b, a ends same, wrong length" CR EXIT THEN

    // case a starts in b, b ends first
    ( BL BSX AL ASX -- OVERLAPL OVERLAPSX )
    11 1 12 4 4 dg_getoverlapsegmentaddr CALLPROCRETUINT128
    4 = 0= IF ." error, a starts in b, b ends first, wrong start" CR EXIT THEN
    8 = 0= IF ." error, a starts in b, b ends first, wrong length" CR EXIT THEN

    // case no overlap
    ( BL BSX AL ASX -- OVERLAPL OVERLAPSX )
    11 1 5 12 4 dg_getoverlapsegmentaddr CALLPROCRETUINT128
    12 = 0= IF ." error, case no overlap" CR EXIT THEN
    0 = 0= IF ." error, case no overlap" CR EXIT THEN

    // case b starts in a, b ends first with wrap
    ( BL BSX AL ASX -- OVERLAPL OVERLAPSX )
    6 -2 10 -5 4 dg_getoverlapsegmentaddr CALLPROCRETUINT128 HEX
    -2 = 0= IF 
      ." error, case b starts in a, b ends first with wrap, wrong start" CR EXIT 
    THEN
    6 = 0= IF 
      ." error, case b starts in a, b ends first with wrap, wrong length" CR EXIT 
    THEN

    // case b starts in a, a ends first with wrap
    ( BL BSX AL ASX -- OVERLAPL OVERLAPSX )
    6 -2 8 -5 4 dg_getoverlapsegmentaddr CALLPROCRETUINT128 HEX
    -2 = 0= IF 
      ." error, case b starts in a, a ends first with wrap, wrong start" CR EXIT 
    THEN
    5 = 0= IF 
      ." error, case b starts in a, a ends first with wrap, wrong length" CR EXIT 
    THEN
;

HEX
: TestClearNeighbors ( -- ) // didn't test overflow clear...

    ." testing ClearNeighbors" CR

    ppreviousrownneighborsaddr rowbuffersize FF FILL
    pthisneighborsbufferaddr rowbuffersize FF FILL
    pnextrownneighborsaddr rowbuffersize FF FILL
    ptoprowneighborsaddr rowbuffersize FF FILL

    ptoprowneighborsaddr
    rowsizeinqwords 
    pnextrownneighborsaddr 
    pthisneighborsbufferaddr 
    ppreviousrownneighborsaddr
    5
    ClearNeighborsaddr
    CALLPROC DROP ( .S CRLF )

    ppreviousrownneighborsaddr @ 0<> IF 
      ." error, beginning of previous neighbor buffer not empty" CR EXIT
    THEN

    ppreviousrownneighborsaddr myscreenwidth + U32@ 0<> IF 
      ." error, end of previous neighbor row not empty" CR EXIT
    THEN

    ppreviousrownneighborsaddr myscreenwidth + 8 + U32@ FFFFFFFF <> IF 
      ." error, beyond end of previous neighbor row was changed" CR EXIT
    THEN

    pthisneighborsbufferaddr @ 0<> IF 
      ." error, beginning of this neighbor buffer not empty" CR EXIT
    THEN

    pthisneighborsbufferaddr myscreenwidth + U32@ 0<> IF 
      ." error, end of this neighbor row not empty" CR EXIT
    THEN

    pthisneighborsbufferaddr myscreenwidth + 8 + U32@ FFFFFFFF <> IF 
      ." error, beyond end of this neighbor row changed" CR EXIT
    THEN

    pnextrownneighborsaddr @ 0<> IF 
      ." error, beginning of next neighbor buffer not empty" CR EXIT
    THEN

    pnextrownneighborsaddr myscreenwidth + U32@ 0<> IF 
      ." error, end of next neighbor row not empty" CR EXIT
    THEN

    pnextrownneighborsaddr myscreenwidth + 8 + U32@ FFFFFFFF <> IF 
      ." error, beyond end of next neighbor row changed" CR EXIT
    THEN
;

: testMoveDwords ( -- )

    ." testing MoveDwords" CR
    ppreviousrownneighborsaddr rowbuffersize FF FILL
    pthisneighborsbufferaddr rowbuffersize 0 FILL
    
    rowsizeindwords
    ppreviousrownneighborsaddr
    pthisneighborsbufferaddr
    3
    MoveDwordsaddr
    CALLPROC DROP

    ppreviousrownneighborsaddr @ 0<> IF 
      ." error, beginning of previous neighbor buffer not empty" CR EXIT
    THEN

    ppreviousrownneighborsaddr myscreenwidth + U32@ 0<> IF 
      ." error, end of previous neighbor row not empty" CR EXIT
    THEN

    ppreviousrownneighborsaddr myscreenwidth + 4 + U32@ FFFFFFFF <> IF 
      ." error, beyond end of previous neighbor row changed" CR EXIT
    THEN 
;

HEX
: testcopyNeighbors ( -- )
    ." testing copyNeighbors" CR

    ppreviousrownneighborsaddr rowbuffersize 55 FILL
    pthisneighborsbufferaddr rowbuffersize 80 FILL
    pnextrownneighborsaddr rowbuffersize FF FILL

    rowsizeinqwords
    pnextrownneighborsaddr
    pthisneighborsbufferaddr
    ppreviousrownneighborsaddr
    4
    copyNeighborsaddr
    CALLPROC

    ppreviousrownneighborsaddr @ 8080808080808080 <> IF 
      ." error, beginning of previous neighbor buffer not copied from thisneighbors, expected 8080808080808080, got " ppreviousrownneighborsaddr @ U. CR EXIT
    THEN

    ppreviousrownneighborsaddr myscreenwidth + U32@ 80808080 <> IF 
      ." error, end of previous neighbors row not copied from this neighbors row" CR EXIT
    THEN

    ppreviousrownneighborsaddr myscreenwidth + 8 + U32@ 55555555 <> IF 
      ." error, beyond end of previous neighbors row changed" CR EXIT
    THEN

    pthisneighborsbufferaddr @ FFFFFFFFFFFFFFFF <> IF 
      ." error, beginning of this neighbor buffer not copied from nextneighbors" CR EXIT
    THEN

    pthisneighborsbufferaddr myscreenwidth + U32@ FFFFFFFF <> IF 
      ." error, end of this neighbor row not not copied from nextneighbors" CR EXIT
    THEN

    pthisneighborsbufferaddr myscreenwidth + 8 + U32@ 80808080 <> IF 
      ." error, beyond end of this neighbor row changed" CR EXIT
    THEN

    pnextrownneighborsaddr @ 0<> IF 
      ." error, beginning of next neighbor buffer not empty" CR EXIT
    THEN

    pnextrownneighborsaddr myscreenwidth + U32@ 0<> IF 
      ." error, end of next neighbor row not empty" CR EXIT
    THEN

    pnextrownneighborsaddr myscreenwidth + 8 + U32@ FFFFFFFF <> IF 
      ." error, beyond end of next neighbor row changed" CR EXIT
    THEN
;

HEX
: testCalcNeighborsForRowFast ( -- )

    ( prowbits              
    pthisrownneighbors    
    pnextrownneighbors     
    dwordsperrow           
    pthisrownneighborsend  
    pnextrownneighborsend  
    pthisaddtbl
    pnextaddtbl -ret- )

    ." testing CalcNeighborsForRowFast" CR

    // ppreviousrownneighborsaddr rowbuffersize 0 FILL
    pthisneighborsbufferaddr rowbuffersize 0 FILL
    pnextrownneighborsaddr rowbuffersize 0 FILL
    pcellsbufferaddr pixelsperscreen 8 / 0 FILL
    
    pnextrownneighborsaddr 10 + 
    pthisneighborsbufferaddr 10 +
    2
    pnextrownneighborsaddr
    pthisneighborsbufferaddr
    pcellsbufferaddr
    6
    CalcNeighborsForRowFastaddr
    CALLPROC DROP

    pthisneighborsbufferaddr @ 0 <> IF // 0 from wrap calculation
      ." error, beginning of this neighbor buffer not as expected, expected 0, got "
      pthisneighborsbufferaddr @ U. CR
      ." pthisneighborsbuffer is: " CR thisneighborsbufferbufid GETSBUFFER DUMP CR
      ." life buffer is: " CR life-bufferid GETSBUFFER DUMP CR
      EXIT
    THEN

    pthisneighborsbufferaddr 8 + @ 0 <> IF 
      ." error, end of this neighbor buffer not as expected" CR EXIT
    THEN

    pnextrownneighborsaddr @ 0 <> IF 
      ." error, beginning of next neighbor buffer not as expected" CR EXIT
    THEN

    pnextrownneighborsaddr myscreenwidth ( 1+ 7 - ) + 6 - @ 0 <> IF 
      ." error, end of next neighbor buffer not as expected" CR EXIT
    THEN


    pthisneighborsbufferaddr rowbuffersize 0 FILL
    pnextrownneighborsaddr rowbuffersize 0 FILL
    // pcellsbufferaddr pixelsperscreen 8 / 0 FILL

    40 pcellsbufferaddr C!
    
    pnextrownneighborsaddr 10 + 
    pthisneighborsbufferaddr 10 +
    1
    pnextrownneighborsaddr
    pthisneighborsbufferaddr
    pcellsbufferaddr
    6
    CalcNeighborsForRowFastaddr
    CALLPROC DROP

    pthisneighborsbufferaddr @ 02010200 <> IF // 0 from wrap calculation
      ." error, beginning of this neighbor buffer not as expected, expected 02010200, got "
      pthisneighborsbufferaddr @ U. CR
      ." thisneighborsbuffer is: " CR thisneighborsbufferbufid GETSBUFFER DUMP CR
      ." life buffer is: " CR life-bufferid GETSBUFFER DUMP CR 
      EXIT
    THEN

    pnextrownneighborsaddr @ 02020200 <> IF 
      ." error, beginning of next neighbor buffer not as expected, expected 02020200, got "
    pnextrownneighborsaddr @ U. CR EXIT
    THEN


    pthisneighborsbufferaddr rowbuffersize 0 FILL
    pnextrownneighborsaddr rowbuffersize 0 FILL
    // pcellsbufferaddr pixelsperscreen 8 / 0 FILL

    20 pcellsbufferaddr C!
    
    pnextrownneighborsaddr 10 + 
    pthisneighborsbufferaddr 10 +
    1
    pnextrownneighborsaddr
    pthisneighborsbufferaddr
    pcellsbufferaddr
    6
    CalcNeighborsForRowFastaddr
    CALLPROC DROP

    pthisneighborsbufferaddr @ 0201020000 <> IF // 0 from wrap calculation
      ." error, beginning of this neighbor buffer not as expected, expected 0201020000, got "   
    pthisneighborsbufferaddr @ U. CR EXIT
    THEN

    pnextrownneighborsaddr @ 0202020000 <> IF 
      ." error, beginning of next neighbor buffer not as expected, expected 0202020000, got "
    pnextrownneighborsaddr @ U. CR EXIT
    THEN


    pthisneighborsbufferaddr rowbuffersize 0 FILL
    pnextrownneighborsaddr rowbuffersize 0 FILL
    // pcellsbufferaddr pixelsperscreen 8 / 0 FILL

    60 pcellsbufferaddr C!
    
    pnextrownneighborsaddr 10 + 
    pthisneighborsbufferaddr 10 +
    1
    pnextrownneighborsaddr
    pthisneighborsbufferaddr
    pcellsbufferaddr
    6
    CalcNeighborsForRowFastaddr
    CALLPROC DROP

    pthisneighborsbufferaddr @ 0203030200 <> IF // 0 from wrap calculation
      ." error, beginning of this neighbor buffer not as expected, expected 0203030200, got "   
    pthisneighborsbufferaddr @ U. CR EXIT
    THEN

    pnextrownneighborsaddr @ 0204040200 <> IF 
      ." error, beginning of next neighbor buffer not as expected, expected 0204040200, got "
    pnextrownneighborsaddr @ U. CR EXIT
    THEN
;

HEX
: testCalcNeighborsForRow ( -- )

    ( prowbits               0x08  RDI
    pthisrownneighbors     0x0C  RSI
    pnextrownneighbors     0x10  RDX
    dwordsperrow           0x14  RCX
    pthisrownneighborsend  0x18  R8
    pnextrownneighborsend  0x1C  R9 )

    ." testing CalcNeighborsForRow" CR

    ppreviousrownneighborsaddr rowbuffersize 0 FILL
    pthisneighborsbufferaddr rowbuffersize 2 FILL
    pnextrownneighborsaddr rowbuffersize 6 FILL
    pcellsbufferaddr pixelsperscreen 8 / 0 FILL

    pnextrownneighborsaddr myscreenwidth + 
    pthisneighborsbufferaddr myscreenwidth +
    myscreenwidth 20 /
    pnextrownneighborsaddr
    pthisneighborsbufferaddr
    pcellsbufferaddr
    6
    CalcNeighborsForRowaddr
    CALLPROC DROP

    // except for first and last, should be unchanged since all the cells are dead (0)
    //  first cell is at index 1 in neighbor arrays
    //  next[first-1] added to this[last] and next[last] for wrap calculation
    //  next[last+1] added to this[first] and next[first] for wrap calculation
    pthisneighborsbufferaddr @ 0202020202020802 <> IF // 8 from wrap calculation
      ." error, beginning of this neighbor buffer not as expected, expected 0202020202020802, got " pthisneighborsbufferaddr @ U. CR EXIT
    THEN

    pthisneighborsbufferaddr myscreenwidth ( 1+ 7 - ) + 6 - @ 0208020202020202 <> IF 
      ." error, end of this neighbor buffer not as expected" CR EXIT
    THEN

    pnextrownneighborsaddr @ 0606060606060C06 <> IF 
      ." error, beginning of next neighbor buffer not as expected" CR EXIT
    THEN

    pnextrownneighborsaddr myscreenwidth ( 1+ 7 - ) + 6 - @ 060C060606060606 <> IF 
      ." error, end of next neighbor buffer not as expected" CR EXIT
    THEN

    // putting a live cell near the beginning of the row
    ppreviousrownneighborsaddr rowbuffersize 0 FILL
    pthisneighborsbufferaddr rowbuffersize 2 FILL
    pnextrownneighborsaddr rowbuffersize 6 FILL
    pcellsbufferaddr pixelsperscreen 8 / 0 FILL

    10 pcellsbufferaddr C!

    pnextrownneighborsaddr myscreenwidth + 
    pthisneighborsbufferaddr myscreenwidth +
    myscreenwidth 20 /
    pnextrownneighborsaddr
    pthisneighborsbufferaddr
    pcellsbufferaddr
    6
    CalcNeighborsForRowaddr
    CALLPROC DROP

    //  first cell is at index 1 in neighbor arrays
    //  next[first-1] added to this[last] and next[last] for wrap calculation
    //  next[last+1] added to this[first] and next[first] for wrap calculation
    pthisneighborsbufferaddr @ 0202040304020802 <> IF // 8 from wrap calculation
      ." error, one cell test, beginning of this neighbor buffer not as expected, expected 0202040304020802, got " pthisneighborsbufferaddr @ U. CR EXIT
    THEN

    pnextrownneighborsaddr @ 0606080808060C06 <> IF 
      ." error, one cell test, beginning of next neighbor buffer not as expected" CR EXIT
    THEN
;

HEX
: testUpdateCellsForRow ( -- )
    
    ." testing UpdateCellsForRow" CR

    ppreviousrownneighborsaddr rowbuffersize 0 FILL
    pnextrownneighborsaddr rowbuffersize 0 FILL
    pcellsbufferaddr pixelsperscreen 8 / 0 FILL
    F1F2F3F4F8F7F6F5 pcellsbufferaddr myscreenwidth 8 / + !

    1 // if there are 0 neighbors and cell is dead, it is born, all others die
    myscreenwidth 20 /
    pnextrownneighborsaddr
    ppreviousrownneighborsaddr 
    pcellsbufferaddr
    5
    UpdateCellsForRowaddr
    CALLPROC DROP

    pcellsbufferaddr @ FFFFFFFFFFFFFFFF <> IF 
        ." error, dead 0 neighbors = live test a, beginning of cell buffer row not as expected" CR EXIT
    THEN

    pcellsbufferaddr myscreenwidth 8 / + @ F1F2F3F4F8F7F6F5 <> IF
        ." error, dead 0 neighbors = live test a, beyond end of cell buffer row was changed" CR EXIT
    THEN

    1 ppreviousrownneighborsaddr 1+ C!

    1 // if there are 0 neighbors and cell is dead, it is born, all others die
    myscreenwidth 20 /
    pnextrownneighborsaddr
    ppreviousrownneighborsaddr 
    pcellsbufferaddr
    5
    UpdateCellsForRowaddr
    CALLPROC DROP

    pcellsbufferaddr @ FFFFFFFFFFFFFF7F <> IF 
        ." error, dead 0 neighbors = live test b, beginning of cell buffer row not as expected" CR EXIT
    THEN

    pcellsbufferaddr myscreenwidth 8 / + @ F1F2F3F4F8F7F6F5 <> IF
        ." error, dead 0 neighbors = live test b, beyond end of cell buffer row was changed" CR EXIT
    THEN
;

: testCalcNeighborsForRowN ( -- )
    ." testing CalcNeighborsForRowN" CR

    ppreviousrownneighborsaddr rowbuffersize 0 FILL
    pthisneighborsbufferaddr rowbuffersize 2 FILL
    pnextrownneighborsaddr rowbuffersize 6 FILL
    pcellsbufferaddr pixelsperscreen 8 / 0 FILL
    
    pcellsbufferaddr
    myscreenwidth
    pnextrownneighborsaddr
    pthisneighborsbufferaddr
    1  // row N
    5
    CalcNeighborsForRowNaddr
    CALLPROC DROP

    // except for first and last, should be unchanged since all the cells are dead (0)
    //  first cell is at index 1 in neighbor arrays
    //  next[first-1] added to this[last] and next[last] for wrap calculation
    //  next[last+1] added to this[first] and next[first] for wrap calculation
    pthisneighborsbufferaddr @ 0202020202020802 <> IF // 8 from wrap calculation
      ." error, beginning of this neighbor buffer not as expected, expected 0202020202020802, got " pthisneighborsbufferaddr @ U. CR EXIT
    THEN

    pthisneighborsbufferaddr myscreenwidth ( 1+ 7 - ) + 6 - @ 0208020202020202 <> IF 
      ." error, end of this neighbor buffer not as expected" CR EXIT
    THEN

    pnextrownneighborsaddr @ 0606060606060C06 <> IF 
      ." error, beginning of next neighbor buffer not as expected" CR EXIT
    THEN

    pnextrownneighborsaddr myscreenwidth ( 1+ 7 - ) + 6 - @ 060C060606060606 <> IF 
      ." error, end of next neighbor buffer not as expected" CR EXIT
    THEN

    // putting a live cell near the beginning of the row
    ppreviousrownneighborsaddr rowbuffersize 0 FILL
    pthisneighborsbufferaddr rowbuffersize 2 FILL
    pnextrownneighborsaddr rowbuffersize 6 FILL
    pcellsbufferaddr pixelsperscreen 8 / 0 FILL

    10 pcellsbufferaddr myscreenwidth 8 / + C!

    pcellsbufferaddr
    myscreenwidth
    pnextrownneighborsaddr
    pthisneighborsbufferaddr
    1  // row N
    5
    CalcNeighborsForRowNaddr
    CALLPROC DROP

    //  first cell is at index 1 in neighbor arrays
    //  next[first-1] added to this[last] and next[last] for wrap calculation
    //  next[last+1] added to this[first] and next[first] for wrap calculation
    pthisneighborsbufferaddr @ 0202040304020802 <> IF // 8 from wrap calculation
      ." error, one cell test, beginning of this neighbor buffer not as expected, expected 0202040304020802, got " pthisneighborsbufferaddr @ U. CR EXIT
    THEN

    pnextrownneighborsaddr @ 0606080808060C06 <> IF 
      ." error, one cell test, beginning of next neighbor buffer not as expected" CR EXIT
    THEN
;

: testUpdateCellsForRowN ( -- )
    ." testing UpdateCellsForRowN" CR

    ppreviousrownneighborsaddr rowbuffersize 0 FILL
    pnextrownneighborsaddr rowbuffersize 0 FILL
    pcellsbufferaddr pixelsperscreen 8 / 0 FILL
    
    1  // logic function - if 0 neighbors and cell is dead, it is born, all others die
    pcellsbufferaddr 
    myscreenwidth   
    pnextrownneighborsaddr
    ppreviousrownneighborsaddr
    2  // row
    6
    UpdateCellsForRowNaddr
    CALLPROC DROP

    pcellsbufferaddr @ 0 <> IF 
        ." error, dead 0 neighbors = live test a, wrong row was changed" CR EXIT
    THEN

    pcellsbufferaddr myscreenwidth 8 / 2 * + @ FFFFFFFFFFFFFFFF <> IF 
        ." error, dead 0 neighbors = live test a, beginning of cell row not as expected" CR EXIT
    THEN

    1 ppreviousrownneighborsaddr 1+ C!

    1  // logic function - if 0 neighbors and cell is dead, it is born, all others die
    pcellsbufferaddr 
    myscreenwidth   
    pnextrownneighborsaddr
    ppreviousrownneighborsaddr
    2  // row
    6
    UpdateCellsForRowNaddr
    CALLPROC DROP

    pcellsbufferaddr myscreenwidth 8 / 2 * + @ FFFFFFFFFFFFFF7F <> IF 
        ." error, dead 0 neighbors = live test b, beginning of cell buffer row not as expected" CR EXIT
    THEN
;

HEX
: testXorSrcBitmapToDestBitmap ( -- )
    
    ." testing XorSrcBitmapToDestBitmap" CR

    ppreviousrownneighborsaddr rowbuffersize 0 FILL
    pthisneighborsbufferaddr rowbuffersize 0 FILL
    pnextrownneighborsaddr rowbuffersize 0 FILL
    ptoprowneighborsaddr rowbuffersize 0 FILL
    pcellsbufferaddr pixelsperscreen 8 / 0 FILL
    F0F1F3F4F9F8F6F4 pcellsbufferaddr pixelsperscreen 8 / + !

    // pdest                // rdi
    // psrc                 // rsi
    // srcheightinrows      // rdx 
    // srcwidthinqwords     // rcx
    // shiftinbits          // r8
    // destwidthinqwords    // r9

    1
    0
    1
    1
    ppreviousrownneighborsaddr
    pcellsbufferaddr
    6
    XorSrcBitmapToDestBitmapaddr
    CALLPROC DROP

    pcellsbufferaddr C@ 0 <> IF 
        ." error, expected empty cells" CR EXIT
    THEN

    80 ppreviousrownneighborsaddr C!

    1
    1
    1
    1
    ppreviousrownneighborsaddr
    pcellsbufferaddr
    6
    XorSrcBitmapToDestBitmapaddr
    CALLPROC DROP

    pcellsbufferaddr C@ 40 <> IF 
        ." error, 80 src empty dest case 1 row 1 column 1 shift expected 40, got "
        pcellsbufferaddr @ U. CR EXIT
    THEN

    0 pcellsbufferaddr !
    80 ppreviousrownneighborsaddr C!

    1 // dest width
    2 // shift
    1 // src width
    1 // src height
    ppreviousrownneighborsaddr
    pcellsbufferaddr
    6
    XorSrcBitmapToDestBitmapaddr
    CALLPROC DROP

    pcellsbufferaddr C@ 20 <> IF 
        ." error, 80 src empty dest case  1 row  1 column  2 shift  expected 20, got "
        pcellsbufferaddr C@ U. CR EXIT
    THEN

    0 pcellsbufferaddr !
    0 pcellsbufferaddr 8 + !
    A0 ppreviousrownneighborsaddr C!
    77 ppreviousrownneighborsaddr 7 + C!
    55 ppreviousrownneighborsaddr 8 + C!

    2 // dest width
    4 // shift
    2 // src width
    1 // src height
    ppreviousrownneighborsaddr
    pcellsbufferaddr
    6
    XorSrcBitmapToDestBitmapaddr
    CALLPROC DROP

    pcellsbufferaddr C@ 0A <> IF 
        ." error, A0...77 src empty dest case  1 row  2 column  4 shift a expected 0A, got "
        pcellsbufferaddr C@ U. CR EXIT
    THEN

    pcellsbufferaddr 7 + C@ 07 <> IF 
        ." error, A0...77 src empty dest case  1 row  2 column  4 shift b expected 07, got "
        pcellsbufferaddr 7 + C@ U. CR EXIT
    THEN

    pcellsbufferaddr 8 + C@ 75 <> IF 
        ." error, A0...77 src empty dest case  1 row  2 column  4 shift c expected 75, got "
        pcellsbufferaddr 8 + C@ U. CR EXIT
    THEN

    pcellsbufferaddr 9 + C@ 50 <> IF 
        ." error, A0...77 src empty dest case  1 row  2 column  4 shift d expected 50, got "
        pcellsbufferaddr 9 + C@ U. CR EXIT
    THEN

    pcellsbufferaddr pixelsperscreen 8 / 0 FILL

    A0 ppreviousrownneighborsaddr C!
    55 ppreviousrownneighborsaddr 8 + C!
    22 ppreviousrownneighborsaddr 10 + C!

    3   // dest width
    4   // shift
    1   // src width
    3   // src height
    ppreviousrownneighborsaddr
    pcellsbufferaddr
    6
    XorSrcBitmapToDestBitmapaddr
    CALLPROC DROP

    pcellsbufferaddr C@ 0A <> IF 
        ." error, A0...55 src empty dest case  2 row  1 column  4 shift a expected 0A, got "
        pcellsbufferaddr C@ U. CR EXIT
    THEN

    pcellsbufferaddr 8 3 * + @ 5005 <> IF 
        ." error, A0...55 src empty dest case  2 row  1 column  4 shift b expected 5005, got "
        pcellsbufferaddr 8 3 * + @ U. CR EXIT
    THEN

    pcellsbufferaddr 8 6 * + @ 2002 <> IF 
        ." error, A0...55 src empty dest case  2 row  1 column  4 shift c expected 2002, got "
        pcellsbufferaddr 8 6 * + @ U. CR EXIT
    THEN
;


HEX
: testAreaXor ( -- )
    
    ." testing AreaXor" CR


    pcellsbufferaddr pixelsperscreen 8 / 0 FILL

    A0B0C0D011223344 ppreviousrownneighborsaddr !
    5566778899AABBCC ppreviousrownneighborsaddr 8 + !
    2223242526272829 ppreviousrownneighborsaddr 10 + !

    0   // src end of row bump in bytes
    -1  // lastqwordinrowmask
    C0  // dest width
    0   // shiftsrc shiftdest
    40  // src width to do
    3   // src height
    ppreviousrownneighborsaddr
    pcellsbufferaddr
    8
    AreaXoraddr
    CALLPROC DROP

    pcellsbufferaddr @ A0B0C0D011223344 <> IF 
        ." error, src empty dest case  3 row  1 column  0 shift a expected A0B0C0D011223344, got "
        pcellsbufferaddr @ U. CR EXIT
    THEN

    pcellsbufferaddr 8 3 * + @ 5566778899AABBCC <> IF 
        ." error, src empty dest case  3 row  1 column  0 shift b expected 5566778899AABBCC, got "
        pcellsbufferaddr 8 3 * + @ U. CR EXIT
    THEN

    pcellsbufferaddr 8 6 * + @ 2223242526272829 <> IF 
        ." error, src empty dest case  3 row  1 column  0 shift c expected 2223242526272829, got "
        pcellsbufferaddr 8 6 * + @ U. CR EXIT
    THEN


    ppreviousrownneighborsaddr rowbuffersize 0 FILL
    pthisneighborsbufferaddr rowbuffersize 0 FILL
    pnextrownneighborsaddr rowbuffersize 0 FILL
    ptoprowneighborsaddr rowbuffersize 0 FILL
    pcellsbufferaddr pixelsperscreen 8 / 0 FILL
    F0F1F3F4F9F8F6F4 pcellsbufferaddr pixelsperscreen 8 / + !

    // pdest                // rdi
    // psrc                 // rsi
    // srcheightinrows      // rdx 
    // srcwidthtodoinqwords // rcx
    // srcxdestx            // r8  (R8L = destx, next 8 bits = srcx)
    // destwidthinqwords    // r9

    0   // src end of row bump
    -1  // lastqwordinrowmask
    40  // dest width
    0   // shiftsrc shiftdest
    40  // src width
    1   // src height
    ppreviousrownneighborsaddr
    pcellsbufferaddr
    8
    AreaXoraddr
    CALLPROC DROP

    pcellsbufferaddr C@ 0 <> IF 
        ." error, expected empty cells" CR EXIT
    THEN

    80 ppreviousrownneighborsaddr C!

    0   // src end of row bump in bytes
    -1  // lastqwordinrowmask
    40  // dest width
    1   // shiftsrc shiftdest
    40  // src width
    1   // src height
    ppreviousrownneighborsaddr
    pcellsbufferaddr
    8
    AreaXoraddr
    CALLPROC DROP

    pcellsbufferaddr C@ 40 <> IF 
        ." error, 80 src empty dest case 1 row 1 column 1 shift expected 40, got "
        pcellsbufferaddr @ U. CR EXIT
    THEN

    0 pcellsbufferaddr !
    80 ppreviousrownneighborsaddr C!

    0   // src end of row bump in bytes
    -1  // lastqwordinrowmask
    40  // dest width
    2   // shiftsrc shiftdest
    40  // src width to do in qwords
    1   // src height
    ppreviousrownneighborsaddr
    pcellsbufferaddr
    8
    AreaXoraddr
    CALLPROC DROP

    pcellsbufferaddr C@ 20 <> IF 
        ." error, 80 src empty dest case  1 row  1 column  2 shift  expected 20, got "
        pcellsbufferaddr C@ U. CR EXIT
    THEN

    0 pcellsbufferaddr !
    0 pcellsbufferaddr 8 + !
    A0 ppreviousrownneighborsaddr C!
    77 ppreviousrownneighborsaddr 7 + C!
    55 ppreviousrownneighborsaddr 8 + C!

    0   // src end of row bump in bytes
    -1  // lastqwordinrowmask
    80  // dest width
    4   // srcshift destshift
    80  // src width
    1   // src height
    ppreviousrownneighborsaddr
    pcellsbufferaddr
    8
    AreaXoraddr
    CALLPROC DROP

    pcellsbufferaddr C@ 0A <> IF 
        ." error, A0...77 src empty dest case  1 row  2 column  4 shift a expected 0A, got "
        pcellsbufferaddr C@ U. CR EXIT
    THEN

    pcellsbufferaddr 7 + C@ 07 <> IF 
        ." error, A0...77 src empty dest case  1 row  2 column  4 shift b expected 07, got "
        pcellsbufferaddr 7 + C@ U. CR EXIT
    THEN

    pcellsbufferaddr 8 + C@ 75 <> IF 
        ." error, A0...77 src empty dest case  1 row  2 column  4 shift c expected 75, got "
        pcellsbufferaddr 8 + C@ U. CR EXIT
    THEN

    pcellsbufferaddr 9 + C@ 50 <> IF 
        ." error, A0...77 src empty dest case  1 row  2 column  4 shift d expected 50, got "
        pcellsbufferaddr 9 + C@ U. CR EXIT
    THEN


    pcellsbufferaddr pixelsperscreen 8 / 0 FILL

    A0 ppreviousrownneighborsaddr C!
    B0 ppreviousrownneighborsaddr 1+ C!
    55 ppreviousrownneighborsaddr 8 + C!
    66 ppreviousrownneighborsaddr 9 + C!
    22 ppreviousrownneighborsaddr 10 + C!
    33 ppreviousrownneighborsaddr 11 + C!

    0     // src end of row bump in bytes
    -1    // lastqwordinrowmask
    C0    // dest width
    0804  // shiftsrc shiftdest
    40    // src width
    3     // src height
    ppreviousrownneighborsaddr
    pcellsbufferaddr
    8
    AreaXoraddr
    CALLPROC DROP

    pcellsbufferaddr C@ 0B <> IF 
        ." error, A0B0...5566 src empty dest case  2 row  1 column  0804 shift a expected 0B, got "
        pcellsbufferaddr C@ U. CR EXIT
    THEN

    pcellsbufferaddr 8 3 * + C@ 06 <> IF 
        ." error, A0B0...5566 src empty dest case  2 row  1 column  0804 shift b expected 05, got "
        pcellsbufferaddr 8 3 * + C@ U. CR EXIT
    THEN

    pcellsbufferaddr 8 6 * + C@ 03 <> IF 
        ." error, A0...55 src empty dest case  2 row  1 column  0804 shift c expected 06, got "
        pcellsbufferaddr 8 6 * + C@ U. CR EXIT
    THEN

    
    pcellsbufferaddr pixelsperscreen 8 / 0 FILL

    24 pcellsbufferaddr C!
    FF pcellsbufferaddr 8 3 * + C!
    A0 ppreviousrownneighborsaddr C!
    B0 ppreviousrownneighborsaddr 1+ C!
    55 ppreviousrownneighborsaddr 8 + C!
    66 ppreviousrownneighborsaddr 9 + C!
    22 ppreviousrownneighborsaddr 10 + C!
    33 ppreviousrownneighborsaddr 11 + C!

    0    // src end of row bump in bytes
    -1   // lastqwordinrowmask
    C0   // dest width
    0804 // shiftsrc shiftdest
    40   // src width
    3    // src height
    ppreviousrownneighborsaddr
    pcellsbufferaddr
    8
    AreaXoraddr
    CALLPROC DROP

    pcellsbufferaddr C@ 2F <> IF 
        ." error, A0B0...5566 src not empty dest case  2 row  1 column  0804 shift a expected 2F, got "
        pcellsbufferaddr C@ U. CR EXIT
    THEN

    pcellsbufferaddr 8 3 * + C@ F9 <> IF 
        ." error, A0B0...5566 src not empty dest case  2 row  1 column  0804 shift b expected F9, got "
        pcellsbufferaddr 8 3 * + C@ U. CR EXIT
    THEN

    pcellsbufferaddr 8 6 * + C@ 03 <> IF 
        ." error, A0...55 src not empty dest case  2 row  1 column  0804 shift c expected 06, got "
        pcellsbufferaddr 8 6 * + C@ U. CR EXIT
    THEN
;

: testgetOverlapOffset ( -- )

." testing getOverlapOffset" CR

    0  // destx
    0  // destwidth
    0  // srcwidth
    3
    getOverlapOffsetaddr
    CALLPROC 

   DUP 0 <> IF 
        ." error, all 0's case expected 0, got "
        U. CR EXIT
    THEN DROP


    0  // destx
    1  // destwidth
    0  // srcwidth
    3
    getOverlapOffsetaddr
    CALLPROC 

    DUP 0 <> IF 
        ." error, 0 1 0 case expected 0, got "
        U. CR EXIT
    THEN DROP


    2  // destx
    1  // destwidth
    0  // srcwidth
    3
    getOverlapOffsetaddr
    CALLPROC 

    DUP 0 <> IF 
        ." error, 0 1 2 case expected 0, got "
        U. CR EXIT
    THEN DROP


    1  // destx
    1  // destwidth
    0  // srcwidth
    3
    getOverlapOffsetaddr
    CALLPROC 

    DUP 0 <> IF 
        ." error, 0 1 1 case expected 0, got "
        U. CR EXIT
    THEN DROP

   
    1  // destx
    1  // destwidth
    1  // srcwidth
    3
    getOverlapOffsetaddr
    CALLPROC 

    DUP 0 <> IF 
        ." error, 1 1 1 case expected 0, got "
        U. CR EXIT
    THEN DROP


    1  // destx
    2  // destwidth
    1  // srcwidth
    3
    getOverlapOffsetaddr
    CALLPROC 

    DUP 1 <> IF 
        ." error, 1 2 1 case expected 1, got "
        U. CR EXIT
    THEN DROP


    1  // destx
    2  // destwidth
    2  // srcwidth
    3
    getOverlapOffsetaddr
    CALLPROC 

    DUP 1 <> IF 
        ." error, 2 2 1 case expected 1, got "
        U. CR EXIT
    THEN DROP


    3  // destx
    2  // destwidth
    1  // srcwidth
    3
    getOverlapOffsetaddr
    CALLPROC 

    DUP 0 <> IF 
        ." error, 1 2 3 case expected 0, got "
        U. CR EXIT
    THEN DROP

    2  // destx
    2  // destwidth
    1  // srcwidth
    3
    getOverlapOffsetaddr
    CALLPROC 

    DUP 0 <> IF 
        ." error, 1 2 2 case expected 0, got "
        U. CR EXIT
    THEN DROP
;



TESTdg_getoverlapsegment
TestClearNeighbors
testMoveDwords
testcopyNeighbors
testCalcNeighborsForRow
testCalcNeighborsForRowFast
testUpdateCellsForRow
testCalcNeighborsForRowN
testUpdateCellsForRowN
// testLifeBitMapOnce
testXorSrcBitmapToDestBitmap
testAreaXor
testgetOverlapOffset


