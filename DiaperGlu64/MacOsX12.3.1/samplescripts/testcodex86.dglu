( //////////////////////////////////////////////////////////////////////////////////////// )
( //                                                                                       )
( //    Copyright 2022 James Patrick Norris                                                )
( //                                                                                       )
( //    This file is part of Diaperglu 5.3.                                                )
( //                                                                                       )
( //    Diaperglu 5.3 is free software; you can redistribute it and/or modify              )
( //    it under the terms of the GNU General Public License as published by               )
( //    the Free Software Foundation; either version 2 of the License, or                  )
( //    {at your option} any later version.                                                )
( //                                                                                       )
( //    Diaperglu 5.3 is distributed in the hope that it will be useful,                   )
( //    but WITHOUT ANY WARRANTY; without even the implied warranty of                     )
( //    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      )
( //    GNU General Public License for more details.                                       )
( //                                                                                       )
( //    You should have received a copy of the GNU General Public License                  )
( //    along with Diaperglu 5.3; if not, write to the Free Software                       )
( //    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA          )
( //                                                                                       )
( //////////////////////////////////////////////////////////////////////////////////////// )

( /////////////////////////////// )
( // James Patrick Norris      // )
( // www.rainbarrel.com        // )
( // May 15, 2022              // )
( // version 5.3               // )
( /////////////////////////////// )


( Making sure the new variable buffer won't move when new variables are declared )
HEX
1000 1000 NEWBUFFER CONSTANT mylockeddownbuffer
mylockeddownbuffer PCURRENTNEWVARIABLEBUFFER !

200000 200000 NEWBUFFER PCURRENTCOMPILEBUFFER !  // this doesn't grow either

VARIABLE VARX
VARIABLE VARZ
VARIABLE VARY  // a fixed address UINT64 variable
0 VARY !
100 ALLOT




: CCO@ PCURRENTCOMPILEBUFFER @ O@ ;
: CCO! PCURRENTCOMPILEBUFFER @ O! ;
: CCOC! PCURRENTCOMPILEBUFFER @ OC! ;
: CCOC@ PCURRENTCOMPILEBUFFER @ OC@ ;
: CCO>P PCURRENTCOMPILEBUFFER @ GETSBUFFER DROP + ;

: CCOU32@ PCURRENTCOMPILEBUFFER @ GETSBUFFER DROP + U32@ ;
: CCOU32! PCURRENTCOMPILEBUFFER @ GETSBUFFER DROP + U32! ;

( push and pop 32bit reg instructions already tested… )

HEX
CODE MOVNTORAX ( -ret- )
  12134546789ABCDE N  RAX  MOV, 
  RET, 
END-CODE

: testmovntorax
    ." testing 1213454656789ABCDE N RAX MOV, … "
    0 ['] MOVNTORAX >BODY CALLPROC DUP 12134546789ABCDE = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 12134546789ABCDE, got " HEX U.
    THEN
    CR
; 

testmovntorax


HEX
CODE MOVNTOAL ( -ret- )
  0 N  RAX  MOV,
  46 N  AL  MOV, 
  RET, 
END-CODE

: testmovntoal
    ." testing 46 N AL MOV, … "
    0 ['] MOVNTOAL >BODY CALLPROC DUP 46 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 46, got " HEX U.
    THEN
    CR
; 

testmovntoal


HEX
CODE MOVNTOAH ( -ret- )
  0 N  RAX  MOV,
  46 N  AH  MOV, 
  RET, 
END-CODE

: testmovntoah
    ." testing 46 N AH MOV, … "
    0 ['] MOVNTOAH >BODY CALLPROC DUP 4600 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 4600, got " HEX U.
    THEN
    CR
; 

testmovntoah


HEX
CODE MOVNTOAX ( -ret- )
  0 N  RAX  MOV,
  4697 N  AX  MOV, 
  RET, 
END-CODE

: testmovntoax
    ." testing 4697 N AX MOV, … "
    0 ['] MOVNTOAX >BODY CALLPROC DUP 4697 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 4697, got " HEX U.
    THEN
    CR
; 

testmovntoax



HEX
CODE MOVNTORCX ( -ret- )
  12134546789ADEEF N  RCX  MOV,
  RCX PUSH,  RAX POP, 
  RET, 
END-CODE

: testmovntorcx
    ." testing 12134546789ADEEF N RCX MOV, … "
    0 ['] MOVNTORCX >BODY CALLPROC DUP 12134546789ADEEF = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 12134546789ADEEF, got " HEX U.
    THEN
    CR
; 

testmovntorcx


HEX
CODE MOVNTORDX ( -ret- )
  12134546789ADEEF N  RDX  MOV,
  RDX PUSH,  RAX POP, 
  RET, 
END-CODE

: testmovntordx
    ." testing 12134546789ADEEF N RDX MOV, … "
    0 ['] MOVNTORDX >BODY CALLPROC DUP 12134546789ADEEF = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 12134546789ADEEF, got " HEX U.
    THEN
    CR
; 

testmovntordx


HEX
CODE MOVNTORBX ( -ret- )
  RBX PUSH,
  12134546789ADEEF N  RBX  MOV,
  RBX PUSH,  RAX POP,
  RBX POP, 
  RET, 
END-CODE

: testmovntorbx
    ." testing 12134546789ADEEF N EBX MOV, … "
    0 ['] MOVNTORBX >BODY CALLPROC DUP 12134546789ADEEF = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 12134546789ADEEF, got " HEX U.
    THEN
    CR
; 

testmovntorbx


HEX
CODE MOVNTORBP ( -ret- )
  RBP PUSH,
  12134546789ADEEF N  RBP  MOV,
  RBP PUSH,  RAX POP,
  RBP POP, 
  RET, 
END-CODE

: testmovntorbp
    ." testing 12134546789ADEEF N RBP MOV, … "
    0 ['] MOVNTORBP >BODY CALLPROC DUP 12134546789ADEEF = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 12134546789ADEEF, got " HEX U.
    THEN
    CR
; 

testmovntorbp


HEX
CODE MOVNTORSI ( -ret- )
  RSI PUSH,
  12134546778899AA N  RSI  MOV,
  RSI PUSH,  RAX POP,
  RSI POP, 
  RET, 
END-CODE

: testmovntorsi
    ." testing 12134546778899AA N RSI MOV, … "
    0 ['] MOVNTORSI >BODY CALLPROC DUP 12134546778899AA = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 12134546778899AA, got " HEX U.
    THEN
    CR
; 

testmovntorsi


HEX
CODE MOVNTORDI ( -ret- )
  RDI PUSH,
  1213454600998877 N  RDI  MOV,
  RDI PUSH,  RAX POP,
  RDI POP, 
  RET, 
END-CODE

: testmovntordi
    ." testing 1213454600998877 N RDI MOV, … "
    0 ['] MOVNTORDI >BODY CALLPROC DUP 1213454600998877 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 1213454600998877, got " HEX U.
    THEN
    CR
; 

testmovntordi


HEX
CODE MOVNTOBL ( -ret- )
  RBX PUSH,
  0 N  RBX  MOV,
  46 N  BL  MOV,
  RBX RAX MOV,
  RBX POP,
  RET, 
END-CODE

: testmovntobl
    ." testing 46 N BL MOV, … "
    0 ['] MOVNTOBL >BODY CALLPROC DUP 46 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 46, got " HEX U.
    THEN
    CR
; 

testmovntobl


HEX
CODE MOVNTOBH ( -ret- )
  RBX PUSH,
  0 N  RBX  MOV,
  46 N  BH  MOV,
  RBX RAX MOV,
  RBX POP,
  RET, 
END-CODE

: testmovntobh
    ." testing 46 N BH MOV, … "
    0 ['] MOVNTOBH >BODY CALLPROC DUP 4600 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 4600, got " HEX U.
    THEN
    CR
; 

testmovntobh


HEX
CODE MOVNTOCL ( -ret- )
  RCX PUSH,
  0 N  RCX  MOV,
  72 N  CL  MOV,
  RCX RAX MOV,
  RCX POP,
  RET, 
END-CODE

: testmovntocl
    ." testing 72 N CL MOV, … "
    0 ['] MOVNTOCL >BODY CALLPROC DUP 72 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 72, got " HEX U.
    THEN
    CR
; 

testmovntocl


HEX
CODE MOVNTOCH ( -ret- )
  RCX PUSH,
  0 N  RCX  MOV,
  93 N  CH  MOV,
  RCX RAX MOV,
  RCX POP,
  RET, 
END-CODE

: testmovntoch
    ." testing 93 N CH MOV, … "
    0 ['] MOVNTOCH >BODY CALLPROC DUP 9300 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 9300, got " HEX U.
    THEN
    CR
; 

testmovntoch


HEX
CODE MOVNTODL ( -ret- )
  RDX PUSH,
  0 N  RDX  MOV,
  19 N  DL  MOV,
  RDX RAX MOV,
  RDX POP,
  RET, 
END-CODE

: testmovntodl
    ." testing 19 N DL MOV, … "
    0 ['] MOVNTODL >BODY CALLPROC DUP 19 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 19, got " HEX U.
    THEN
    CR
; 

testmovntodl


HEX
CODE MOVNTODH ( -ret- )
  RDX PUSH,
  0 N  RDX  MOV,
  19 N  DH  MOV,
  RDX RAX MOV,
  RDX POP,
  RET, 
END-CODE

: testmovntodh
    ." testing 19 N DH MOV, … "
    0 ['] MOVNTODH >BODY CALLPROC DUP 1900 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 1900, got " HEX U.
    THEN
    CR
; 

testmovntodh


HEX
CODE MOVNTOBX ( -ret- )
  RBX PUSH,
  0 N  RBX  MOV,
  2627 N  BX  MOV,
  RBX RAX MOV,
  RBX POP,
  RET, 
END-CODE

: testmovntobx
    ." testing 2627 N BX MOV, … "
    0 ['] MOVNTOBX >BODY CALLPROC DUP 2627 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 2627, got " HEX U.
    THEN
    CR
; 

testmovntobx


HEX
CODE MOVNTOCX ( -ret- )
  RCX PUSH,
  0 N  RCX  MOV,
  2324 N  CX  MOV,
  RCX RAX MOV,
  RCX POP,
  RET, 
END-CODE

: testmovntocx
    ." testing 2324 N CX MOV, … "
    0 ['] MOVNTOCX >BODY CALLPROC DUP 2324 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 2324, got " HEX U.
    THEN
    CR
; 

testmovntocx



HEX
CODE MOVNTODX ( -ret- )
  RDX PUSH,
  0 N  RDX  MOV,
  1817 N  DX  MOV,
  RDX RAX MOV,
  RDX POP,
  RET, 
END-CODE

: testmovntodx
    ." testing 1817 N DX MOV, … "
    0 ['] MOVNTODX >BODY CALLPROC DUP 1817 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 1817, got " HEX U.
    THEN
    CR
; 

testmovntodx


HEX
CODE MOVNTOBP ( -ret- )
  RBP PUSH,
  0 N  RBP  MOV,
  6164 N  BP  MOV,
  RBP RAX MOV,
  RBP POP,
  RET, 
END-CODE

: testmovntobp
    ." testing 6164 N BP MOV, … "
    0 ['] MOVNTOBP >BODY CALLPROC DUP 6164 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 6164, got " HEX U.
    THEN
    CR
; 

testmovntobp


HEX
CODE MOVNTODI ( -ret- )
  RDI PUSH,
  0 N  RDI  MOV,
  7074 N  DI  MOV,
  RDI RAX MOV,
  RDI POP,
  RET, 
END-CODE

: testmovntodi
    ." testing 7074 N DI MOV, … "
    0 ['] MOVNTODI >BODY CALLPROC DUP 7074 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 7074, got " HEX U.
    THEN
    CR
; 

testmovntodi


HEX
CODE MOVNTOSI ( -ret- )
  RSI PUSH,
  0 N  RSI  MOV,
  9988 N  SI  MOV,
  RSI RAX MOV,
  RSI POP,
  RET, 
END-CODE

: testmovntosi
    ." testing 9988 N SI MOV, … "
    0 ['] MOVNTOSI >BODY CALLPROC DUP 9988 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 9988, got " HEX U.
    THEN
    CR
; 

testmovntosi



HEX
CODE MOVNTO[R+N]32BIT ( -ret- )
  VARY N  RAX MOV,  
  30752506 N  RAX 4 [R+N]  32BIT  MOV, 
  RET, 
END-CODE

: testmovnto[r+n]32bit
    ." testing 30752506 N  RAX 4 [R+N]  32BIT  MOV, … "
    0 VARY !  0 VARY 4 + !
    0 ['] MOVNTO[R+N]32BIT >BODY CALLPROC DROP
    VARY 4 + @ 30752506 = IF
        ." SUCCESS!"
    ELSE 
        ." FAIL! expected 30752506, got " 
        VARY 4 + @ HEX U.
    THEN
    CR
; 

testmovnto[r+n]32bit


HEX
CODE MOVNTO[R+N]8BIT ( -ret- )
  VARY N  RAX MOV,  
  95 N  RAX 4 [R+N]  8BIT  MOV, 
  RET, 
END-CODE

: testmovnto[r+n]8bit
    ." testing 95 N  RAX 4 [R+N]  8BIT  MOV, … "
    0 VARY !  0 VARY 4 + !
    0 ['] MOVNTO[R+N]8BIT >BODY CALLPROC DROP
    VARY 4 + @ 95 = IF
        ." SUCCESS!"
    ELSE 
        ." FAIL! expected 95, got " 
        VARY 4 + @ HEX U.
    THEN
    CR
; 

testmovnto[r+n]8bit


HEX
CODE MOVNTO[R+N]16BIT ( -ret- )
  VARY N  RAX MOV,  
  3031 N  RAX 4 [R+N]  16BIT  MOV, 
  RET, 
END-CODE

: testmovnto[r+n]16bit
    ." testing 3031 N  RAX 4 [R+N]  16BIT  MOV, … "
    0 VARY !  0 VARY 4 + !
    0 ['] MOVNTO[R+N]16BIT >BODY CALLPROC DROP
    VARY 4 + @ 3031 = IF
        ." SUCCESS!"
    ELSE 
        ." FAIL! expected 3031, got " 
        VARY 4 + @ HEX U.
    THEN
    CR
; 

testmovnto[r+n]16bit


HEX
CODE MOVNTO[R+S*R+N]32BIT ( -ret- )
  VARY N  RAX MOV,
  3 N  RCX  MOV,  
  31762716 N  RAX SCALE4* RCX 4 [R+S*R+N]  32BIT  MOV, 
  RET, 
END-CODE

: testmovnto[r+s*r+n]32bit
    ." testing 31762716 N  RAX SCALE4* RCX 4 [R+S*R+N]  32BIT  MOV, … "
    0 VARY !  0 VARY 10 + !
    0 ['] MOVNTO[R+S*R+N]32BIT >BODY CALLPROC DROP
    VARY 10 + @ 31762716 = IF
        ." SUCCESS!"
    ELSE 
        ." FAIL! expected 31762716, got " 
        VARY 10 + @ HEX U.
    THEN
    CR
;

testmovnto[r+s*r+n]32bit
 

HEX
CODE MOVNTO[R+S*R+N]8BIT ( -ret- )
  VARY N  RAX MOV,
  3 N  RCX  MOV,  
  3C N  RAX SCALE2* RCX 2 [R+S*R+N]  8BIT  MOV, 
  RET, 
END-CODE

: testmovnto[r+s*r+n]8bit
    ." testing 3C N  RAX SCALE2* RCX 2 [R+S*R+N]  8BIT  MOV, … "
    0 VARY !  0 VARY 8 + !
    0 ['] MOVNTO[R+S*R+N]8BIT >BODY CALLPROC DROP
    VARY 8 + @ 3C = IF
        ." SUCCESS!"
    ELSE 
        ." FAIL! expected 3C, got " 
        VARY 8 + @ HEX U.
    THEN
    CR
; 

testmovnto[r+s*r+n]8bit


HEX
CODE MOVNTO[R+S*R+N]16BIT ( -ret- )
  VARY N  RAX MOV,
  3 N  RCX  MOV,  
  3B2D N  RAX SCALE1* RCX 1 [R+S*R+N]  16BIT  MOV, 
  RET, 
END-CODE

: testmovnto[r+s*r+n]16bit
    ." testing 3B2D N  RAX SCALE1* RCX 1 [R+S*R+N]  16BIT  MOV, … "
    0 VARY !  0 VARY 4 + !
    0 ['] MOVNTO[R+S*R+N]16BIT >BODY CALLPROC DROP
    VARY 4 + @ 3B2D = IF
        ." SUCCESS!"
    ELSE 
        ." FAIL! expected 3B2D, got " 
        VARY 4 + @ HEX U.
    THEN
    CR
; 

testmovnto[r+s*r+n]16bit


HEX
CODE MOVRAXTORAX ( -ret- )
  9020304080709060 N  RAX  MOV, 
  RAX RAX MOV, 
  RET, 
END-CODE

: testmovraxtorax
    ." testing RAX RAX MOV, … "
    0 ['] MOVRAXTORAX >BODY CALLPROC DUP 9020304080709060 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 9020304080709060, got " HEX U.
    THEN
    CR
; 

testmovraxtorax


HEX
CODE MOVRCXTORAX ( -ret- )
  9020304080709060 N RCX MOV,
  RCX RAX MOV, 
  RET, 
END-CODE

: testmovrcxtorax
    ." testing RCX RAX MOV, … "
    0 ['] MOVRCXTORAX >BODY CALLPROC DUP 9020304080709060 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 9020304080709060, got " HEX U.
    THEN
    CR
; 

testmovrcxtorax


HEX
CODE MOVRAXTORCX ( -ret- )
  232425262728292A N RAX MOV,
  RAX RCX MOV,
  RCX PUSH, RAX POP,
  RET, 
END-CODE

: testmovraxtorcx
    ." testing RAX RCX MOV, … "
    0 ['] MOVRAXTORCX >BODY CALLPROC DUP 232425262728292A = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 232425262728292A, got " HEX U.
    THEN
    CR
; 

testmovraxtorcx


HEX
CODE MOV[RAX]TORAX ( -ret- ) 
  VARY N  RAX  MOV,
  RAX [R]  RAX  MOV, 
  RET, 
END-CODE

: testmov[rax]torax
    ." testing RAX [R] RAX MOV, … "
    232425262728292A VARY !
    0 ['] MOV[RAX]TORAX >BODY CALLPROC DUP 232425262728292A = IF
      DROP ." SUCCESS!"
    ELSE 
      ." FAIL! expected 232425262728292A, got " HEX U.
    THEN
    CR
; 

testmov[rax]torax



HEX
CODE MOV[RAX+4]TORAX ( -ret- ) 
  VARY N  RAX  MOV,
  RAX 4 [R+N]  RAX  MOV, 
  RET, 
END-CODE

: testmov[rax+4]torax
    ." testing RAX 4 [R+N] RAX MOV, … "
    0 VARY ! 232425262728292A VARY 4 + !
    0 ['] MOV[RAX+4]TORAX >BODY CALLPROC DUP 232425262728292A = IF
      DROP ." SUCCESS!"
    ELSE 
      ." FAIL! expected 232425262728292A, got " HEX U.
    THEN
    CR
; 

testmov[rax+4]torax



HEX
CODE MOVRAXTO[RAX+4] ( -ret- )
  VARY N  RAX  MOV,
  RAX  RAX 4 [R+N]  MOV, 
  RET, 
END-CODE

: testmovraxto[rax+4]
    ." testing RAX  RAX 4 [R+N]  MOV, … "
    0 VARY ! 0 VARY 4 + !
    0 ['] MOVRAXTO[RAX+4] >BODY CALLPROC DROP
    VARY 4 + @ VARY = IF
      ." SUCCESS!"
    ELSE 
      ." FAIL! expected VARY's address, got " VARY @ HEX U.
    THEN
    CR
; 

testmovraxto[rax+4]


HEX
CODE MOVECXTO[RAX+4] ( -ret- )
  71283054 N  ECX  MOV,
  VARY N  RAX  MOV,
  ECX  RAX 4 [R+N]  MOV, 
  RET, 
END-CODE

: testmovecxto[rax+4]
    ." testing ECX  RAX 4 [R+N]  MOV, … "
    0 VARY ! 0 VARY 4 + !
    0 ['] MOVECXTO[RAX+4] >BODY CALLPROC DROP
    VARY 4 + @ 71283054 = IF
      ." SUCCESS!"
    ELSE 
      ." FAIL! expected 71283054, got " HEX U.
    THEN
    CR
; 

testmovecxto[rax+4]


OHERE CONSTANT OX1 1122334455667789 CODE-U64,

CODE MOV[O]TORAX ( -ret- )
  OX1 [O]  RAX  MOV,
  RET,
END-CODE

: testmov[o]torax
    ." testing OX1 [O]  RAX  MOV, … "
    0 ['] MOV[O]TORAX >BODY CALLPROC VARY !
    VARY @ 1122334455667789 = IF
      ." SUCCESS!"
    ELSE 
      ." FAIL! expected 1122334455667789, got " VARY @ HEX U.
    THEN
    CR
; 

testmov[o]torax


CODE INCRAX RDI RAX -> MOV, RAX INC, RET, END-CODE

: testincrax
    ." testing RAX INC, … "
    -1 1 ['] INCRAX >BODY CALLPROC DUP 0= IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 0, got " .
    THEN
    CR
;

CODE INCRCX RDI RCX -> MOV, RCX INC, RCX RAX -> MOV, RET, END-CODE

: testincrcx
    ." testing RCX INC, … "
    -1 1 ['] INCRCX >BODY CALLPROC DUP 0= IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 0, got " .
    THEN
    CR
;

CODE INCRSI RDI RSI -> MOV, RSI INC, RSI RAX -> MOV, RET, END-CODE

: testincrsi
    ." testing RSI INC, … "
    -1 1 ['] INCRSI >BODY CALLPROC DUP 0= IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 0, got " .
    THEN
    CR
;

CODE INCRDI RDI INC, RDI RAX -> MOV, RET, END-CODE

: testincrdi
    ." testing RDI INC, … "
    -1 1 ['] INCRDI >BODY CALLPROC DUP 0= IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 0, got " .
    THEN
    CR
;

CODE INCR8 RDI R8 MOV, R8 INC, R8 RAX -> MOV, RET, END-CODE

: testincr8
    ." testing R8 INC, … "
    -1 1 ['] INCR8 >BODY CALLPROC DUP 0= IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 0, got " .
    THEN
    CR
;


CODE INCAL RDI RAX MOV, AL INC, RET, END-CODE

HEX
: testincal
    ." testing AL INC, … "
    -1 1 ['] INCAL >BODY CALLPROC DUP FFFFFFFFFFFFFF00 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 0, got " .
    THEN
    CR
;

CODE INCAH RDI RAX MOV, AH INC, RET, END-CODE

HEX
: testincah
    ." testing AH INC, … "
    -1 1 ['] INCAH >BODY CALLPROC DUP FFFFFFFFFFFF00FF = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 0, got " .
    THEN
    CR
;

CODE INCCL RDI RCX MOV, CL INC, RCX RAX MOV, RET, END-CODE

HEX
: testinccl
    ." testing CL INC, … "
    -1 1 ['] INCCL >BODY CALLPROC DUP FFFFFFFFFFFFFF00 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 0, got " .
    THEN
    CR
;

CODE INCCH RDI RCX MOV, CH INC, RCX RAX MOV, RET, END-CODE

HEX
: testincch
    ." testing CH INC, … "
    -1 1 ['] INCCH >BODY CALLPROC DUP FFFFFFFFFFFF00FF = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 0, got " .
    THEN
    CR
;


CODE INCAX  RDI RAX MOV,  AX INC,  RET,  END-CODE

HEX
: testincax
    ." testing AX INC, … "
    -1 1 ['] INCAX >BODY CALLPROC DUP FFFFFFFFFFFF0000 = IF
        DROP ." SUCCESS!"
    ELSE 
        ." FAIL! expected 0, got " .
    THEN
    CR
;


CODE DECEAX RDI RAX MOV, EAX DEC, RET, END-CODE

: testdeceax
    ." testint EAX DEC, … "
    0 1 ['] DECEAX >BODY CALLPROC DUP FFFFFFFF = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected FFFFFFFF, got " .
    THEN
    CR
;

CODE DECECX RDI RCX MOV, ECX DEC, RCX RAX MOV, RET, END-CODE

: testdececx
    ." testint ECX DEC, … "
    0 1 ['] DECECX >BODY CALLPROC DUP FFFFFFFF = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected FFFFFFFF, got " .
    THEN
    CR
;

testincrax
testincrcx
testincrsi
testincrdi
testincr8
testincal
testincah
testinccl
testincch

testincax


testdeceax
testdececx


CODE INC[RAX+4]
  VARY N  RAX  MOV,
  RAX 4 [R+N] 32BIT INC,
  RET,
END-CODE

: testinc[rax+4] ( -- )
    ." testinc[rax+4], … "
    11223344 VARY !  -1 VARY 4 + !
    0 ['] INC[RAX+4] >BODY CALLPROC DROP 
    VARY 4 + @ FFFFFFFF AND 0 = IF
      ." SUCCESS!"
    ELSE
      ." FAIL! expected 0, got " VARY 4 + @ HEX U.
    THEN
    CR
;

testinc[rax+4]


CODE DEC[RAX+4]
  VARY N  RAX  MOV,
  RAX 4 [R+N] 32BIT DEC,
  RET,
END-CODE

: testdec[rax+4] ( -- )
    ." testdec[rax+4], … "
    11223344 VARY !  0 VARY 4 + !
    0 ['] DEC[RAX+4] >BODY CALLPROC DROP 
    VARY 4 + @ FFFFFFFF AND FFFFFFFF = IF
      ." SUCCESS!"
    ELSE
      ." FAIL! expected FFFFFFFF, got " VARY 4 + @ FFFFFFFF AND HEX U.
    THEN
    CR
;

testdec[rax+4]


: testdec[rax+4]2 ( -- )
    ." testdec[rax+4]2, … "
    11223344 VARY !  5 VARY 4 + !
    0 ['] DEC[RAX+4] >BODY CALLPROC DROP 
    VARY 4 + @ FFFFFFFF AND 4 = IF
      ." SUCCESS!"
    ELSE
      ." FAIL! expected 4, got " VARY 4 + @ FFFFFFFF AND HEX U.
    THEN
    CR
;

testdec[rax+4]2


CODE BSWAPRAX
  2233445566778899 N  RAX  MOV, 
  RAX BSWAP,
  RET,
END-CODE

: testbswaprax ( -- )
    ." testing RAX BSWAP, … "
    0 ['] BSWAPRAX >BODY CALLPROC DUP 9988776655443322 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 9988776655443322, got " HEX .
    THEN
    CR
;

testbswaprax


CODE BSWAPRCX
  2233445566778899 N  RCX  MOV, 
  RCX BSWAP,
  RCX RAX MOV,
  RET,
END-CODE

: testbswaprcx ( -- )
    ." testing RCX BSWAP, … "
    0 ['] BSWAPRCX >BODY CALLPROC DUP 9988776655443322 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 9988776655443322, got " HEX .
    THEN
    CR
;

testbswaprcx



CODE ADDN8->A
  55 N  RAX  MOV, 
  23 N  AL  ADD,
  RET,
END-CODE

: testaddn8->a ( -- )
    ." testing N8 AL ADD, … "
    0 ['] ADDN8->A >BODY CALLPROC DUP 78 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 78, got " HEX .
    THEN
    CR
;

testaddn8->a


CODE ADDN16->A
  5544 N  RAX  MOV, 
  2310 N  AX  ADD,
  RET,
END-CODE

: testaddn16->a ( -- )
    ." testing N16 AX ADD, … "
    0 ['] ADDN16->A >BODY CALLPROC DUP 7854 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 7854, got " HEX .
    THEN
    CR
;

testaddn16->a


CODE ADDN32->A
  55443322 N  RAX  MOV, 
  23107654 N  RAX  ADD, 
  RET,
END-CODE

: testaddn32->a ( -- )
    ." testing N32 EAX ADD, … "
    0 ['] ADDN32->A >BODY CALLPROC DUP 7854A976 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 7854A976, got " HEX .
    THEN
    CR
;

testaddn32->a


HEX
CODE ADDN8->A32signextended
  55443322 N  RAX MOV, 
  54 N  EAX R  ADD, 
  RET,
END-CODE


: testaddn8->a32signextended ( -- )
    ." testing N8 EAX ADD, sign extended … "
    0 ['] ADDN8->A32signextended >BODY CALLPROC DUP 55443376 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 55443376, got " HEX .
    THEN
    ['] ADDN8->A32signextended >BODY 0A + C@ DUP 83 = IF
      DROP ."  SUCCESS!"
    ELSE
      ." FAIL! expected opcode 83, got " HEX .
    THEN
    ['] ADDN8->A32signextended >BODY 0C + C@ DUP 54 = IF
      DROP ."  SUCCESS!"
    ELSE
      ." FAIL! expected immediate data 54, got " HEX .
    THEN
    ['] ADDN8->A32signextended >BODY 0D + C@ DUP C3 = IF
      DROP ."  SUCCESS!"
    ELSE
      ." FAIL! expected return opcode C3 after immediate data, got " HEX .
    THEN
    CR
;

testaddn8->a32signextended


HEX
CODE ADDN8asN32->A32R
  55443322 N  RAX  MOV, 
  54 4 IMMEDIATE  EAX R  ADD, 
  RET,
END-CODE

: testaddn8asn32->a32r ( -- )
    ." testing 54 4 IMMEDIATE EAX R ADD,… "
    0 ['] ADDN8asN32->A32R >BODY CALLPROC DUP 55443376 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 55443376, got " HEX .
    THEN
    ['] ADDN8asN32->A32R >BODY 0A + C@ DUP 81 = IF
      DROP ."  SUCCESS!"
    ELSE
      ." FAIL! expected opcode 81, got " HEX .
    THEN
    ['] ADDN8asN32->A32R >BODY 0C + U32@ DUP 54 = IF
      DROP ."  SUCCESS!"
    ELSE
      ." FAIL! expected immediate data 54, got " HEX .
    THEN
    ['] ADDN8asN32->A32R >BODY 10 + C@ DUP C3 = IF
      DROP ."  SUCCESS!"
    ELSE
      ." FAIL! expected return opcode C3 after immediate data, got " HEX .
    THEN
    CR
;

testaddn8asn32->a32r


CODE ADDN8->C
  55 N  RCX  MOV, 
  24 N  CL  ADD,
  RCX RAX MOV,
  RET,
END-CODE

: testaddn8->c ( -- )
    ." testing N8 CL ADD, … "
    0 ['] ADDN8->C >BODY CALLPROC DUP 79 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 79, got " HEX .
    THEN
    CR
;

testaddn8->c


CODE ADDN16->C
  5544 N  RCX  MOV, 
  2311 N  CX  ADD,
  RCX RAX MOV,
  RET,
END-CODE

: testaddn16->c ( -- )
    ." testing N16 CX ADD, … "
    0 ['] ADDN16->C >BODY CALLPROC DUP 7855 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 7855, got " HEX .
    THEN
    CR
;

testaddn16->c


CODE ADDN32->C
  55443322 N  RCX  MOV, 
  23107655 N  ECX  ADD,
  RCX RAX MOV,
  RET,
END-CODE

: testaddn32->c ( -- )
    ." testing N32 ECX ADD, … "
    0 ['] ADDN32->C >BODY CALLPROC DUP 7854A977 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 7854A977, got " HEX .
    THEN
    CR
;

testaddn32->c


CODE ADDN8->M
  VARY N  RAX  MOV, 
  32 N  RAX [R]  8BIT  ADD,
  RAX [R]  RAX  MOV,
  RET,
END-CODE

: testaddn8->m ( -- )
    ." testing N8->M ADD, … "
    44 VARY !
    0 ['] ADDN8->M >BODY CALLPROC DUP 76 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 76, got " HEX .
    THEN
    CR
;

testaddn8->m


CODE ADDN16->M
  VARY N  RAX  MOV, 
  3210 N  RAX [R]  16BIT  ADD,
  RAX [R]  RAX  MOV,
  RET,
END-CODE

: testaddn16->m ( -- )
    ." testing N16->M ADD, … "
    1122 VARY !
    0 ['] ADDN16->M >BODY CALLPROC DUP 4332 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4332, got " HEX .
    THEN
    CR
;

testaddn16->m


CODE ADDN32->M
  VARY N  RAX  MOV, 
  32101234 N  RAX [R]  32BIT  ADD,
  RAX [R]  RAX  MOV,
  RET,
END-CODE

: testaddn32->m ( -- )
    ." testing N32->M ADD, … "
    55446633 VARY !
    0 ['] ADDN32->M >BODY CALLPROC DUP 87547867 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 87547867, got " HEX .
    THEN
    CR
;

testaddn32->m


CODE ADDN16->MSEXT
  VARY N  RAX  MOV, 
  32 N  RAX [R]  16BIT  ADD,
  RAX [R]  RAX  MOV,
  RET,
END-CODE

: testaddn16->msext ( -- )
    ." testing N16->MSEXT ADD, … "
    1122 VARY !
    0 ['] ADDN16->MSEXT >BODY CALLPROC DUP 1154 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 1154, got " HEX .
    THEN
    CR
;

testaddn16->msext


CODE ADDN32->MSEXT
  VARY N  RAX  MOV, 
  12 N  RAX [R]  32BIT  ADD,
  RAX [R]  RAX  MOV,
  RET,
END-CODE

: testaddn32->msext ( -- )
    ." testing N32->MSEXT ADD, … "
    55446633 VARY !
    0 ['] ADDN32->MSEXT >BODY CALLPROC DUP FFFFFFFF AND 55446645 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 55446645, got " FFFFFFFF AND HEX .
    THEN
    CR
;

testaddn32->msext


CODE ADDA8->A
  88 N  RAX  MOV, 
  AL  AL  ADD,
  RET,
END-CODE

: testadda8->a ( -- )
    ." testing a8->a ADD, … "
    0 ['] ADDA8->A >BODY CALLPROC DUP 10 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 10, got " HEX .
    THEN
    CR
;

testadda8->a


CODE ADDA16->A
  8108 N  RAX  MOV, 
  AX  AX  ADD,
  RET,
END-CODE

: testadda16->a ( -- )
    ." testing a16->a ADD, … "
    0 ['] ADDA16->A >BODY CALLPROC DUP 210 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 210, got " HEX .
    THEN
    CR
;

testadda16->a


CODE ADDA32->A
  11223344 N  RAX  MOV, 
  EAX  EAX  ADD,
  RET,
END-CODE

: testadda32->a ( -- )
    ." testing a32->a ADD, … "
    0 ['] ADDA32->A >BODY CALLPROC DUP 22446688 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 22446688, got " HEX .
    THEN
    CR
;

testadda32->a


CODE ADDA8->C
  88 N  RAX  MOV,
  81 N  RCX  MOV, 
  AL  CL  ADD,
  RCX  RAX  MOV,
  RET,
END-CODE

: testadda8->c ( -- )
    ." testing a8->c ADD, … "
    0 ['] ADDA8->C >BODY CALLPROC DUP 9 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 9, got " HEX .
    THEN
    CR
;

testadda8->c


CODE ADDA16->C
  8108 N  RAX  MOV,
  8232 N  RCX  MOV, 
  AX  CX  ADD,
  RCX  RAX  MOV,
  RET,
END-CODE

: testadda16->c ( -- )
    ." testing a16->c ADD, … "
    0 ['] ADDA16->C >BODY CALLPROC DUP 33A = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 33A, got " HEX .
    THEN
    CR
;

testadda16->c


CODE ADDA32->C
  33221100 N  RCX  MOV,
  11223344 N  RAX  MOV, 
  EAX  ECX  ADD,
  RCX  RAX  MOV,
  RET,
END-CODE

: testadda32->c ( -- )
    ." testing a32->c ADD, … "
    0 ['] ADDA32->C >BODY CALLPROC DUP 44444444 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 44444444, got " HEX .
    THEN
    CR
;

testadda32->c


CODE ADDA8->M
  VARY N  RCX  MOV,
  63 N  RAX  MOV, 
  AL  RCX [R]  ADD,
  RET,
END-CODE

: testadda8->m ( -- )
    ." testing a8->m ADD, … "
    A2 VARY !
    0 ['] ADDA8->M >BODY CALLPROC DROP
    VARY @ 5 = IF
      ." SUCCESS!"
    ELSE
      ." FAIL! expected 5, got " VARY @ HEX .
    THEN
    CR
;

testadda8->m


CODE ADDA8->MD8
  VARY N  RCX  MOV,
  64 N  EAX  MOV, 
  AL  RCX 4 [R+N]  ADD,
  RET,
END-CODE

: testadda8->md8 ( -- )
    ." testing a8->md8 ADD, … "
    0 VARY !  A2 VARY 4 + !
    0 ['] ADDA8->MD8 >BODY CALLPROC DROP
    VARY 4 + @ 6 = IF
      ." SUCCESS!"
    ELSE
      ." FAIL! expected 6, got " VARY @ HEX .
    THEN
    CR
;

testadda8->md8


CODE ADDA8->MD32
  VARY N  RCX  MOV,
  65 N  EAX  MOV, 
  AL  RCX 101 [R+N]  ADD,
  RET,
END-CODE

: testadda8->md32 ( -- )
    ." testing a8->md32 ADD, … "
    0 VARY !  A2 VARY 101 + !
    0 ['] ADDA8->MD32 >BODY CALLPROC DROP
    VARY 101 + @ 7 = IF
      ." SUCCESS!"
    ELSE
      ." FAIL! expected 7, got " VARY @ HEX .
    THEN
    CR
;

testadda8->md32


CODE ADDA16->M
  VARY N  RCX  MOV,
  6327 N  EAX  MOV, 
  AX  RCX [R]  ADD,
  RET,
END-CODE

: testadda16->m ( -- )
    ." testing a16->m ADD, … "
    A221 VARY !
    0 ['] ADDA16->M >BODY CALLPROC DROP
    VARY @ 548 = IF
      ." SUCCESS!"
    ELSE
      ." FAIL! expected 548, got " VARY @ HEX .
    THEN
    CR
;

testadda16->m



CODE ADDA32->M
  VARY N  RCX  MOV,
  63271204 N  EAX  MOV, 
  EAX  RCX [R]  ADD,
  RET,
END-CODE

: testadda32->m ( -- )
    ." testing a32->m ADD, … "
    12140203 VARY !
    0 ['] ADDA32->M >BODY CALLPROC DROP
    VARY @ 753B1407 = IF
      ." SUCCESS!"
    ELSE
      ." FAIL! expected 753B1407, got " VARY @ HEX .
    THEN
    CR
;

testadda32->m


CODE ADDR8->A
  82 N  ECX  MOV,  
  81 N  EAX  MOV, 
  CL  AL  ADD,
  RET,
END-CODE

: testaddr8->a ( -- )
    ." testing r8->a ADD, … "
    0 ['] ADDR8->A >BODY CALLPROC DUP 3 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 3, got " HEX .
    THEN
    CR
;

testaddr8->a


CODE ADDR8->R
  82 N  ECX  MOV,  
  85 N  EDX  MOV, 
  CL  DL  ADD,
  EDX  EAX  MOV,
  RET,
END-CODE

: testaddr8->r ( -- )
    ." testing r8->r ADD, … "
    0 ['] ADDR8->R >BODY CALLPROC DUP 7 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 7, got " HEX .
    THEN
    CR
;

testaddr8->r


CODE ADDREXR8->R
  82 N  R8  MOV,  
  85 N  RDX  MOV, 
  R8L  DL  ADD,
  RDX  RAX  MOV,
  RET,
END-CODE

: testaddrexr8->r ( -- )
    ." testing rexr8->r ADD, … "
    0 ['] ADDREXR8->R >BODY CALLPROC DUP 7 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 7, got " HEX .
    THEN
    CR
;

testaddrexr8->r


CODE ADDR8->M
  87 N  ECX  MOV,  
  VARY N  RDX  MOV, 
  CL  RDX [R]  ADD,
  RET,
END-CODE

: testaddr8->m ( -- )
    ." testing r8->m ADD, … "
    83 VARY !
    0 ['] ADDR8->M >BODY CALLPROC DROP
    VARY @ 0A = IF
      ." SUCCESS!"
    ELSE
      ." FAIL! expected 0A, got " VARY @ HEX .
    THEN
    CR
;

testaddr8->m


CODE ADDM8->A
  VARY N  RCX  MOV,  
  91 N  EAX  MOV, 
  RCX [R]  AL  ADD,
  RET,
END-CODE

: testaddm8->a ( -- )
    ." testing m8->a ADD, … "
    83 VARY !
    0 ['] ADDM8->A >BODY CALLPROC DUP 14 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 14, got " HEX .
    THEN
    CR
;

testaddm8->a


CODE ADDM8->R
  VARY N  RAX  MOV,  
  92 N  RCX  MOV, 
  RAX [R]  CL  ADD,
  RCX  RAX  MOV,
  RET,
END-CODE

: testaddm8->r ( -- )
    ." testing m8->r ADD, … "
    84 VARY !
    0 ['] ADDM8->R >BODY CALLPROC DUP 16 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 16, got " HEX .
    THEN
    CR
;

testaddm8->r


CODE ADCN8->A
  88 N  RAX  MOV,
  88 N  AL  ADD,  ( sets the carry flag )
  10 N  AL  ADC,
  RET,
END-CODE

: testadcn8->a ( -- )
    ." testing n8->a ADC, … "
    0 ['] ADCN8->A >BODY CALLPROC DUP 21 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 21, got " HEX .
    THEN
    CR
;

testadcn8->a


CODE SUBN8->A
  88 N  RAX  MOV,
  33 N  AL  SUB,
  RET,
END-CODE

: testsubn8->a ( -- )
    ." testing n8->a ADC, … "
    0 ['] SUBN8->A >BODY CALLPROC DUP 55 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 55, got " HEX .
    THEN
    CR
;

testsubn8->a


CODE SBBN8->A
  88 N  RAX  MOV,
  88 N  AL  ADD, ( sets the carry flag )
  06 N  AL  SBB, 
  RET,
END-CODE

: testsbbn8->a ( -- )
    ." testing n8->a SBB, … "
    0 ['] SBBN8->A >BODY CALLPROC DUP 9 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 9, got " HEX .
    THEN
    CR
;

testsbbn8->a


CODE ORN8->A
  88 N  RAX  MOV,
  82 N  AL  OR,  
  RET,
END-CODE

: testorn8->a ( -- )
    ." testing n8->a OR, … "
    0 ['] ORN8->A >BODY CALLPROC DUP 8A = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 8A, got " HEX .
    THEN
    CR
;

testorn8->a


CODE ANDN8->A
  88 N  RAX  MOV,
  82 N  AL  AND, 
  RET,
END-CODE

: testandn8->a ( -- )
    ." testing n8->a AND, … "
    0 ['] ANDN8->A >BODY CALLPROC DUP 80 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 80, got " HEX .
    THEN
    CR
;

testandn8->a


CODE XORN8->A
  91 N  RAX  MOV,
  89 N  AL  XOR, 
  RET,
END-CODE

: testxorn8->a ( -- )
    ." testing n8->a XOR, … "
    0 ['] XORN8->A >BODY CALLPROC DUP 18 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 18, got " HEX .
    THEN
    CR
;

testxorn8->a


CODE CMPN8->A
  91 N  RAX  MOV,
  91 N  AL  CMP,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  0 0  1 1  0
  RET,
END-CODE

: testcmpn8->a ( -- )
    ." testing n8->a CMP, … "
    0 ['] CMPN8->A >BODY CALLPROC EF00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 46, got " HEX .
    THEN
    CR
;

testcmpn8->a


HEX
CODE ADCXM->R32
  VARY N  RCX  MOV,
  63271204 N  EDI  MOV, 
  RAX RAX XOR,   // sets the zero flag
  STC,           // sets the carry flag
  RCX [R] EDI ADCX,  // does not change the zero flag
  EQ IF,         
    2 N EDI ADD,
  THEN,
  EDI EAX MOV,
  RET,
END-CODE

: testadcxm->r32 ( -- )
    ." testing m->r32 ADCX, … "
    12140203 VARY !
    0 ['] ADCXM->R32 >BODY CALLPROC VARX !
    VARX @ 753B140A = IF
      ." SUCCESS!"
    ELSE
      ." FAIL! expected 753B140A, got " VARX @ HEX .
    THEN
    CR
;

testadcxm->r32


HEX
CODE ADOXM->R32
  RAX RAX XOR,
  VARY N  RCX  MOV,
  7FFFFFFF N  EAX  MOV,
  1 N EAX ADD,   // sets the overflow flag 
  CLC,           // clears the carry flag
  RCX [R] EAX ADOX,  // does not change the carry flag
  CC IF,         
    4 N EAX ADD,
  THEN,
  RET,
END-CODE

: testadoxm->r32 ( -- )
    ." testing m->r32 ADOX, … "
    7FFFFFFF VARY !
    0 ['] ADOXM->R32 >BODY CALLPROC VARX !
    VARX @ 4 = IF
      ." SUCCESS!"
    ELSE
      ." FAIL! expected 4, got " VARX @ HEX .
    THEN
    CR
;

testadoxm->r32



CODE TESTN8->A
  FFFFFF91 N  RAX  MOV,
  FF6E N  AL  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtestn8->a ( -- )
    ." testing n8->a TEST, … "
    0 ['] TESTN8->A >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtestn8->a


CODE TESTN8->A2
  FFFFFF91 N  RAX  MOV,
  FF6F N  AL  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  0 0  ? 0  0 1  ?
  RET,
END-CODE

: testtestn8->a2 ( -- )
    ." testing n8->a TEST, 2 … "
    0 ['] TESTN8->A2 >BODY CALLPROC EE00 AND DUP 0200 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 0200, got " HEX .
    THEN
    CR
;

testtestn8->a2


CODE TESTN16->A
  FFFF9291 N  RAX  MOV,
  FF6D6E N  AX  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtestn16->a ( -- )
    ." testing n16->a TEST, … "
    0 ['] TESTN16->A >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtestn16->a


CODE TESTN32->A
  92919291 N  RAX  MOV,
  6D6E6D6E N  AX  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtestn32->a ( -- )
    ." testing n32->a TEST, … "
    0 ['] TESTN32->A >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtestn32->a


CODE TESTN8->C
  FFFFFF91 N  ECX  MOV,
  FF6F N  CL  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  0 0  ? 0  0 1  ?
  RET,
END-CODE

: testtestn8->c ( -- )
    ." testing n8->C TEST, … "
    0 ['] TESTN8->C >BODY CALLPROC EE00 AND DUP 0200 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 0200, got " HEX .
    THEN
    CR
;

testtestn8->c


CODE TESTN16->C
  FFFF9291 N  ECX  MOV,
  FF6D6E N  CX  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtestn16->c ( -- )
    ." testing n16->c TEST, … "
    0 ['] TESTN16->C >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtestn16->c


CODE TESTN32->C
  92919291 N  RAX  MOV,
  6D6E6D6E N  EAX  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtestn32->c ( -- )
    ." testing n32->c TEST, … "
    0 ['] TESTN32->C >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtestn32->c


CODE TESTN32->M
  0 N  RAX  MOV,
  VARY N  RCX  MOV,
  // 92919291 N  EAX  MOV,
  6D6E6D6E N  RCX [R] 32BIT TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtestn32->m ( -- )
    ." testing n32->m 32BIT TEST, … "
    92919291 VARY !
    0 ['] TESTN32->M >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtestn32->m


CODE TESTN32->MSEXT
  0 N  RAX  MOV,
  VARY N  RCX  MOV,
  // 92919291 N  EAX  MOV,
  6E N  RCX [R] 32BIT TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtestn32->msext ( -- )
    ." testing n32->msext 32BIT TEST, … "
    91 VARY !
    0 ['] TESTN32->MSEXT >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtestn32->msext


CODE TESTN16->M
  0 N  RAX  MOV,
  VARY N  RCX  MOV,
  // 92919291 N  EAX  MOV,
  6D6E N  RCX [R] 16BIT TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtestn16->m ( -- )
    ." testing n16->m TEST, … "
    9291 VARY !
    0 ['] TESTN16->M >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtestn16->m


CODE TESTN16->MSEXT
  0 N  RAX  MOV,
  VARY N  RCX  MOV,
  // 92919291 N  EAX  MOV,
  6E N  RCX [R] 16BIT TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtestn16->msext ( -- )
    ." testing n16->msext 16BIT TEST, … "
    91 VARY !
    0 ['] TESTN16->MSEXT >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtestn16->msext


CODE TESTN8->M
  0 N  RAX  MOV,
  VARY N  RCX  MOV,
  // 92919291 N  EAX  MOV,
  6E N  RCX [R] 8BIT TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtestn8->m ( -- )
    ." testing n8->m TEST, … "
    91 VARY !
    0 ['] TESTN8->M >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtestn8->m


CODE TESTA8->A
  FFFFFF91 N  RAX  MOV,
  AL  AL  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  1  0 0  ? 0  ? 1  ?
  RET,
END-CODE

: testtesta8->a ( -- )
    ." testing a8->a TEST, … "
    0 ['] TESTA8->A >BODY CALLPROC E000 AND DUP 8000 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 8200, got " HEX .
    THEN
    CR
;

testtesta8->a


CODE TESTA16->A
  FFFF9291 N  RAX  MOV,
  AX  AX  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  1  0 0  ? 0  ? 1  ?
  RET,
END-CODE

: testtesta16->a ( -- )
    ." testing a16->a TEST, … "
    0 ['] TESTA16->A >BODY CALLPROC E000 AND DUP 8000 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 8000, got " HEX .
    THEN
    CR
;

testtesta16->a


CODE TESTA32->A
  92919291 N  RAX  MOV,
  EAX  EAX  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  1  0 0  ? 0  ? 1  ?
  RET,
END-CODE

: testtesta32->a ( -- )
    ." testing a32->a TEST, … "
    0 ['] TESTA32->A >BODY CALLPROC E000 AND DUP 8000 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 8000, got " HEX .
    THEN
    CR
;

testtesta32->a


CODE TESTA8->C
  FFFFFF91 N  EAX  MOV,
  FFFFFF6E N  ECX  MOV,
  AL  CL  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtesta8->c ( -- )
    ." testing a8->c TEST, … "
    0 ['] TESTA8->C >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtesta8->c


CODE TESTA16->C
  FFFF9291 N  EAX  MOV,
  FFFF6D6E N  ECX  MOV,
  AX  CX  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtesta16->c ( -- )
    ." testing a16->c TEST, … "
    0 ['] TESTA16->C >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtesta16->c


CODE TESTA32->C
  92919291 N  EAX  MOV,
  6D6E6D6E N  ECX  MOV,
  EAX  ECX  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtesta32->c ( -- )
    ." testing a32->c TEST, … "
    0 ['] TESTA32->C >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtesta32->c


CODE TESTA8->M
  FFFFFF91 N  EAX  MOV,
  VARY N  RCX  MOV,
  AL  RCX [R]  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtesta8->m ( -- )
    ." testing a8->m TEST, … "
    6E VARY !
    0 ['] TESTA8->M >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtesta8->m


CODE TESTA16->M
  FFFF9291 N  EAX  MOV,
  VARY N  RCX  MOV,
  AX  RCX [R]  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtesta16->m ( -- )
    ." testing a16->m TEST, … "
    FFFF6D6E VARY !
    0 ['] TESTA16->M >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtesta16->m


CODE TESTA32->M
  92919291 N  EAX  MOV,
  VARY N  RCX  MOV,
  EAX  RCX [R]  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtesta32->m ( -- )
    ." testing a32->m TEST, … "
    6D6E6D6E VARY !
    0 ['] TESTA32->M >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtesta32->m


CODE TESTC32->A
  92919291 N  EAX  MOV,
  6D6E6D6E N  ECX  MOV,
  ECX  EAX  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtestc32->a ( -- )
    ." testing c32->a TEST, … "
    0 ['] TESTC32->A >BODY CALLPROC EE00 AND DUP 4600 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4600, got " HEX .
    THEN
    CR
;

testtestc32->a


CODE TESTC32->C
  6D6E6D6E N  ECX  MOV,
  ECX  ECX  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  0 0  ? 0  1 1  ?
  RET,
END-CODE

: testtestc32->c ( -- )
    ." testing c32->c TEST, … "
    0 ['] TESTC32->C >BODY CALLPROC E000 AND DUP 0000 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 0000, got " HEX .
    THEN
    CR
;

testtestc32->c


CODE TESTC32->M
  6D6E6D6E N  ECX  MOV,
  VARY N  RAX  MOV,
  ECX  RAX [R]  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtestc32->m ( -- )
    ." testing c32->m TEST, … "
    92919291 VARY !
    0 ['] TESTC32->M >BODY CALLPROC E000 AND DUP 4000 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4000, got " HEX .
    THEN
    CR
;

testtestc32->m


CODE TESTM32->A
  6D6E6D6E N  EAX  MOV,
  VARY N  RCX  MOV,
  RCX [R]  EAX  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtestm32->a ( -- )
    ." testing m32->a TEST, … "
    92919291 VARY !
    0 ['] TESTM32->A >BODY CALLPROC E000 AND DUP 4000 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4000, got " HEX .
    THEN
    CR
;

testtestm32->a


CODE TESTM32->C
  6D6E6D6E N  ECX  MOV,
  VARY N  RAX  MOV,
  RAX [R]  ECX  TEST,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
               //  0  1 0  ? 0  1 1  ?
  RET,
END-CODE

: testtestm32->c ( -- )
    ." testing m32->c TEST, … "
    92919291 VARY !
    0 ['] TESTM32->C >BODY CALLPROC E000 AND DUP 4000 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 4000, got " HEX .
    THEN
    CR
;

testtestm32->c


( HEX
X86-WORDLIST >SEARCH-ORDER

: testnop
." Testing NOP, … "
REGS> [ NOP, ] REGS> 

09 ROLL =           
SWAP 09 ROLL = AND
SWAP 08 ROLL = AND
SWAP 07 ROLL = AND
SWAP 06 ROLL = AND
SWAP 05 ROLL = AND
SWAP 04 ROLL = AND
SWAP 03 ROLL = AND
SWAP 02 ROLL = AND
IF ." success " ELSE ." fail " THEN CR ;

SEARCH-ORDER> DROP

testnop )


HEX
CODE TESTSTC
  0 N  ECX  MOV,
  ECX  ECX  ADD, // clear the carry flag
  STC,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
  AH  AL  MOV,
  80000000 N  ECX  MOV,
  ECX  ECX  ADD, // set the carry flag
  STC,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
  RET,
END-CODE

: teststc ( -- )
    ." testing STC, … "
    0 ['] TESTSTC >BODY CALLPROC 0101 AND DUP 0101 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 0101, got " HEX .
    THEN
    CR
;

teststc


HEX
CODE TESTCLC
  00000000 N  ECX  MOV,
  ECX  ECX  ADD, // clear the carry flag
  CLC,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
  AH  AL  MOV,
  80000000 N  EAX  MOV,
  ECX  ECX  ADD, // set the carry flag
  CLC,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
  RET,
END-CODE

: testclc ( -- )
    ." testing CLC, … "
    0 ['] TESTCLC >BODY CALLPROC 0101 AND DUP 0000 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 0000, got " HEX .
    THEN
    CR
;

testclc


HEX
CODE TESTCMC
  00000000 N  EAX  MOV,
  EAX  EAX  ADD, // clear the carry flag
  CMC,
  EFLAGS->AH,  // SF:ZF:0:AF:0:PF:1:CF
  AH  AL  MOV,
  CMC,
  EFLAGS->AH,
  RET,
END-CODE

: testcmc ( -- )
    ." testing CMC, … "
    0 ['] TESTCMC >BODY CALLPROC 0101 AND DUP 0001 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 0001, got " HEX .
    THEN
    CR
;

testclc


HEX
CODE TESTSET
  VARY N  RAX  MOV,
  CLC,
  RAX [R]  8BIT  NC SET,
  STC,
  RAX 1 [R+N]  8BIT  NC SET,
  0 N  ECX  MOV,
  ECX  ECX  ADD,
  RAX 2 [R+N]  8BIT  NZ SET,
  1 N  ECX  ADD,
  RAX 3 [R+N]  8BIT  NZ SET,
  RET,
END-CODE

: testset ( -- )
    ." testing SET, … "
    0 ['] TESTSET >BODY CALLPROC DROP VARY @ 01000001 = IF
      ." SUCCESS!"
    ELSE
      ." FAIL! expected 01000001, got " HEX .
    THEN
    CR
;

testset


HEX
CODE TESTROL1
  88 N  EAX  MOV,
  CLC,
  1 N  AL  ROL,
  EFLAGS->AH,
  RET,
END-CODE

: testrol1 ( -- )
    ." testing 1 N  AL  ROL, … "
    0 ['] TESTROL1 >BODY CALLPROC  1FF AND DUP 111 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 111, got " HEX .
    THEN
    CR
;

testrol1


HEX
CODE TESTROL2
  88 N  EAX  MOV,
  CLC,
  2 N  AL  ROL,
  EFLAGS->AH,
  RET,
END-CODE

: testrol2 ( -- )
    ." testing 2 N  AL  ROL, … "
    0 ['] TESTROL2 >BODY CALLPROC  1FF AND DUP 022 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 022, got " HEX .
    THEN
    CR
;

testrol2


HEX
CODE TESTROLC
  3 N  ECX  MOV,
  88 N  EAX  MOV,
  CLC,
  CL  AL  ROL,
  EFLAGS->AH,
  RET,
END-CODE

: testrolc ( -- )
    ." testing CL  AL  ROL, … "
    0 ['] TESTROLC >BODY CALLPROC  1FF AND DUP 044 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 044, got " HEX .
    THEN
    CR
;

testrolc


HEX
CODE TESTRCL1
  88 N  EAX  MOV,
  CLC,
  1 N  AL  RCL,
  EFLAGS->AH,
  RET,
END-CODE

: testrcl1 ( -- )
    ." testing 1 N  AL  RCL, … "
    0 ['] TESTRCL1 >BODY CALLPROC  1FF AND DUP 110 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 110, got " HEX .
    THEN
    CR
;

testrcl1


HEX
CODE TESTROR1
  11 N  EAX  MOV,
  CLC,
  1 N  AL  ROR,
  EFLAGS->AH,
  RET,
END-CODE

: testror1 ( -- )
    ." testing 1 N  AL  ROR, … "
    0 ['] TESTROR1 >BODY CALLPROC  1FF AND DUP 188 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 188, got " HEX .
    THEN
    CR
;

testror1


HEX
CODE TESTRCR1
  11 N  EAX  MOV,
  CLC,
  1 N  AL  RCR,
  EFLAGS->AH,
  RET,
END-CODE

: testrcr1 ( -- )
    ." testing 1 N  AL  RCR, … "
    0 ['] TESTRCR1 >BODY CALLPROC  1FF AND DUP 108 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 108, got " HEX .
    THEN
    CR
;

testrcr1


HEX
CODE TESTSHL1
  88 N  EAX  MOV,
  STC,
  1 N  AL  SHL,
  EFLAGS->AH,
  RET,
END-CODE

: testshl1 ( -- )
    ." testing 1 N  AL  SHL, … "
    0 ['] TESTSHL1 >BODY CALLPROC  1FF AND DUP 110 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 110, got " HEX .
    THEN
    CR
;

testshl1


HEX
CODE TESTSHR1
  11 N  EAX  MOV,
  STC,
  1 N  AL  SHR,
  EFLAGS->AH,
  RET,
END-CODE

: testshr1 ( -- )
    ." testing 1 N  AL  SHR, … "
    0 ['] TESTSHR1 >BODY CALLPROC  1FF AND DUP 108 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 108, got " HEX .
    THEN
    CR
;

testshr1


HEX
CODE TESTSAR1
  88 N  EAX  MOV,
  STC,
  1 N  AL  SAR,
  EFLAGS->AH,
  RET,
END-CODE

: testsar1 ( -- )
    ." testing 1 N  AL  SAR, … "
    0 ['] TESTSAR1 >BODY CALLPROC  1FF AND DUP 0C4 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 0C4, got " HEX .
    THEN
    CR
;

testsar1


HEX
CODE TESTBSF32
  00360000 N  ECX  MOV,
  ECX  EAX  BSF,
  RET,
END-CODE

: testbsf32 ( -- )
    ." testing BSF, 32BIT … "
    0 ['] TESTBSF32 >BODY CALLPROC DUP 11 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 11, got " HEX .
    THEN
    CR
;

// ' TESTBSF32 >BODY 10 DUMP
testbsf32


HEX
CODE TESTBSR32
  00360000 N  ECX  MOV,
  ECX  EAX  BSR,
  RET,
END-CODE

: testbsr32 ( -- )
    ." testing BSR, 32BIT … "
    0 ['] TESTBSR32 >BODY CALLPROC DUP 15 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 15, got " HEX .
    THEN
    CR
;

// ' TESTBSR32 >BODY 10 DUMP
testbsr32


HEX
CODE TESTBSF16
  0 N  EAX MOV,
  0360 N  ECX  MOV,
  CX  AX  BSF,
  RET,
END-CODE

: testbsf16 ( -- )
    ." testing BSF, 16BIT … "
    0 ['] TESTBSF16 >BODY CALLPROC DUP 5 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 5, got " HEX .
    THEN
    CR
;

// ' TESTBSF16 >BODY 10 DUMP
testbsf16


HEX
CODE TESTBSR16
  0 N  EAX  MOV,
  0360 N  ECX  MOV,
  CX  AX  BSR,
  RET,
END-CODE

: testbsr16 ( -- )
    ." testing BSR, 16BIT … "
    0 ['] TESTBSR16 >BODY CALLPROC DUP 9 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 9, got " HEX .
    THEN
    CR
;

// ' TESTBSR16 >BODY 10 DUMP
testbsr16


HEX
CODE TESTPUSHA32
  12349862 N  RAX  MOV,
  RAX  PUSH,
  RSP 0 [R+N]  RAX  MOV,
  8 N  RSP  ADD, 
  RET,
END-CODE

: testpusha32 ( -- )
    ." testing EAX PUSH, "
    0 ['] TESTPUSHA32 >BODY CALLPROC DUP 12349862 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 12349862, got " HEX .
    THEN
    CR
;

testpusha32


HEX
CODE TESTPUSHC32
  12349863 N  RCX  MOV,
  RCX  PUSH,
  RSP [R]  RAX  MOV,
  8 N  RSP  ADD,
  RET,
END-CODE

: testpushc32 ( -- )
    ." testing ECX PUSH, "
    0 ['] TESTPUSHC32 >BODY CALLPROC DUP 12349863 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 12349863, got " HEX .
    THEN
    CR
;

testpushc32


HEX
CODE TESTPUSHM64
  VARY N  RAX  MOV,
  RAX [R]  64BIT  PUSH,
  RSP [R]  RAX  MOV,
  8 N  RSP  ADD,
  RET,
END-CODE

: testpushm64 ( -- )
    ." testing [R] PUSH, 64bit "
    12349864 VARY !
    0 ['] TESTPUSHM64 >BODY CALLPROC DUP 12349864 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 12349864, got " HEX .
    THEN
    CR
;

testpushm64


HEX
CODE TESTPUSHN64
  19278412 N  64BIT  PUSH,
  RSP 0  [R+N]  RAX  MOV,
  8 N  RSP  ADD,
  RET,
END-CODE

: testpushn64 ( -- )
    ." testing N PUSH, 32bit "
    0 ['] TESTPUSHN64 >BODY CALLPROC DUP 19278412 = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected 19278412, got " HEX .
    THEN
    CR
;

testpushn64


HEX
CODE TESTPUSHN64EXT
  -2 N  64BIT  PUSH,
  // 6A CODE-U8,  FE CODE-U8,
  RSP [R]  RAX  MOV,
  8 N  RSP  ADD,
  RET,
END-CODE

: testpushn64ext ( -- )
    ." testing N PUSH, 64bit ext "
    0 ['] TESTPUSHN64EXT >BODY CALLPROC DUP FFFFFFFFFFFFFFFE = IF
      DROP ." SUCCESS!"
    ELSE
      ." FAIL! expected FFFFFFFFFFFFFFFE, got " HEX U.
    THEN
    CR
;

testpushn64ext


HEX
CODE TESTXCHG32
  VARY N  RCX  MOV,
  13243546 N  EAX  MOV,
  RCX [R]  EAX  XCHG,
  RET,
END-CODE

: testxchg32 ( -- )
    ." testing XCHG32 "
    87867574 VARY !
    0 ['] TESTXCHG32 >BODY CALLPROC 
    DUP VARZ !
    87867574 =
    VARY @ 13243546 = AND
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! "
      ." A = " VARZ @ .
      ."  VARY = " VARY @ .
    THEN
    CR
;

testxchg32


HEX
CODE TESTXCHG16
  0 N EAX MOV,
  VARY N  RCX  MOV,
  1324 N  AX  MOV,
  RCX [R]  AX  XCHG,
  RET,
END-CODE

: testxchg16 ( -- )
    ." testing XCHG16 "
    7574 VARY !
    0 ['] TESTXCHG16 >BODY CALLPROC 
    DUP VARZ !
    7574 =
    VARY @ 1324 = AND
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! "
      ." A = " VARZ @ .
      ."  VARY = " VARY @ .
    THEN
    CR
;

testxchg16


HEX
CODE TESTXCHG8
  0 N  EAX  MOV,
  VARY N  RCX  MOV,
  24 N  AL  MOV,
  RCX [R]  AL  XCHG,
  RET,
END-CODE

: testxchg8 ( -- )
    ." testing XCHG8 "
    75 VARY !
    0 ['] TESTXCHG8 >BODY CALLPROC 
    DUP VARZ !
    75 =
    VARY @ 24 = AND
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! "
      ." A = " VARZ @ .
      ."  VARY = " VARY @ .
    THEN
    CR
;

testxchg8


HEX
CODE TESTLEA64
  VARY N  RCX  MOV,
  RCX 54 [R+N]  RAX  LEA, 
  RET,
END-CODE

: testlea64 ( -- )
    ." testing LEA64 "
    0 ['] TESTLEA64 >BODY CALLPROC 
    DUP VARZ !
    VARY 54 + =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " VARY 54 + U. 
      ." , " VARZ @ U.
    THEN
    CR
;

testlea64


HEX
CODE TESTLEA32
  VARY N  RCX  MOV,
  RCX 54 [R+N]  EAX  LEA, 
  RET,
END-CODE

: testlea32 ( -- )
    ." testing LEA32 "
    0 ['] TESTLEA32 >BODY CALLPROC 
    DUP VARZ !
    VARY 54 + FFFFFFFF AND =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " VARY 54 + U. 
      ." , " VARZ @ U.
    THEN
    CR
;

testlea32


HEX
CODE TESTLEA16
  0 N  EAX  MOV,
  5555FF00 N  RCX  MOV,
  RCX 104 [R+N]  AX  LEA, 
  RET,
END-CODE

: testlea16 ( -- )
    ." testing LEA16 "
    0 ['] TESTLEA16 >BODY CALLPROC 
    DUP VARZ !
    4 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testlea16


HEX
CODE TESTLEA64TOM
  VARY N  RCX  MOV,
  VARZ N  RDX  MOV,  
  RCX 54 [R+N]  RDX 0 [R+N]  LEA,
  RAX  RAX  XOR,
  RET,
END-CODE

: testlea64tom ( -- )
    ." testing LEA M to M "
    0  VARZ  !
    0 ['] TESTLEA64TOM >BODY CALLPROC  DROP
    VARZ @
    VARY 54 + =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " VARY 54 + U. 
      ." , " VARZ @ U.
    THEN
    CR
;

testlea64tom



HEX
CODE TESTBITNOFR1
  0 N  EAX  MOV,
  15 N  ECX  MOV,
  1 N  ECX  BT,
  EFLAGS->AH,
  RET,
END-CODE

: testbitnofr1 ( -- )
    ." testing BITNOFR1 "
    0 ['] TESTBITNOFR1 >BODY CALLPROC 
    100 AND DUP VARZ !
    0 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 0 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testbitnofr1



HEX
CODE TESTBITNOFR2
  0 N  EAX  MOV,
  15 N  ECX  MOV,
  2 N  ECX  BT,
  EFLAGS->AH,
  RET,
END-CODE

: testbitnofr2 ( -- )
    ." testing BITNOFR2 "
    0 ['] TESTBITNOFR2 >BODY CALLPROC 
    100 AND DUP VARZ !
    100 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 100 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testbitnofr2



HEX
CODE TESTBITNOFR3
  0 N  EAX  MOV,
  15 N  EDX  MOV,
  3 N  EDX  BT,
  EFLAGS->AH,
  RET,
END-CODE

: testbitnofr3 ( -- )
    ." testing BITNOFR3 "
    0 ['] TESTBITNOFR3 >BODY CALLPROC 
    100 AND DUP VARZ !
    0 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 0 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testbitnofr3



HEX
CODE TESTBITNOFR4
  0 N  EAX  MOV,
  15 N  EDX  MOV,
  4 N  EDX  BT,
  EFLAGS->AH,
  RET,
END-CODE

: testbitnofr4 ( -- )
    ." testing BITNOFR4 "
    0 ['] TESTBITNOFR4 >BODY CALLPROC 
    100 AND DUP VARZ !
    100 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 100 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testbitnofr4



HEX
CODE TESTBTRNOFR
  FFFFFFFF N  EAX  MOV,
  3 N  EAX  BTR,
  RET,
END-CODE

: testbtrnofr ( -- )
    ." testing TESTBTRNOFR "
    0 ['] TESTBTRNOFR >BODY CALLPROC 
    DUP VARZ !
    FFFFFFF7 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFF7 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testbtrnofr



HEX
CODE TESTBTSNOFR
  0 N  EAX  MOV,
  3 N  EAX  BTS,
  RET,
END-CODE

: testbtsnofr ( -- )
    ." testing TESTBTSNOFR "
    0 ['] TESTBTSNOFR >BODY CALLPROC 
    DUP VARZ !
    8 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 8 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testbtsnofr



HEX
CODE TESTBTCNOFR1
  0 N  EAX  MOV,
  4 N  EAX  BTC,
  RET,
END-CODE

: testbtcnofr1 ( -- )
    ." testing TESTBTCNOFR1 "
    0 ['] TESTBTCNOFR1 >BODY CALLPROC 
    DUP VARZ !
    10 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 10 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testbtcnofr1



HEX
CODE TESTBTCNOFR2
  FFFFFFFF N  EAX  MOV,
  5 N  EAX  BTC,
  RET,
END-CODE

: testbtcnofr2 ( -- )
    ." testing TESTBTCNOFR2 "
    0 ['] TESTBTCNOFR2 >BODY CALLPROC 
    DUP VARZ !
    FFFFFFDF =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFDF U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testbtcnofr2


// check one of the bitops n of ah …


// check one of the bitops n of m beyond first 32 bits

HEX
CODE TESTBTSNOFM1
  VARY N  RAX  MOV,
  5 N  RAX [R]  BTS,
  RET,
END-CODE

: testbtsnofm1 ( -- )
    ." testing TESTBTSNOFM1 "
    0 VARY !
    0 ['] TESTBTSNOFM1 >BODY CALLPROC DROP
    VARY @
    20 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 20 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testbtsnofm1



HEX
CODE TESTBTSNOFM2
  VARY N  RAX  MOV,
  21 N  RAX [R]  BTS,
  RET,
END-CODE

: testbtsnofm2 ( -- )
    ." testing TESTBTSNOFM2 "
    0 VARY !  0 VARY 4 + !
    0 ['] TESTBTSNOFM2 >BODY CALLPROC DROP
    VARY 4 + @
    2 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 2 U. 
      ." , got " VARY 4 + @ U.
    THEN
    CR
;

testbtsnofm2



HEX
CODE TESTBTSNOFM3
  VARY N  RAX  MOV,
  3 N  RCX  MOV, 
  42 N  RAX SCALE4* RCX 0 [R+S*R+N]  BTS,  // VARY + 4 * 3 + (2*4)
  RET,
END-CODE

: testbtsnofm3 ( -- )
    ." testing TESTBTSNOFM3 "
    0 ['] TESTBTSNOFM3 >BODY CALLPROC DROP
    VARY 14 + @
    4 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4 U. 
      ." , got " VARY 14 + @ U.
    THEN
    CR
;

VARY 100 ERASE
testbtsnofm3



HEX
CODE TESTBTSROFR1
  7 N  RAX  MOV,
  3 N  ECX  MOV, 
  ECX  EAX  BTS,  
  RET,
END-CODE

: testbtsrofr1 ( -- )
    ." testing TESTBTSROFR1 "
    0 ['] TESTBTSROFR1 >BODY CALLPROC 
    DUP VARZ !
    0F =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 0F U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testbtsrofr1



HEX
CODE TESTBTSROFR2
  3 N  RAX  MOV,
  8 N  ECX  MOV, 
  EAX  ECX <- BTS,  
  RET,
END-CODE

: testbtsrofr2 ( -- )
    ." testing TESTBTSROFR2 "
    0 ['] TESTBTSROFR2 >BODY CALLPROC 
    DUP VARZ !
    103 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 103 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testbtsrofr2


HEX
CODE TESTBTSROFM1
  3 N  RAX  MOV,
  VARY N  RCX  MOV, 
  EAX  RCX [R] BTS,  
  RET,
END-CODE

: testbtsrofm1 ( -- )
    ." testing TESTBTSROFM1 "
    0 VARY !
    0 ['] TESTBTSROFM1 >BODY CALLPROC DROP
    VARY @
    8 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 8 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testbtsrofm1



HEX
CODE TESTBTSROFM2
  5 N  RAX  MOV,
  VARY N  RCX  MOV, 
  RCX [R]  EAX  BTS,  
  RET,
END-CODE

: testbtsrofm2 ( -- )
    ." testing TESTBTSROFM2 "
    0 VARY !
    0 ['] TESTBTSROFM2 >BODY CALLPROC DROP
    VARY @
    20 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 20 U. 
      ." , got " VARY 20 U.
    THEN
    CR
;

testbtsrofm2



HEX
CODE TESTUNTIL1
  0A N  EAX  MOV,
  BEGIN,
    EAX  DEC,
  ZS UNTIL,  
  RET,
END-CODE

: testuntil1 ( -- )
    ." testing TESTUNTIL1 "
    0 ['] TESTUNTIL1 >BODY CALLPROC 
    DUP 
    VARY !
    0 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 0 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testuntil1



HEX
CODE TESTUNTIL2
  0 N  RCX  MOV,
  RCX  RAX  MOV,
  BEGIN,
    RAX INC,
    10 N  CL  ADD,
  CS UNTIL,  
  RET,
END-CODE

: testuntil2 ( -- )
    ." testing TESTUNTIL2 "
    0 ['] TESTUNTIL2 >BODY CALLPROC 
    DUP 
    VARY !
    10 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 10 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testuntil2




HEX
CODE TESTIFTHEN1
  12345678 N  ECX  MOV,
  22222222 N  RAX  MOV,
  ECX  12345678 N  CMP,
  ZS IF,
    11111111 N  RAX  MOV,
  THEN, 
  RET,
END-CODE

: testifthen1 ( -- )
    ." testing TESTIFTHEN1 "
    0 ['] TESTIFTHEN1 >BODY CALLPROC 
    DUP 
    VARZ !
    11111111 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 11111111 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testifthen1


HEX
CODE TESTIFTHEN2
  1234567 N  ECX  MOV,
  22222222 N  RAX  MOV,
  ECX 12345678 N  CMP,
  ZS IF,
    11111111 N  RAX  MOV,
  THEN, 
  RET,
END-CODE

: testifthen2 ( -- )
    ." testing TESTIFTHEN2 "
    0 ['] TESTIFTHEN2 >BODY CALLPROC 
    DUP 
    VARZ !
    22222222 =
    IF
      ." SUCCESS! "
    ELSE
      ." FAIL! Expected " 22222222 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testifthen2



HEX
CODE TESTWHILE1
  0 N  RCX  MOV,
  RCX  RAX  MOV,
  BEGIN,
    20 N  CL  ADD,
  NC WHILE,
    RAX INC,
  REPEAT,  
  RET,
END-CODE

: testwhile1 ( -- )
    ." testing TESTWHILE1 "
    0 ['] TESTWHILE1 >BODY CALLPROC 
    DUP 
    VARY !
    7 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 7 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testwhile1


HEX
CODE TESTLOOP1
  9 N  ECX  MOV,
  0 N  RAX  MOV,
  BEGIN,
    RAX  INC,
  LOOPDONEUNTIL, 
  RET,
END-CODE

: testloop1 ( -- )
    ." testing TESTLOOP1 "
    0 ['] TESTLOOP1 >BODY CALLPROC 
    DUP 
    VARY !
    9 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 9 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testloop1


HEX
CODE TESTLOOP2
  9 N  ECX  MOV,
  1 N  RAX  MOV,
  BEGIN,
    RAX  DEC,
  NZORLOOPDONEUNTIL, 
  RET,
END-CODE

: testloop2 ( -- )
    ." testing TESTLOOP2 "
    0 ['] TESTLOOP2 >BODY CALLPROC 
    DUP 
    VARY !
    FFFFFFFFFFFFFFFF =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFFFFFFFFFFF U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testloop2


HEX
CODE TESTLOOP3
  9 N  ECX  MOV,
  2 N  RAX  MOV,
  BEGIN,
    RAX  DEC,
  ZSORLOOPDONEUNTIL, 
  RET,
END-CODE

: testloop3 ( -- )
    ." testing TESTLOOP2 "
    0 ['] TESTLOOP3 >BODY CALLPROC 
    DUP 
    VARY !
    0 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 0 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testloop3


HEX
CODE TESTCMOVIFNC1
  VARY N  RCX MOV,
  55555555 N  RAX  MOV,
  CLC,
  RCX [R]  RAX  NC CMOV,
  RET,
END-CODE

: testcmovifnc1 ( -- )
    ." testing TESTCMOVIFNC1 "
    12345678 VARY !
    0 ['] TESTCMOVIFNC1 >BODY CALLPROC 
    DUP 
    VARZ !
    12345678 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 12345678 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testcmovifnc1


HEX
CODE TESTCMOVIFNC2
  VARY N  RCX  MOV,
  55555555 N  EAX  MOV,
  STC,
  RCX [R]  EAX  NC CMOV,
  RET,
END-CODE

: testcmovifnc2 ( -- )
    ." testing TESTCMOVIFNC2 "
    12345678 VARY !
    0 ['] TESTCMOVIFNC2 >BODY CALLPROC 
    DUP 
    VARZ !
    55555555 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 55555555 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testcmovifnc2


HEX
CODE TESTCMPXCHG8BIT1
  VARY N  RDI  MOV,
  12345679 N  RAX  MOV,
  55443322 N  RDI [R]  MOV,
  11335588 N  ECX MOV,
  RDI [R]  CL  CMPXCHG,
  RET,
END-CODE

: testcmpxchg8bit1 ( -- )
    ." testing TESTCMPXCHG8BIT1 "
    0 ['] TESTCMPXCHG8BIT1 >BODY CALLPROC 
    DUP 
    VARZ !
    12345622 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 12345622 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testcmpxchg8bit1



HEX
CODE TESTCMPXCHG8BIT2
  VARY N  RDI  MOV,
  12345622 N  RAX  MOV,
  55443322 N  RDI [R]  MOV,
  11335588 N  ECX MOV,
  RDI [R]  CL  CMPXCHG,
  RET,
END-CODE

: testcmpxchg8bit2 ( -- )
    ." testing TESTCMPXCHG8BIT2 "
    0 ['] TESTCMPXCHG8BIT2 >BODY CALLPROC DROP
    VARY @
    55443388 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 55443388 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testcmpxchg8bit2



HEX
CODE TESTCMPXCHG32BIT1
  VARY N  RDI  MOV,
  12345679 N  RAX  MOV,
  55443322 N  RDI [R]  MOV,
  11335588 N  ECX MOV,
  RDI [R]  ECX  CMPXCHG,
  RET,
END-CODE

: testcmpxchg32bit1 ( -- )
    ." testing TESTCMPXCHG32BIT1 "
    0 ['] TESTCMPXCHG32BIT1 >BODY CALLPROC 
    DUP 
    VARZ !
    55443322 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 55443322 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testcmpxchg32bit1



HEX
CODE TESTCMPXCHG32BIT2
  VARY N  RDI  MOV,
  12345622 N  EAX  MOV,
  12345622 N  RDI [R] 32BIT MOV,
  11335588 N  ECX MOV,
  RDI [R]  ECX  CMPXCHG,
  RET,
END-CODE


: testcmpxchg32bit2 ( -- )
    ." testing TESTCMPXCHG32BIT2 "
    0 ['] TESTCMPXCHG32BIT2 >BODY CALLPROC DROP
    VARY @  11335588 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 11335588 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testcmpxchg32bit2


HEX
CODE TESTCMPXCHG64BIT
  VARY N  RDI  MOV,
  1234563312345622 N  RAX  MOV,
  RAX  RDI [R] 64BIT MOV,
  1133559911335588 N  RCX  MOV,
  RDI [R]  RCX  CMPXCHG,
  RET,
END-CODE

: testcmpxchg64bit ( -- )
    ." testing TESTCMPXCHG64BIT "
    0 ['] TESTCMPXCHG64BIT >BODY CALLPROC DROP
    VARY @
    1133559911335588 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1133559911335588 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testcmpxchg64bit


HEX
CODE TESTCMPXCHG8B
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  1234563312345622 N  RAX  MOV,
  RAX  RDI [R] 64BIT MOV,
  11335599 N EDX MOV,
  11335588 N EAX MOV,
  RDI [R]  CMPXCHG8B,
  EAX  RSI [R]  MOV,
  EDX  RSI 4 [R+N]  MOV,
  RET,
END-CODE

: testcmpxchg8b ( -- )
    ." testing TESTCMPXCHG8B "
    0 ['] TESTCMPXCHG8B >BODY CALLPROC DROP
    VARX @
    1234563312345622 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1234563312345622 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testcmpxchg8b



HEX
CODE TESTCMPXCHG16B
  VARY N  RDI  MOV,
  1234563312345622 N  RAX  MOV,
  RAX  RDI [R] 64BIT MOV,
  8765765454324321 N  RAX  MOV,
  RAX  RDI 8 [R+N] 64BIT MOV,
  1133559776655449 N RDX MOV,
  1133558866554433 N RAX MOV,
  RDI [R]  CMPXCHG16B,
  VARX N  RDI  MOV,
  RAX  RDI [R]  MOV,
  VARZ N  RDI  MOV,
  RDX  RDI [R]  MOV,
  RET,
END-CODE

: testcmpxchg16b ( -- )
    ." testing TESTCMPXCHG16B "
    0 ['] TESTCMPXCHG16B >BODY CALLPROC DROP
    VARX @
    1234563312345622 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1234563312345622 U. 
      ." , got " VARX @ U.
    THEN
    VARZ @
    8765765454324321 =
    IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 8765765454324321 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testcmpxchg16b


HEX
CODE TESTSHLD1
  VARY N  RDI MOV,
  12345678 N  EAX  MOV,
  9ABCDEF0 N  RDI [R] 32BIT MOV,
  4 N  ECX MOV,
  CL  EAX  RDI [R]  SHLD,
  RET,
END-CODE

: testshld1 ( -- )
    ." testing TESTSHLD1 "
    0 ['] TESTSHLD1 >BODY CALLPROC
    VARZ ! 
    VARY @ FFFFFFFF AND
    ABCDEF01 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " ABCDEF01 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testshld1


HEX
CODE TESTSHLD2
  VARY N  RDI  MOV,
  12345678 N  EAX  MOV,
  9ABCDEF0 N  RDI [R] 32BIT MOV,
  4 N  ECX MOV,
  CL  AX  RDI [R]  SHLD,
  RET,
END-CODE

: testshld2 ( -- )
    ." testing TESTSHLD2 "
    0 ['] TESTSHLD2 >BODY CALLPROC
    VARZ ! 
    VARY @ FFFFFFFF AND
    9ABCEF05 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 9ABCEF05 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testshld2


HEX
CODE TESTSHLD3
  VARY N  RDI  MOV,
  12345678 N  EAX  MOV,
  9ABCDEF0 N  RDI [R] 32BIT MOV,
  8 N  EAX  RDI [R]  SHLD,
  RET,
END-CODE

: testshld3 ( -- )
    ." testing TESTSHLD3 "
    0 ['] TESTSHLD3 >BODY CALLPROC
    VARZ ! 
    VARY @ FFFFFFFF AND
    BCDEF012 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " BCDEF012 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testshld3


HEX
CODE TESTSHLD4
  VARY N  RDI  MOV,
  12345678 N  EAX  MOV,
  9ABCDEF0 N  RDI [R] 32BIT MOV,
  8 N  AX  RDI [R]  SHLD,
  RET,
END-CODE

: testshld4 ( -- )
    ." testing TESTSHLD4 "
    0 ['] TESTSHLD4 >BODY CALLPROC
    VARZ ! 
    VARY @ FFFFFFFF AND
    9ABCF056 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 9ABCF056 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testshld4


HEX
CODE TESTSHLD5
  12345678 N  EAX  MOV,
  9ABCDEF0 N  EDX  MOV,
  4 N  EDX  EAX  SHLD,
  RET,
END-CODE

: testshld5 ( -- )
    ." testing TESTSHLD5 "
    0 ['] TESTSHLD5 >BODY CALLPROC
    VARZ !
    VARZ @
    23456789 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 23456789 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testshld5


HEX
CODE TESTSHLD6
  12345678 N  EAX  MOV,
  9ABCDEF0 N  EDX  MOV,
  4 N  DX  AX  SHLD,
  RET,
END-CODE

: testshld6 ( -- )
    ." testing TESTSHLD6 "
    0 ['] TESTSHLD6 >BODY CALLPROC
    VARZ !
    VARZ @
    1234678D =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 12346789 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testshld6


HEX
CODE TESTSHLD7
  12345678 N  EAX  MOV,
  9ABCDEF0 N  EDX  MOV,
  8 N  EAX  EDX <- SHLD,
  RET,
END-CODE

: testshld7 ( -- )
    ." testing TESTSHLD7 "
    0 ['] TESTSHLD7 >BODY CALLPROC
    VARZ !
    VARZ @
    3456789A =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3456789A U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testshld7


HEX
CODE TESTSHLD8
  123456789ABCDEF0 N  RAX  MOV,
  1122334455667788 N  RDX  MOV,
  8 N  RAX  RDX <- SHLD,
  RET,
END-CODE

: testshld8 ( -- )
    ." testing TESTSHLD8 "
    0 ['] TESTSHLD8 >BODY CALLPROC
    VARZ !
    VARZ @
    3456789ABCDEF011 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3456789ABCDEF011 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testshld8


HEX
CODE TESTSHLD8a
  123456789ABCDEF0 N  RAX  MOV,
  1122334455667788 N  R8  MOV,
  8 N  RAX  R8 <- SHLD,
  RET,
END-CODE

: testshld8a ( -- )
    ." testing TESTSHLD8a (rex src reg) "
    0 ['] TESTSHLD8a >BODY CALLPROC
    VARZ !
    VARZ @
    3456789ABCDEF011 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3456789ABCDEF011 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testshld8a


HEX
CODE TESTSHLD8b
  123456789ABCDEF0 N  R9  MOV,
  1122334455667788 N  RDX  MOV,
  8 N  R9  RDX <- SHLD,
  R9 RAX MOV,
  RET,
END-CODE

: testshld8b ( -- )
    ." testing TESTSHLD8b "
    0 ['] TESTSHLD8b >BODY CALLPROC
    VARZ !
    VARZ @
    3456789ABCDEF011 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3456789ABCDEF011 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testshld8b


HEX
CODE TESTSHLD9
  123456789ABCDEF0 N  RAX  MOV, // r/m dest (hi)
  1122334455667788 N  RDX  MOV, // reg src (lo) doesn't change
  8 N  RAX  RDX <- SHLD,
  RDX RAX XCHG,
  RET,
END-CODE

: testshld9 ( -- )
    ." testing TESTSHLD9 "
    0 ['] TESTSHLD9 >BODY CALLPROC
    VARZ !
    VARZ @
    1122334455667788 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1122334455667788 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testshld9


HEX
CODE TESTSHLD9a
  123456789ABCDEF0 N  RAX  MOV, // r/m dest (hi)
  1122334455667788 N  R8  MOV, // reg src (lo) doesn't change
  8 N  RAX  R8 <- SHLD,
  R8 RAX XCHG,
  RET,
END-CODE

: testshld9a ( -- )
    ." testing TESTSHLD9a (rex src reg) "
    0 ['] TESTSHLD9a >BODY CALLPROC
    VARZ !
    VARZ @
    1122334455667788 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1122334455667788 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testshld9a


HEX
CODE TESTSHLD9b
  123456789ABCDEF0 N  R9  MOV, // r/m dest (hi)
  1122334455667788 N  RDX  MOV, // reg src (lo) doesn't change
  8 N  R9  RDX <- SHLD,
  RDX RAX XCHG,
  RET,
END-CODE

: testshld9b ( -- )
    ." testing TESTSHLD9b "
    0 ['] TESTSHLD9b >BODY CALLPROC
    VARZ !
    VARZ @
    1122334455667788 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1122334455667788 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testshld9b


HEX
CODE TESTSHLD10
  VARY N  RDI  MOV,
  123456789ABCDEF0 N  RAX  MOV,
  RAX  RDI [R] -> MOV, // r/m dest (hi)
  1122334455667788 N  RAX  MOV, // reg src (lo) doesn't change
  8 N  RDI [R]  RAX <- SHLD,
  RET,
END-CODE

: testshld10 ( -- )
    ." testing TESTSHLD10 "
    0 ['] TESTSHLD10 >BODY CALLPROC
    VARZ !
    VARZ @
    1122334455667788 =
    IF
      ." src unchanged SUCCESS!"
    ELSE
      ." FAIL! scr changed, Expected " 1122334455667788 U. 
      ." , got " VARZ @ U.
    THEN
 
    VARY @
    3456789ABCDEF011 =
    IF
      ."  dest check SUCCESS!"
    ELSE
      ." FAIL! dest wrong, Expected " 3456789ABCDEF011 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testshld10


HEX
CODE TESTSHRD1
  VARY N  RDI  MOV,
  12345678 N  EAX  MOV,
  9ABCDEF0 N  RDI [R] 32BIT MOV,
  4 N  EAX  RDI [R]  SHRD,
  RET,
END-CODE

: testshrd1 ( -- )
    ." testing TESTSHRD1 "
    0 ['] TESTSHRD1 >BODY CALLPROC
    VARZ !
    VARY @ FFFFFFFF AND
    89ABCDEF =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected = " 89ABCDEF U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testshrd1



HEX
CODE TESTIMULA1
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  10102020 N  RAX  MOV,
  2000 N  RDI [R] 64BIT MOV,
  RDI [R]  32BIT  IMULA,
  EDX  RSI [R]  MOV,
  RET,
END-CODE

: testimula1 ( -- )
    ." testing TESTIMULA1 "
    0 VARX !
    0 ['] TESTIMULA1 >BODY CALLPROC
    VARZ !
    VARZ @ FFFFFFFF AND
    04040000 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected lo = " 0404000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
    VARX @ FFFFFFFF AND 202 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected hi = " 202 U. 
      ." , got " VARX @ FFFFFFFF AND U.
    THEN
    CR
;

testimula1


HEX
CODE TESTIMULA2
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  0 N  RDX  MOV,
  10102020 N  RAX  MOV,
  20 N  RDI [R]  64BIT  MOV,
  RDI [R]  16BIT  IMULA,
  EDX  RSI [R]  MOV,
  RET,
END-CODE

: testimula2 ( -- )
    ." testing TESTIMULA2 "
    0 ['] TESTIMULA2 >BODY CALLPROC
    VARZ !
    VARZ @
    10100400 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected lo = " 10100400 U. 
      ." , got " VARZ @ U.
    THEN
    CR
    VARX @ 4 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected hi = " 4 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testimula2


HEX
CODE TESTIMULA3
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  0 N  RDX  MOV,
  10102020 N  RAX  MOV,
  22 N  RDI [R]  8BIT  MOV,
  RDI [R]  8BIT  IMULA,
  EDX  RSI [R]  MOV,
  RET,
END-CODE

: testimula3 ( -- )
    ." testing TESTIMULA3 "
    0 ['] TESTIMULA3 >BODY CALLPROC
    VARZ !
    VARZ @
    10100440 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected lo = " 10100440 U. 
      ." , got " VARZ @ U.
    THEN
    CR
    VARX @ 0 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected hi = " 0 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testimula3


HEX
CODE TESTIMUL1
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  10102020 N  EBX  MOV,
  4 N  RDI [R]  64BIT  MOV,
  RDI [R]  EBX  IMUL,
  EBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testimul1 ( -- )
    ." testing TESTIMUL1 "
    0 ['] TESTIMUL1 >BODY CALLPROC
    VARZ !
    VARX @ 40408080 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 40408080 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testimul1


HEX
CODE TESTIMUL2
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  10102020 N  RBX  MOV,
  4 N  RDI [R]  64BIT  MOV,
  RDI [R]  BX  IMUL,
  EBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testimul2 ( -- )
    ." testing TESTIMUL2 "
    0 ['] TESTIMUL2 >BODY CALLPROC
    VARZ !
    VARX @ 10108080 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 10108080 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testimul2


HEX
CODE TESTIMULN1 // 32N -> 32
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  0 N  RBX  MOV,
  40000 N  RDI [R]  64BIT  MOV,
  11222211 N  RDI [R]  EBX  IMULN,
  EBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testimuln1 ( -- )
    ." testing TESTIMULN1 "
    0 ['] TESTIMULN1 >BODY CALLPROC
    VARZ !
    VARX @ 88440000 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 88440000 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testimuln1


HEX
CODE TESTIMULN2 // also 32N -> 32
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  0 N  EBX  MOV,
  4000 N  RDI [R]  64BIT  MOV,
  2211 N  RDI [R]  EBX  IMULN,
  EBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testimuln2 ( -- )
    ." testing TESTIMULN2 "
    0 ['] TESTIMULN2 >BODY CALLPROC
    VARZ !
    VARX @ 08844000 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 08844000 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testimuln2


HEX
CODE TESTIMULN3 // 8N->32 sign extended
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  0 N  EBX  MOV,
  04030201 N  RDI [R]  MOV,
  11 N  RDI [R]  EBX  IMULN,
  EBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testimuln3 ( -- )
    ." testing TESTIMULN3 "
    0 ['] TESTIMULN3 >BODY CALLPROC
    VARZ !
    VARX @ 44332211 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 44332211 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testimuln3


HEX
CODE TESTIMULN4 // will be 16N -> 16
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  0 N  EBX  MOV,
  4 N  RDI [R]  64BIT  MOV,
  11222211 N  RDI [R]  BX  IMULN,
  EBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testimuln4 ( -- )
    ." testing TESTIMULN4 "
    0 ['] TESTIMULN4 >BODY CALLPROC
    VARZ !
    VARX @ 00008844 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 00008844 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testimuln4


HEX
CODE TESTIMULN5  // 16N -> 16
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  0 N  EBX  MOV,
  4 N  RDI [R]  64BIT  MOV,
  1122 N  RDI [R]  BX  IMULN,
  EBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testimuln5 ( -- )
    ." testing TESTIMULN5 "
    0 ['] TESTIMULN5 >BODY CALLPROC
    VARZ !
    VARX @ 4488 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4488 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testimuln5


HEX
CODE TESTIMULN6 // 8N -> 16 sign extended
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  0 N  EBX  MOV,
  403 N  RDI [R]  64BIT  MOV,
  12 N  RDI [R]  BX  IMULN,
  EBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testimuln6 ( -- )
    ." testing TESTIMULN6 "
    0 ['] TESTIMULN6 >BODY CALLPROC
    VARZ !
    VARX @ 4836 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4836 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testimuln6


HEX
CODE TESTIMULN7 // 8N->64 sign extended
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  RBX RBX XOR,
  0807060504030201 N  RAX  MOV,
  RAX  RDI [R]  MOV,
  11 N  RDI [R]  RBX  IMULN,
  RBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testimuln7 ( -- )
    ." testing TESTIMULN7 "
    0 ['] TESTIMULN7 >BODY CALLPROC
    VARZ !
    VARX @ 8877665544332211 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 8877665544332211 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testimuln7


HEX
CODE TESTIMULN8 // also 32N -> 64
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  RBX RBX XOR,
  200040001000 N  RAX  MOV,
  RAX  RDI [R]  MOV,
  2211 N  RDI [R]  RBX  IMULN,
  RBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testimuln8 ( -- )
    ." testing TESTIMULN8 "
    0 ['] TESTIMULN8 >BODY CALLPROC
    VARZ !
    VARX @ 0442288442211000 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 0442288442211000 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testimuln8


HEX
CODE TESTMOVZX1 // 8N -> 32 extended
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  -1 N  RSI [R]  64BIT  MOV,
  FFFFFFFF N  EBX  MOV,
  83 N  RDI [R] 64BIT  MOV,
  RDI [R] 8BIT  EBX  MOVZX,
  EBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testmovzx1 ( -- )
    ." testing TESTMOVZX1 "
    0 ['] TESTMOVZX1 >BODY CALLPROC
    VARZ !
    VARX @ FFFFFFFF AND 83 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 83 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testmovzx1


HEX
CODE TESTMOVZX2 // 8N -> 16 extended
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  FFFFFFFF N  RSI [R] 32BIT MOV,
  FFFFFFFF N  EBX  MOV,
  FFFFFF83 N  RDI [R] 32BIT MOV,
  RDI [R] 8BIT  BX  MOVZX,
  EBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testmovzx2 ( -- )
    ." testing TESTMOVZX2 "
    0 ['] TESTMOVZX2 >BODY CALLPROC
    VARZ !
    VARX @ FFFFFFFF AND FFFF0083 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFF0083 U. 
      ." , got " VARX @ FFFFFFFF AND U.
    THEN
    CR
;

testmovzx2


HEX
CODE TESTMOVZX3 // 16N -> 32 extended
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  FFFFFFFF N  RSI [R] 32BIT MOV,
  FFFFFFFF N  EBX  MOV,
  8321 N  RDI [R] 32BIT MOV,
  RDI [R] 16BIT  EBX  MOVZX,
  EBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testmovzx3 ( -- )
    ." testing TESTMOVZX3 "
    0 ['] TESTMOVZX3 >BODY CALLPROC
    VARZ !
    VARX @ FFFFFFFF AND 8321 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 8321 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testmovzx3


HEX
CODE TESTMOVZX4 // 8 -> 64 zero extended
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  -1 N  RAX  MOV,
  RAX  RSI [R]  MOV,
  8391 N  RDI [R] 32BIT MOV,  // really only need a byte
  RDI [R] 8BIT  RAX  MOVZX,
  RAX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testmovzx4 ( -- )
    ." testing TESTMOVZX4 "
    0 ['] TESTMOVZX4 >BODY CALLPROC
    VARZ !
    VARX @ 91 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 91 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testmovzx4


HEX
CODE TESTMOVZX5 // 16 -> 64 zero extended
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  -1 N  RAX  MOV,
  RAX  RSI [R]  MOV,
  8391 N  RDI [R] 32BIT MOV,  // really only need a byte
  RDI [R] 16BIT  RAX  MOVZX,
  RAX  RSI [R]  MOV,
  RET,
END-CODE

: testmovzx5 ( -- )
    ." testing TESTMOVZX5 "
    0 ['] TESTMOVZX5 >BODY CALLPROC
    VARZ !
    VARX @ 8391 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 8391 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testmovzx5


HEX
CODE TESTMOVSX1 // 8N -> 32 extended
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  0 N  EBX  MOV,
  83 N  RDI [R] 8BIT  MOV,
  RDI [R] 8BIT  EBX  MOVSX,
  EBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testmovsx1 ( -- )
    ." testing TESTMOVSX1 "
    0 ['] TESTMOVSX1 >BODY CALLPROC
    VARZ !
    VARX @ FFFFFFFF AND FFFFFF83 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFF83 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testmovsx1


HEX
CODE TESTMOVSX2 // 8N -> 16 extended
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  RBX RBX XOR,
  83 N  RDI [R] 32BIT MOV,
  RDI [R] 8BIT  BX  MOVSX,
  EBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testmovsx2 ( -- )
    ." testing TESTMOVSX2 "
    0 ['] TESTMOVSX2 >BODY CALLPROC
    VARZ !
    VARX @ FFFFFFFF AND FF83 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FF83 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testmovsx2


HEX
CODE TESTMOVSX3 // 16N -> 32 extended
  RBX PUSH,
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  0 N  EBX  MOV,
  8321 N  RDI [R]  16BIT  MOV,
  RDI [R] 16BIT  EBX  MOVSX,
  EBX  RSI [R]  MOV,
  RBX POP,
  RET,
END-CODE

: testmovsx3 ( -- )
    ." testing TESTMOVSX3 "
    0 ['] TESTMOVSX3 >BODY CALLPROC
    VARZ !
    VARX @ FFFFFFFF AND FFFF8321 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFF8321 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testmovsx3


HEX
CODE TESTMOVSX4 // 8 -> 64 sign extended
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  0 N  RAX  MOV,
  8391 N  RDI [R] 32BIT MOV,  // really only need a byte
  RDI [R] 8BIT  RAX  MOVSX,
  RAX  RSI [R]  MOV,
  RET,
END-CODE

: testmovsx4 ( -- )
    ." testing TESTMOVSX4 "
    0 ['] TESTMOVSX4 >BODY CALLPROC
    VARZ !
    VARX @ FFFFFFFFFFFFFF91 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFFFFFFFFF91 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testmovsx4


HEX
CODE TESTMOVSX5 // 16 -> 64 sign extended
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  -1 N  RAX  MOV,
  8391 N  RDI [R] 32BIT MOV,  // really only need a byte
  RDI [R] 16BIT  RAX  MOVSX,
  RAX  RSI [R]  MOV,
  RET,
END-CODE

: testmovsx5 ( -- )
    ." testing TESTMOVSX5 "
    0 ['] TESTMOVSX5 >BODY CALLPROC
    VARZ !
    VARX @ FFFFFFFFFFFF8391 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFFFFFFF8391 U. 
      ." , got " VARX @ U.
    THEN
    CR
;

testmovsx5


HEX
CODE TESTMOVSXD // 32 -> 64 sign extended
  VARY N  RDI  MOV,
  VARX N  RSI  MOV,
  -1 N  RAX  MOV,
  83913245 N  RDI [R] 32BIT MOV,
  RDI [R]  RAX  MOVSXD,
  RAX  RSI [R]  MOV,
  RET,
END-CODE

: testmovsxd ( -- )
    ." testing TESTMOVSXD "
    0 ['] TESTMOVSXD >BODY CALLPROC
    VARZ !
    VARX @ FFFFFFFF83913245 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFFF83913245 U.
      ." , got " VARX @ U.
    THEN
    CR
;

testmovsxd



HEX
CODE TESTSFENCE  // basically a crash test
  SFENCE,
  RET,
END-CODE

: testsfence ( -- )
    ." testing SFENCE "
    0 ['] TESTSFENCE >BODY CALLPROC
    VARZ !
    ." SUCCESS!"
    CR
;

testsfence


: CODE-HERE ( -- offsetincurrentcompilebuffer )
    PCURRENTCOMPILEBUFFER @ DUP 
    LENGTHBUF SWAP O>P
;


HEX
CODE INCVARY
  VARY N  RDI  MOV,
  RDI [R]  32BIT  INC,
  RET,
END-CODE

CODE TESTCALLEIP+N
  ' INCVARY >BODY // ." target = " DUP U.  
  CODE-HERE 5 +   // ." source = " DUP U. // instruction size is 5 bytes
  -  EIP+N CALL, 
  RET,
END-CODE

: testcalleip+n ( -- )
    ." testing TESTCALLEIP+N "
    12345687 VARY !
    0 ['] TESTCALLEIP+N >BODY CALLPROC
    VARZ !
    VARY @ 12345688 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected hi = " 12345688 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testcalleip+n


CODE TESTCALLR
  ' INCVARY >BODY N  RAX MOV,
  RAX CALL, 
  RET,
END-CODE

: testcallr ( -- )
    ." testing TESTCALLR "
    12345685 VARY !
    0 ['] TESTCALLR >BODY CALLPROC
    VARZ !
    VARY @ 12345686 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected hi = " 12345686 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testcallr


CODE TESTCALLM
  VARX N  RSI  MOV,
  ' INCVARY >BODY N  RDI  MOV, 
  RDI  RSI [R]  MOV,
  RSI [R]  CALL, 
  RET,
END-CODE


: testcallm ( -- )
    ." testing TESTCALLM "
    12345683 VARY !
    0 ['] TESTCALLM >BODY CALLPROC
    VARZ !
    VARY @ 12345684 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected hi = " 12345684 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testcallm


HEX
CODE TESTLOOPWHILE
  7 N  ECX  MOV,
  5 N  RAX  MOV,
  BEGIN,
    RAX DEC,
  LOOPNOTDONEWHILE,
  REPEAT,  

  RET,
END-CODE

: testloopwhile ( -- )
    ." testing TESTLOOPWHILE "
    0 ['] TESTLOOPWHILE >BODY CALLPROC
    VARZ !
    VARZ @ FFFFFFFF AND FFFFFFFE =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFFE U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testloopwhile


HEX
CODE TESTNZORLOOPWHILE
  7 N  ECX  MOV,
  5 N  RAX  MOV,
  BEGIN,
    RAX DEC,
  NZORLOOPNOTDONEWHILE,
  REPEAT,  

  RET,
END-CODE

: testnzorloopwhile ( -- )
    ." testing TESTNZORLOOPWHILE "
    0 ['] TESTNZORLOOPWHILE >BODY CALLPROC
    VARZ !
    VARZ @ 0 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 0 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testnzorloopwhile


HEX
CODE TESTZSORLOOPWHILE
  7 N  ECX  MOV,
  1 N  RAX  MOV,
  BEGIN,
    RAX DEC,
  ZSORLOOPNOTDONEWHILE,
  REPEAT,  

  RET,
END-CODE

: testzsorloopwhile ( -- )
    ." testing TESTZSORLOOPWHILE "
    0 ['] TESTZSORLOOPWHILE >BODY CALLPROC
    VARZ !
    VARZ @ FFFFFFFF AND FFFFFFFF =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFFF U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testzsorloopwhile



HEX
CODE incrax2,  RAX INC,  RET,  END-CODE

CODE TESTCALLCODE  1234 N  RAX  MOV,  incrax2,  RET,  END-CODE

: testcallcode ( -- )
    ." testing TESTCALLCODE "
    0 ['] TESTCALLCODE >BODY CALLPROC
    VARZ !
    VARZ @ 1235 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1235 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testcallcode


CODE GETALIGNMENT,
  RSP RAX MOV,
  RET,
END-CODE


CODE GETALIGN0
  COMPILE-ENTER-FRAME
  
  0 COMPILE-ALIGN-RET-FOR-N
  GETALIGNMENT,
  
  COMPILE-EXIT-FRAME
END-CODE

HEX
: testalign0 ( -- )
    ." testing ALIGN 0 "
    0 ['] GETALIGN0 >BODY CALLPROC
    0F AND
    VARZ !
    VARZ @ 8 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected 8 " 
      ." , got " VARZ @ U.
    THEN
    CR
;

testalign0


CODE GETALIGN1
  COMPILE-ENTER-FRAME
  
  1 COMPILE-ALIGN-RET-FOR-N  

  GETALIGNMENT,
  
  COMPILE-EXIT-FRAME
END-CODE

HEX
: testalign1 ( -- )
    ." testing ALIGN 1 "
    0 ['] GETALIGN1 >BODY CALLPROC
    0F AND
    VARZ !
    VARZ @ 8 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected 8 " 
      ." , got " VARZ @ U.
    THEN
    CR
;

testalign1


CODE GETALIGN2
  COMPILE-ENTER-FRAME
  
  2 COMPILE-ALIGN-RET-FOR-N
  GETALIGNMENT,
  
  COMPILE-EXIT-FRAME
END-CODE

HEX
: testalign2 ( -- )
    ." testing ALIGN 2 "
    0 ['] GETALIGN2 >BODY CALLPROC
    0F AND
    VARZ !
    VARZ @ 8 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected 8 " 
      ." , got " VARZ @ U.
    THEN
    CR
;

testalign2


CODE GETALIGN3
  COMPILE-ENTER-FRAME
  
  3 COMPILE-ALIGN-RET-FOR-N
  GETALIGNMENT,
  
  COMPILE-EXIT-FRAME
END-CODE

HEX
: testalign3 ( -- )
    ." testing ALIGN 3 "
    0 ['] GETALIGN3 >BODY CALLPROC
    0F AND
    VARZ !
    VARZ @ 8 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected 8 " 
      ." , got " VARZ @ U.
    THEN
    CR
;

testalign3


CODE GETALIGN4
  COMPILE-ENTER-FRAME
  
  4 COMPILE-ALIGN-RET-FOR-N
  GETALIGNMENT,
  
  COMPILE-EXIT-FRAME
END-CODE

HEX
: testalign4 ( -- )
    ." testing ALIGN 4 "
    0 ['] GETALIGN4 >BODY CALLPROC
    0F AND
    VARZ !
    VARZ @ 8 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected 8 " 
      ." , got " VARZ @ U.
    THEN
    CR
;

testalign4


CODE GETALIGN5
  COMPILE-ENTER-FRAME
  
  5 COMPILE-ALIGN-RET-FOR-N
  GETALIGNMENT,
  
  COMPILE-EXIT-FRAME
END-CODE

HEX
: testalign5 ( -- )
    ." testing ALIGN 5 "
    0 ['] GETALIGN3 >BODY CALLPROC
    0F AND
    VARZ !
    VARZ @ 8 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected 8 " 
      ." , got " VARZ @ U.
    THEN
    CR
;

testalign5


CODE GETALIGN6
  COMPILE-ENTER-FRAME
  
  6 COMPILE-ALIGN-RET-FOR-N
  GETALIGNMENT,
  
  COMPILE-EXIT-FRAME
END-CODE

HEX
: testalign6 ( -- )
    ." testing ALIGN 6 "
    0 ['] GETALIGN3 >BODY CALLPROC
    0F AND
    VARZ !
    VARZ @ 8 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected 8 " 
      ." , got " VARZ @ U.
    THEN
    CR
;

testalign6


CODE GETALIGN7
  COMPILE-ENTER-FRAME
  
  7 COMPILE-ALIGN-RET-FOR-N
  0 N PUSH,
  GETALIGNMENT,
  
  COMPILE-EXIT-FRAME
END-CODE

HEX
: testalign7 ( -- )
    ." testing ALIGN 7 "
    0 ['] GETALIGN7 >BODY CALLPROC
    0F AND
    VARZ !
    VARZ @ 8 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected 8 " 
      ." , got " VARZ @ U.
    THEN
    CR
;

testalign7


CODE GETALIGN8
  COMPILE-ENTER-FRAME
  
  8 COMPILE-ALIGN-RET-FOR-N
  0 N PUSH,
  0 N PUSH,
  GETALIGNMENT,
  
  COMPILE-EXIT-FRAME
END-CODE

HEX
: testalign8 ( -- )
    ." testing ALIGN 8 "
    0 ['] GETALIGN8 >BODY CALLPROC
    0F AND
    VARZ !
    VARZ @ 8 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected 8 " 
      ." , got " VARZ @ U.
    THEN
    CR
;

testalign8


CODE GETALIGN9
  COMPILE-ENTER-FRAME
  
  9 COMPILE-ALIGN-RET-FOR-N
  0 N PUSH,
  0 N PUSH,
  0 N PUSH,
  GETALIGNMENT,
  
  COMPILE-EXIT-FRAME
END-CODE

HEX
: testalign9 ( -- )
    ." testing ALIGN 9 "
    0 ['] GETALIGN3 >BODY CALLPROC
    0F AND
    VARZ !
    VARZ @ 8 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected 8 " 
      ." , got " VARZ @ U.
    THEN
    CR
;

testalign9


CODE GETALIGN10
  COMPILE-ENTER-FRAME
  
  10 COMPILE-ALIGN-RET-FOR-N
  0 N PUSH,
  0 N PUSH,
  0 N PUSH,
  0 N PUSH,
  GETALIGNMENT,
  
  COMPILE-EXIT-FRAME
END-CODE

HEX
: testalign10 ( -- )
    ." testing ALIGN 10 "
    0 ['] GETALIGN10 >BODY CALLPROC
    0F AND
    VARZ !
    VARZ @ 8 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected 8 " 
      ." , got " VARZ @ U.
    THEN
    CR
;

testalign10


( +00 saved rbp        )
( -08 saved flags      )
( -10 pBHarrayhead     )
( -18 old error count  )
( -20 end of locals    )

HEX
CODE USELOCALS1
  COMPILE-ENTER-FRAME
  
  8 N  RBP -20 [R+N]  64BIT SUB,  // allocating 1 local variable 
  12349876 N  RBP -28 [R+N]  64BIT  MOV, 
  0 COMPILE-ALIGN-RET-FOR-N
  GETALIGNMENT,

  0F N  RAX  AND,

  NZ IF,
    RBP -28 [R+N]  RAX  MOV,
  ELSE,
    0 N  RAX  MOV,
  THEN,
  
  COMPILE-EXIT-FRAME
END-CODE

HEX
: testuselocals1 ( -- )
    ." testing using 1 local variable "
    0 ['] USELOCALS1 >BODY CALLPROC
    VARZ !
    VARZ @ 12349876 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 12349876 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testuselocals1


HEX
CODE USELOCALS2
  COMPILE-ENTER-FRAME
  
  10 N  RBP -20 [R+N]  64BIT  SUB,  // allocating 2 local variables 
  12349876 N  RBP -28 [R+N]  64BIT  MOV, 
  0 COMPILE-ALIGN-RET-FOR-N
  GETALIGNMENT,

  0F N  RAX  AND,

  NZ IF,
    RBP -28 [R+N]  RAX  MOV,
  ELSE,
    0 N  RAX  MOV,
  THEN,
  
  COMPILE-EXIT-FRAME
END-CODE

HEX
: testuselocals2 ( -- )
    ." testing using 2 local variables "
    0 ['] USELOCALS2 >BODY CALLPROC
    VARZ !
    VARZ @ 12349876 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 12349876 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testuselocals2


HEX
CODE USELOCALS3
  COMPILE-ENTER-FRAME
  
  18 N  RBP -20 [R+N]  64BIT  SUB,  // allocating 3 local variables 
  12349876 N  RBP -38 [R+N]  MOV, 

  0 COMPILE-ALIGN-RET-FOR-N
  GETALIGNMENT,

  0F N  RAX  AND,

  NZ IF,
    RBP -38 [R+N]  RAX  MOV,
  ELSE,
    0 N  RAX  MOV,
  THEN,
  
  COMPILE-EXIT-FRAME
END-CODE

HEX
: testuselocals3 ( -- )
    ." testing using 3 local variables "
    0 ['] USELOCALS3 >BODY CALLPROC
    VARZ !
    VARZ @ 12349876 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 12349876 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testuselocals3


HEX
CODE TESTXLATB
  RBX PUSH,
  VARX N  RBX  MOV,
  RDI RAX MOV,
  XLATB,
  RBX POP,
  RET,
END-CODE

: testxlatb ( -- )
    ." testing XLATB "
    445566778899AABB VARX !
    FFFEFDFCFBFAF902 1 ['] TESTXLATB >BODY CALLPROC
    VARZ !
    VARZ @ FFFEFDFCFBFAF999 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFEFDFCFBFAF999 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testxlatb


HEX
CODE TESTCBW
  RDI RAX -> MOV,
  CBW,
  RET,
END-CODE

: testcbw ( -- )
    ." testing CBW, "
    80 1 ['] TESTCBW >BODY CALLPROC
    VARZ !
    VARZ @ FF80 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FF80 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testcbw


HEX
CODE TESTCWDE
  RDI RAX -> MOV,
  CWDE,
  RET,
END-CODE

: testcwde ( -- )
    ." testing CWDE, "
    8000 1 ['] TESTCWDE >BODY CALLPROC
    VARZ !
    VARZ @ FFFF8000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFF8000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testcwde


HEX
CODE TESTCDQE
  RDI RAX -> MOV,
  CDQE,
  RET,
END-CODE

: testcdqe ( -- )
    ." testing CDQE "
    80000000 1 ['] TESTCDQE >BODY CALLPROC
    VARZ !
    VARZ @ FFFFFFFF80000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFFF80000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testcdqe


HEX
CODE TESTCQO
  RDI RAX -> MOV,
  CQO,
  RET,
END-CODE

: testcqo ( -- )
    ." testing CQO, "
    8000000000000000 1 ['] TESTCQO >BODY CALLPROCRETUINT128
    VARZ ! VARY !
    VARZ @ FFFFFFFFFFFFFFFF = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFFFFFFFFFFF U. 
      ." , got " VARZ @ U.
    THEN
    VARY @ 8000000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 8000000000000000 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testcqo


HEX
CODE TESTCWD
  RDX RDX XOR,
  RDI RAX -> MOV,
  CWD,
  RET,
END-CODE

: testcwd ( -- )
    ." testing CWD, "
    8000 1 ['] TESTCWD >BODY CALLPROCRETUINT128
    VARZ ! VARY !
    VARZ @ 000000000000FFFF = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 000000000000FFFF U. 
      ." , got " VARZ @ U.
    THEN
    VARY @ 8000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 8000 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testcwd


HEX
CODE TESTCDQ
  RDX RDX XOR,
  RDI RAX -> MOV,
  CDQ,
  RET,
END-CODE

: testcdq ( -- )
    ." testing CDQ, "
    80000000 1 ['] TESTCDQ >BODY CALLPROCRETUINT128
    VARZ ! VARY !
    VARZ @ 00000000FFFFFFFF = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 00000000FFFFFFFF U. 
      ." , got " VARZ @ U.
    THEN
    VARY @ 0000000080000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 0000000080000000 U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testcdq


HEX
CODE TESTCLAC
  PUSHFD,
  PUSHFD,
  RAX POP,
  40000 N RAX OR,
  RAX PUSH,
  POPFD,
  CLAC,
  PUSHFD,
  RAX POP,
  40000 N RAX AND,
  POPFD,
  RET,
END-CODE

: testclac ( -- )
    ." testing CLAC, "
    0 ['] TESTCLAC >BODY CALLPROC
    VARZ !
    VARZ @ 0 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 0 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

// testclac

HEX
CODE TESTFILD
  1 N 64BIT PUSH,
  RSP [R]  64BIT  FILD,
  RSP [R]  64BIT  FSTP,
  RAX POP,
  RET,  // mantissa should be 0 for 1.0, exponent should be 2^0...
END-CODE
  
: testfild ( -- )
    ." testing FILD, 64 bit "
    0 ['] TESTFILD >BODY CALLPROC
    ( DROP
    FS> ) VARZ !
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfild


HEX
CODE TESTFILD32
  FFFFFFFF00000001 N RAX MOV,
  RAX PUSH,
  RSP [R]  32BIT  FILD, // assumes little endian
  RSP [R]  64BIT  FSTP,
  RAX POP,
  RET,  // mantissa should be 0 for 1.0, exponent should be 2^0...
END-CODE
  
: testfild32 ( -- )
    ." testing FILD, 32 bit "
    0 ['] TESTFILD32 >BODY CALLPROC
    ( DROP
    FS> ) VARZ !
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfild32


HEX
CODE TESTFILD16
  FFFFFFFFFFFF0001 N RAX MOV,
  RAX PUSH,
  RSP [R]  16BIT  FILD, // assumes little endian
  RSP [R]  64BIT  FSTP,
  RAX POP,
  RET,  // mantissa should be 0 for 1.0, exponent should be 2^0...
END-CODE
  
: testfild16 ( -- )
    ." testing FILD, 16 bit "
    0 ['] TESTFILD16 >BODY CALLPROC
    ( DROP
    FS> ) VARZ !
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfild16


HEX
CODE TESTFSTP64
  0000000000000001 N RAX MOV,
  RAX PUSH,
  RSP [R]  64BIT  FILD, // assumes little endian
  RSP [R]  64BIT  FSTP,
  RAX POP,
  RET,  // mantissa should be 0 for 1.0, exponent should be 2^0...
END-CODE
  
: testfstp64 ( -- )
    ." testing FSTP, 64 bit "
    0 ['] TESTFSTP64 >BODY CALLPROC
    VARZ !
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfstp64


HEX
CODE TESTFSTP32
  0000000000000001 N RAX MOV,
  RAX PUSH,
  RSP [R]  64BIT  FILD, // assumes little endian
  RAX DEC, RAX DEC,
  RAX  RSP [R]  MOV,
  RSP [R]  64BIT  FSTP,
  RAX POP,
  RET,  // mantissa should be 0 for 1.0, exponent should be 2^0...
END-CODE
  
: testfstp32 ( -- )
    ." testing FSTP, 32 bit "
    0 ['] TESTFSTP32 >BODY CALLPROC
    VARZ !
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfstp32


HEX
CODE TESTFSTP80
  RAX RAX XOR,
  RAX PUSH,
  RAX INC,
  RAX PUSH,
  RSP [R]  64BIT  FILD, // assumes little endian
  RAX DEC, RAX DEC,
  RAX  RSP [R]  MOV,
  RAX  RSP 8 [R+N]  MOV,
  RSP [R]  80BIT  FSTP,
  RAX POP,  RDX POP,
  RET,  // mantissa should be 0 for 1.0, exponent should be 2^0...
END-CODE
  
: testfstp80 ( -- )
    ." testing FSTP, 80 bit "
    0 ['] TESTFSTP80 >BODY CALLPROCRETUINT128
    VARY !  VARZ !
    VARZ @ 8000000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 8000000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    VARY @ FFFFFFFFFFFF3FFF = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFFFFFFF3FFF U. 
      ." , got " VARY @ U.
    THEN
    CR
;

testfstp80

HEX
OHERE CONSTANT O1 1 CODE-U64,
OHERE CONSTANT O1b 1 CODE-U64,
OHERE CONSTANT O2 2 CODE-U64,
OHERE CONSTANT O3 3 CODE-U64,
OHERE CONSTANT O4 4 CODE-U64,
OHERE CONSTANT O5 5 CODE-U64,
OHERE CONSTANT O6 6 CODE-U64,
OHERE CONSTANT O7 7 CODE-U64,
OHERE CONSTANT O8 8 CODE-U64,
OHERE CONSTANT O9 9 CODE-U64,
OHERE CONSTANT O10 0A CODE-U64,
OHERE CONSTANT O1.5 3FF8000000000000 CODE-U64,
OHERE CONSTANT O4.0 4010000000000000 CODE-U64,
OHERE CONSTANT O-2 -2 CODE-U64,
OHERE CONSTANT ORESULT1 0 CODE-U64,
OHERE CONSTANT ORESULT2 0 CODE-U64,
OHERE CONSTANT ORESULT3 0 CODE-U64,
OHERE CONSTANT OM80 HEX 0 CODE-U64, 0 CODE-U16,
OHERE CONSTANT OM28B HEX 20 CODE-ALLOT
OHERE CONSTANT OM108B HEX 80 CODE-ALLOT
OHERE CONSTANT O1.0 3FF0000000000000 CODE-U64,
OHERE CONSTANT O2.0 4000000000000000 CODE-U64,
OHERE CONSTANT O3.0 4008000000000000 CODE-U64,
OHERE CONSTANT O5.0 4014000000000000 CODE-U64,
OHERE CONSTANT O6.0 4018000000000000 CODE-U64,
OHERE CONSTANT O8.0 4020000000000000 CODE-U64,

HEX
C000000000000000 CONSTANT FPD-2.0

3FF0000000000000 CONSTANT FPD1.0
3FF8000000000000 CONSTANT FPD1.5
4000000000000000 CONSTANT FPD2.0
4008000000000000 CONSTANT FPD3.0
4010000000000000 CONSTANT FPD4.0
4014000000000000 CONSTANT FPD5.0
4018000000000000 CONSTANT FPD6.0
4020000000000000 CONSTANT FPD8.0
4022000000000000 CONSTANT FPD9.0

C0000000 CONSTANT FPS-2.0

3F800000 CONSTANT FPS1.0
3FC00000 CONSTANT FPS1.5
40000000 CONSTANT FPS2.0
40400000 CONSTANT FPS3.0
40800000 CONSTANT FPS4.0
40A00000 CONSTANT FPS5.0
40C00000 CONSTANT FPS6.0
41000000 CONSTANT FPS8.0
41100000 CONSTANT FPS9.0



// align to 16 byte boundary
HEX
10  PCURRENTCOMPILEBUFFER @ GETSBUFFER + 10 MOD -  10 MOD   CODE-ALLOT
OHERE CONSTANT OU128A 10 CODE-ALLOT
OHERE CONSTANT OU128B 20 CODE-ALLOT // added room so I can do unaligned tests
OHERE CONSTANT OU128C 20 CODE-ALLOT // added room so I can do unaligned tests
OHERE CONSTANT OU128D 10 CODE-ALLOT



HEX
CODE TESTFADD->ST0
  O1 [O]  64BIT  FILD, // assumes little endian
  O2 [O]  64BIT  FILD,
  ST1  FADD->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  // mantissa should be 0 for 1.0, exponent should be 2^0...
END-CODE
  
: testfadd->st0 ( -- )
    ." testing FADD->ST0, "
    0 ['] TESTFADD->ST0 >BODY CALLPROC
    VARZ !  
    VARZ @ 4008000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    ORESULT2 CCO@ 3FF0000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. // 6.0
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfadd->st0


HEX
CODE TESTFIADD->ST016
  O1 [O]  64BIT  FILD, // assumes little endian
  O2 [O]  16BIT  FIADD->ST0,  // assumes O2 little endian 
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  // mantissa should be 0 for 1.0, exponent should be 2^0...
END-CODE
  
: testfiadd->st016 ( -- )
    ." testing FIADD->ST0, 16 BIT "
    FF O2 2 + CCOC!
    0 ['] TESTFIADD->ST016 >BODY CALLPROC
    VARZ !  
    0 O2 2 + CCOC!
    VARZ @ 4008000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfiadd->st016


HEX
CODE TESTFIADD->ST032
  O1 [O]  64BIT  FILD, // assumes little endian
  O2 [O]  32BIT  FIADD->ST0,  // assumes O2 little endian 
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  // mantissa should be 0 for 1.0, exponent should be 2^0...
END-CODE
  
: testfiadd->st032 ( -- )
    ." testing FIADD->ST0, 32 BIT "
    FF O2 4 + CCOC!
    0 ['] TESTFIADD->ST032 >BODY CALLPROC
    VARZ !  
    0 O2 4 + CCOC!
    VARZ @ 4008000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfiadd->st032


HEX
CODE TESTFADDST0->
  O1 [O]  64BIT  FILD, // assumes little endian
  O2 [O]  64BIT  FILD,
  ST1  FADDST0->,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  RAX  MOV,
  RET,  // mantissa should be 0 for 1.0, exponent should be 2^0...
END-CODE
  
: testfaddst0-> ( -- )
    ." testing FADDST0->, "
    0 ['] TESTFADDST0-> >BODY CALLPROC
    VARZ !  
    VARZ @ 4008000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    ORESULT1 CCO@ 4000000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfaddst0->


HEX
CODE TESTFADDPST0->
  O1 [O]  64BIT  FILD, // assumes little endian
  O4 [O]  64BIT  FILD,
  O2 [O]  64BIT  FILD,
  ST2  FADDPST0->,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfaddpst0-> ( -- )
    ." testing FADDPST0->, "
    0 ['] TESTFADDPST0-> >BODY CALLPROC
    VARZ !  
    VARZ @ 4008000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    ORESULT2 CCO@ 4010000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT2 CCO@ @ U.
    THEN
    CR
;

testfaddpst0->


HEX
CODE TESTFSUB->ST0
  O2 [O]  64BIT  FILD, // assumes little endian
  O3 [O]  64BIT  FILD,
  ST1  FSUB->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfsub->st0 ( -- )
    ." testing FSUB->ST0, "
    0 ['] TESTFSUB->ST0 >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    ORESULT2 CCO@ 4000000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U.
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfsub->st0


HEX
CODE TESTFSUBR->ST0
  O3 [O]  64BIT  FILD, 
  O2 [O]  64BIT  FILD,
  ST1  FSUBR->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfsubr->st0 ( -- )
    ." testing FSUBR->ST0, "
    0 ['] TESTFSUBR->ST0 >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    ORESULT2 CCO@ 4008000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U.
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfsubr->st0


HEX
CODE TESTFISUB->ST016
  O3 [O]  64BIT  FILD,
  O2 [O]  16BIT  FISUB->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfisub->st016 ( -- )
    ." testing FISUB->ST0, 16BIT "
    FF O2 2 + CCOC!
    0 ['] TESTFISUB->ST016 >BODY CALLPROC
    VARZ !
    0 O2 2 + CCOC!  
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfisub->st016


HEX
CODE TESTFISUBR->ST016
  O2 [O]  64BIT  FILD,
  O3 [O]  16BIT  FISUBR->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfisubr->st016 ( -- )
    ." testing FISUBR->ST0, 16BIT "
    FF O3 2 + CCOC!
    0 ['] TESTFISUBR->ST016 >BODY CALLPROC
    VARZ !
    0 O3 2 + CCOC!  
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfisubr->st016


HEX
CODE TESTFISUB->ST032
  O3 [O]  64BIT  FILD,
  O2 [O]  32BIT  FISUB->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfisub->st032 ( -- )
    ." testing FISUB->ST0, 32BIT "
    FF O2 4 + CCOC!
    0 ['] TESTFISUB->ST032 >BODY CALLPROC
    VARZ !
    0 O2 4 + CCOC!  
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfisub->st032


HEX
CODE TESTFISUBR->ST032
  O2 [O]  64BIT  FILD,
  O3 [O]  32BIT  FISUBR->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfisubr->st032 ( -- )
    ." testing FISUBR->ST0, 32BIT "
    FF O3 4 + CCOC!
    0 ['] TESTFISUBR->ST032 >BODY CALLPROC
    VARZ !
    0 O3 4 + CCOC!  
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfisubr->st032


HEX
CODE TESTFSUBST0->
  O3 [O]  64BIT  FILD, // assumes little endian
  O2 [O]  64BIT  FILD,
  ST1  FSUBST0->,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfsubst0-> ( -- )
    ." testing FSUBST0->, "
    0 ['] TESTFSUBST0-> >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    ORESULT1 CCO@ 4000000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfsubst0->


HEX
CODE TESTFSUBRST0->
  O2 [O]  64BIT  FILD, // assumes little endian
  O3 [O]  64BIT  FILD,
  ST1  FSUBRST0->,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfsubrst0-> ( -- )
    ." testing FSUBRST0->, "
    0 ['] TESTFSUBRST0-> >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    ORESULT1 CCO@ 4008000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfsubrst0->


HEX
CODE TESTFSUBPST0->
  O3 [O]  64BIT  FILD, // assumes little endian
  O4 [O]  64BIT  FILD,
  O2 [O]  64BIT  FILD,
  ST2  FSUBPST0->,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfsubpst0-> ( -- )
    ." testing FSUBPST0->, "
    0 ['] TESTFSUBPST0-> >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    ORESULT2 CCO@ 4010000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT2 CCO@ @ U.
    THEN
    CR
;

testfsubpst0->


HEX
CODE TESTFSUBRPST0->
  O2 [O]  64BIT  FILD, // assumes little endian
  O4 [O]  64BIT  FILD,
  O3 [O]  64BIT  FILD,
  ST2  FSUBRPST0->,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfsubrpst0-> ( -- )
    ." testing FSUBRPST0->, "
    0 ['] TESTFSUBRPST0-> >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    ORESULT2 CCO@ 4010000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT2 CCO@ @ U.
    THEN
    CR
;

testfsubrpst0->


HEX
CODE TESTFMUL->ST0
  O2 [O]  64BIT  FILD, // assumes little endian
  O3 [O]  64BIT  FILD,
  ST1  FMUL->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfmul->st0 ( -- )
    ." testing FMUL->ST0, "
    0 ['] TESTFMUL->ST0 >BODY CALLPROC
    VARZ !  
    VARZ @ 4018000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4018000000000000 U.  // 6.0
      ." , got " VARZ @ U.
    THEN
    ORESULT2 CCO@ 4000000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. // 6.0
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfmul->st0


HEX
CODE TESTFIMUL->ST016
  O3 [O]  64BIT  FILD,
  O2 [O]  16BIT  FIMUL->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfimul->st016 ( -- )
    ." testing FIMUL->ST0, 16 bit "
    FF O2 2 + CCOC!
    0 ['] TESTFIMUL->ST016 >BODY CALLPROC
    VARZ ! 
    0 O2 2 + CCOC! 
    VARZ @ 4018000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4018000000000000 U.  // 6.0
      ." , got " VARZ @ U.
    THEN
    CR
;

testfimul->st016


HEX
CODE TESTFIMUL->ST032
  O3 [O]  64BIT  FILD,
  O2 [O]  32BIT  FIMUL->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfimul->st032 ( -- )
    ." testing FIMUL->ST0, 32 bit "
    FF O2 4 + CCOC!
    0 ['] TESTFIMUL->ST032 >BODY CALLPROC
    VARZ ! 
    0 O2 4 + CCOC! 
    VARZ @ 4018000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4018000000000000 U.  // 6.0
      ." , got " VARZ @ U.
    THEN
    CR
;

testfimul->st032


HEX
CODE TESTFMULST0->
  O3 [O]  64BIT  FILD, // assumes little endian
  O2 [O]  64BIT  FILD,
  ST1  FMULST0->,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfmulst0-> ( -- )
    ." testing FMULST0->, "
    0 ['] TESTFMULST0-> >BODY CALLPROC
    VARZ !  
    VARZ @ 4018000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4018000000000000 U. // 6.0
      ." , got " VARZ @ U.
    THEN
    ORESULT1 CCO@ 4000000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfmulst0->


HEX
CODE TESTFMULPST0->
  O3 [O]  64BIT  FILD, // assumes little endian
  O4 [O]  64BIT  FILD,
  O2 [O]  64BIT  FILD,
  ST2  FMULPST0->,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfmulpst0-> ( -- )
    ." testing FMULPST0->, "
    0 ['] TESTFMULPST0-> >BODY CALLPROC
    VARZ !  
    VARZ @ 4018000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4018000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    ORESULT2 CCO@ 4010000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT2 CCO@ @ U.
    THEN
    CR
;

testfmulpst0->


HEX
CODE TESTFDIV->ST0
  O2 [O]  64BIT  FILD, // assumes little endian
  O3 [O]  64BIT  FILD,
  ST1  FDIV->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfdiv->st0 ( -- )
    ." testing FDIV->ST0, "
    0 ['] TESTFDIV->ST0 >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF8000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF8000000000000 U.  // 6.0
      ." , got " VARZ @ U.
    THEN
    ORESULT2 CCO@ 4000000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. // 6.0
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfdiv->st0


HEX
CODE TESTFDIVR->ST0
  O3 [O]  64BIT  FILD, 
  O2 [O]  64BIT  FILD,
  ST1  FDIVR->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfdivr->st0 ( -- )
    ." testing FDIVR->ST0, "
    0 ['] TESTFDIVR->ST0 >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF8000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF8000000000000 U.  // 6.0
      ." , got " VARZ @ U.
    THEN
    ORESULT2 CCO@ 4008000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. // 6.0
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfdivr->st0


HEX
CODE TESTFIDIV->ST016
  O3 [O]  64BIT  FILD, 
  O2 [O]  16BIT  FIDIV->ST0,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfidiv->st016 ( -- )
    ." testing FIDIV->ST0, 16BIT "
    FF O2 2 + CCOC!
    0 ['] TESTFIDIV->ST016 >BODY CALLPROC
    VARZ ! 
    0 O2 2 + CCOC!
    VARZ @ 3FF8000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF8000000000000 U.  // 6.0
      ." , got " VARZ @ U.
    THEN
    CR
;

testfidiv->st016


HEX
CODE TESTFIDIV->ST032
  O3 [O]  64BIT  FILD, 
  O2 [O]  32BIT  FIDIV->ST0,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfidiv->st032 ( -- )
    ." testing FIDIV->ST0, 32BIT "
    FF O2 4 + CCOC!
    0 ['] TESTFIDIV->ST032 >BODY CALLPROC
    VARZ ! 
    0 O2 4 + CCOC!
    VARZ @ 3FF8000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF8000000000000 U.  // 6.0
      ." , got " VARZ @ U.
    THEN
    CR
;

testfidiv->st032


HEX
CODE TESTFIDIVR->ST016
  O2 [O]  64BIT  FILD, 
  O3 [O]  16BIT  FIDIVR->ST0,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfidivr->st016 ( -- )
    ." testing FIDIVR->ST0, 16BIT "
    FF O3 2 + CCOC!
    0 ['] TESTFIDIVR->ST016 >BODY CALLPROC
    VARZ ! 
    0 O3 2 + CCOC!
    VARZ @ 3FF8000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF8000000000000 U.  // 6.0
      ." , got " VARZ @ U.
    THEN
    CR
;

testfidivr->st016


HEX
CODE TESTFIDIVR->ST032
  O2 [O]  64BIT  FILD, 
  O3 [O]  32BIT  FIDIVR->ST0,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfidivr->st032 ( -- )
    ." testing FIDIVR->ST0, 32BIT "
    FF O3 4 + CCOC!
    0 ['] TESTFIDIVR->ST032 >BODY CALLPROC
    VARZ ! 
    0 O3 4 + CCOC!
    VARZ @ 3FF8000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF8000000000000 U.  // 6.0
      ." , got " VARZ @ U.
    THEN
    CR
;

testfidivr->st032



HEX
CODE TESTFDIVST0->
  O3 [O]  64BIT  FILD, // assumes little endian
  O1 [O]  64BIT  FILD,
  O2 [O]  64BIT  FILD,
  ST2  FDIVST0->,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT3 [O]  64BIT  FSTP,
  ORESULT3 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfdivst0-> ( -- )
    ." testing FDIVST0->, "
    0 ['] TESTFDIVST0-> >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF8000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF8000000000000 U. // 6.0
      ." , got " VARZ @ U.
    THEN

    ORESULT1 CCO@ 4000000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfdivst0->


HEX
CODE TESTFDIVRST0->
  O2 [O]  64BIT  FILD, 
  O1 [O]  64BIT  FILD,
  O3 [O]  64BIT  FILD,
  ST2  FDIVRST0->,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT3 [O]  64BIT  FSTP,
  ORESULT3 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfdivrst0-> ( -- )
    ." testing FDIVRST0->, "
    0 ['] TESTFDIVRST0-> >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF8000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF8000000000000 U. // 6.0
      ." , got " VARZ @ U.
    THEN

    ORESULT1 CCO@ 4008000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfdivrst0->



HEX
CODE TESTFDIVPST0->
  O3 [O]  64BIT  FILD, // assumes little endian
  O4 [O]  64BIT  FILD,
  O2 [O]  64BIT  FILD,
  ST2  FDIVPST0->,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfdivpst0-> ( -- )
    ." testing FDIVPST0->, "
    0 ['] TESTFDIVPST0-> >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF8000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF8000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    ORESULT2 CCO@ 4010000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT2 CCO@ @ U.
    THEN
    CR
;

testfdivpst0->


HEX
CODE TESTFDIVRPST0->
  O2 [O]  64BIT  FILD, // assumes little endian
  O4 [O]  64BIT  FILD,
  O3 [O]  64BIT  FILD,
  ST2  FDIVRPST0->,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfdivrpst0-> ( -- )
    ." testing FDIVRPST0->, "
    0 ['] TESTFDIVRPST0-> >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF8000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF8000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    ORESULT2 CCO@ 4010000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT2 CCO@ @ U.
    THEN
    CR
;

testfdivrpst0->


HEX
CODE TESTFCOS(0)
  FLDZ,
  FCOS,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfcos(0) ( -- )
    ." testing FCOS, using 0 "
    0 ['] TESTFCOS(0) >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfcos(0)


HEX
CODE TESTFCOS(PI)
  FLDPI,
  FCOS,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfcos(pi) ( -- )
    ." testing FCOS, using pi "
    0 ['] TESTFCOS(PI) >BODY CALLPROC
    VARZ !  
    VARZ @ BFF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " BFF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfcos(pi)


HEX
CODE TESTFSIN(0)
  FLDZ,
  ORESULT2 [O]  64BIT  FST,
  FSIN,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfsin(0) ( -- )
    ." testing FSIN, using 0 "
    0 ['] TESTFSIN(0) >BODY CALLPROC
    VARZ !  
    VARZ @ ORESULT2 CCO@ = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " ORESULT2 CCO@ U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfsin(0)


HEX
CODE TESTFSIN(PI)
  FLDZ,
  ORESULT2 [O]  64BIT  FST,
  FSIN,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfsin(pi) ( -- )
    ." testing FSIN, using pi "
    0 ['] TESTFSIN(PI) >BODY CALLPROC
    VARZ !  
    VARZ @ ORESULT2 CCO@ = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " ORESULT2 CCO@ U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfsin(pi)


HEX
CODE TESTFSIN(PI/2)
  FLDPI,
  O2 [O]  64BIT  FILD,
  ST1 FDIVPST0->,
  FSIN,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfsin(pi/2) ( -- )
    ." testing FSIN, using pi/2 "
    0 ['] TESTFSIN(PI/2) >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfsin(pi/2)


HEX
CODE TESTFABS
  O-2 [O]  64BIT  FILD,
  FABS,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfabs ( -- )
    ." testing FABS, "
    0 ['] TESTFABS >BODY CALLPROC
    VARZ !  
    VARZ @ 4000000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfabs


HEX
CODE TESTFCHS
  O2 [O]  64BIT  FILD,
  FCHS,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfchs ( -- )
    ." testing FCHS, "
    0 ['] TESTFCHS >BODY CALLPROC
    VARZ !  
    VARZ @ C000000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " C000000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfchs


HEX
CODE TESTFSQRT
  O4 [O]  64BIT  FILD,
  FSQRT,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfsqrt ( -- )
    ." testing FSQRT, "
    0 ['] TESTFSQRT >BODY CALLPROC
    VARZ !  
    VARZ @ 4000000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfsqrt



HEX
CODE TESTFCMOVE->ST0
  O4 [O]  64BIT  FILD,
  O3 [O]  64BIT  FILD,
  O2 [O]  64BIT  FILD,
  3 N  AL  MOV,
  3 N  AL  TEST,
  ST1  FCMOVE->ST0,
  0 N  AL  TEST,
  ST2  FCMOVE->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT3 [O]  64BIT  FSTP,
  RET,  
END-CODE
  
: testfcmove->st0 ( -- )
    ." testing FCMOVE->ST0, "
    0 ['] TESTFCMOVE->ST0 >BODY CALLPROC
    VARZ !  
    ORESULT1 CCO@ 4010000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 4008000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    ORESULT3 CCO@ 4010000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT3 CCO@ U.
    THEN
    CR
;

testfcmove->st0


HEX
CODE TESTFCMOVNE->ST0
  O4 [O]  64BIT  FILD,
  O3 [O]  64BIT  FILD,
  O2 [O]  64BIT  FILD,
  3 N  AL  MOV,
  0 N  AL  TEST,
  ST1  FCMOVNE->ST0,
  3 N  AL  TEST,
  ST2  FCMOVNE->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT3 [O]  64BIT  FSTP,
  RET,  
END-CODE
  
: testfcmovne->st0 ( -- )
    ." testing FCMOVNE->ST0, "
    0 ['] TESTFCMOVNE->ST0 >BODY CALLPROC
    VARZ !  
    ORESULT1 CCO@ 4010000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 4008000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    ORESULT3 CCO@ 4010000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT3 CCO@ U.
    THEN
    CR
;

testfcmovne->st0


HEX
CODE TESTFCMOVNB->ST0
  O4 [O]  64BIT  FILD,
  O3 [O]  64BIT  FILD,
  O2 [O]  64BIT  FILD,
  STC,
  ST1  FCMOVNB->ST0,
  CLC,
  ST2  FCMOVNB->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT3 [O]  64BIT  FSTP,
  RET,  
END-CODE
  
: testfcmovnb->st0 ( -- )
    ." testing FCMOVNB->ST0, "
    0 ['] TESTFCMOVNB->ST0 >BODY CALLPROC
    VARZ !  
    ORESULT1 CCO@ 4010000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 4008000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    ORESULT3 CCO@ 4010000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT3 CCO@ U.
    THEN
    CR
;

testfcmovnb->st0


HEX
CODE TESTFCMOVB->ST0
  O4 [O]  64BIT  FILD,
  O3 [O]  64BIT  FILD,
  O2 [O]  64BIT  FILD,
  CLC,
  ST1  FCMOVB->ST0,
  STC,
  ST2  FCMOVB->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT3 [O]  64BIT  FSTP,
  RET,  
END-CODE
  
: testfcmovb->st0 ( -- )
    ." testing FCMOVB->ST0, "
    0 ['] TESTFCMOVB->ST0 >BODY CALLPROC
    VARZ !  
    ORESULT1 CCO@ 4010000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 4008000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    ORESULT3 CCO@ 4010000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT3 CCO@ U.
    THEN
    CR
;

testfcmovb->st0


HEX
CODE TESTFCMOVBE->ST0
  O4 [O]  64BIT  FILD,
  O3 [O]  64BIT  FILD,
  O2 [O]  64BIT  FILD,
  1 N  AL  MOV,
  1 N  AL  CMP, // 1 - 1
  ST2  FCMOVBE->ST0,
  0 N  AL  CMP, // 1 - 0
  ST1  FCMOVBE->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT3 [O]  64BIT  FSTP,
  RET,  
END-CODE
  
: testfcmovbe->st0 ( -- )
    ." testing FCMOVBE->ST0, "
    0 ['] TESTFCMOVBE->ST0 >BODY CALLPROC
    VARZ !  
    ORESULT1 CCO@ 4010000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 4008000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    ORESULT3 CCO@ 4010000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT3 CCO@ U.
    THEN
    CR
;

testfcmovbe->st0


HEX
CODE TESTFCMOVNBE->ST0
  O4 [O]  64BIT  FILD,
  O3 [O]  64BIT  FILD,
  O2 [O]  64BIT  FILD,
  1 N  AL  MOV,
  0 N  AL  CMP, // 1 - 0
  ST2  FCMOVNBE->ST0,
  1 N  AL  CMP,  // 1 - 1
  ST1  FCMOVNBE->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT3 [O]  64BIT  FSTP,
  RET,  
END-CODE
  
: testfcmovnbe->st0 ( -- )
    ." testing FCMOVNBE->ST0, "
    0 ['] TESTFCMOVNBE->ST0 >BODY CALLPROC
    VARZ !  
    ORESULT1 CCO@ 4010000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 4008000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    ORESULT3 CCO@ 4010000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT3 CCO@ U.
    THEN
    CR
;

testfcmovnbe->st0


HEX
CODE TESTFCMOVU->ST0
  O4 [O]  64BIT  FILD,
  O3 [O]  64BIT  FILD,
  O2 [O]  64BIT  FILD,
  1 N  AL  MOV,
  0 N  AL  TEST,
  ST2  FCMOVU->ST0,
  1 N  AL  TEST,
  ST1  FCMOVU->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT3 [O]  64BIT  FSTP,
  RET,  
END-CODE
  
: testfcmovu->st0 ( -- )
    ." testing FCMOVU->ST0, "
    0 ['] TESTFCMOVU->ST0 >BODY CALLPROC
    VARZ !  
    ORESULT1 CCO@ 4010000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 4008000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    ORESULT3 CCO@ 4010000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT3 CCO@ U.
    THEN
    CR
;

testfcmovu->st0


HEX
CODE TESTFCMOVNU->ST0
  O4 [O]  64BIT  FILD,
  O3 [O]  64BIT  FILD,
  O2 [O]  64BIT  FILD,
  1 N  AL  MOV,
  1 N  AL  TEST,
  ST2  FCMOVNU->ST0,
  0 N  AL  TEST,
  ST1  FCMOVNU->ST0,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT3 [O]  64BIT  FSTP,
  RET,  
END-CODE
  
: testfcmovnu->st0 ( -- )
    ." testing FCMOVNU->ST0, "
    0 ['] TESTFCMOVNU->ST0 >BODY CALLPROC
    VARZ !  
    ORESULT1 CCO@ 4010000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 4008000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    ORESULT3 CCO@ 4010000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4010000000000000 U. 
      ." , got " ORESULT3 CCO@ U.
    THEN
    CR
;

testfcmovnu->st0


HEX
CODE TESTF2XM1
  O1 [O]  64BIT  FILD,
  F2XM1,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testf2xm1 ( -- )
    ." testing F2XM1, "
    0 ['] TESTF2XM1 >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testf2xm1


HEX
CODE TESTFINCSTP
  O1 [O]  64BIT  FILD,
  O2 [O]  64BIT  FILD,
  O3 [O]  64BIT  FILD,
  O4 [O]  64BIT  FILD,
  O5 [O]  64BIT  FILD,
  O6 [O]  64BIT  FILD,
  O7 [O]  64BIT  FILD,
  O8 [O]  64BIT  FILD,
  FINCSTP,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  RET,  
END-CODE
  
: testfincstp ( -- )
    ." testing FINCSTP, "
    0 ['] TESTFINCSTP >BODY CALLPROC
    VARZ !  
    VARZ @ 401C000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 401C000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfincstp


HEX
CODE TESTFDECSTP
  O1 [O]  64BIT  FILD,
  O2 [O]  64BIT  FILD,
  O3 [O]  64BIT  FILD,
  O4 [O]  64BIT  FILD,
  O5 [O]  64BIT  FILD,
  O6 [O]  64BIT  FILD,
  O7 [O]  64BIT  FILD,
  O8 [O]  64BIT  FILD,
  FDECSTP,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  RET,  
END-CODE
  
: testfdeccstp ( -- )
    ." testing FDECSTP, "
    0 ['] TESTFDECSTP >BODY CALLPROC
    VARZ !  
    VARZ @ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfdeccstp


HEX
CODE TESTFBLD
  OM80 [O] FBLD,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  RAX  MOV,
  RET,  
END-CODE
  
: testfbld ( -- )
    ." testing FBLD, "
    0 OM80 CCOC! 
    12 OM80 1 + CCOC!
    0 OM80 2 + CCOC!
    0 OM80 3 + CCOC!
    0 OM80 4 + CCOC!
    0 OM80 5 + CCOC!
    0 OM80 6 + CCOC!
    0 OM80 7 + CCOC!
    0 OM80 8 + CCOC!
    0 OM80 9 + CCOC!
    0 ['] TESTFBLD >BODY CALLPROC
    VARZ !      
    VARZ @ 4092C00000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4092C00000000000 U. 
      ." , got " VARZ @ U.
    THEN 
    CR
;

testfbld


HEX
CODE TESTFBSTP
  O10 [O] 64BIT FILD,
  OM80 [O] FBSTP,
  RET,  
END-CODE
  
: testfbstp ( -- )
    ." testing FBSTP, "
    0 ['] TESTFBSTP >BODY CALLPROC
    VARZ !      
    OM80 CCOC@ 10 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 10 U. 
      ." , got " OM80 CCOC@ U.
    THEN 
    CR
;

testfbstp


HEX
CODE TESTFCOMTOST0
  FINIT,
  RAX RAX XOR,
  O2 [O] 64BIT FILD,
  ORESULT2 [O]  64BIT  FSTP,
  O1 [O] 64BIT FILD,
  ORESULT1 [O]  64BIT  FST,
  ORESULT1 [O] 64BIT FCOM->ST0,
  FSTSW->AX,
  10 N EAX SHL,
  ORESULT2 [O] 64BIT FCOM->ST0,
  FSTSW->AX,
  ORESULT1 [O]  64BIT  FSTP,
  RET,  
END-CODE
 
: testfcomtost0 ( -- )
    ." testing FCOM->ST0, "
    0 ['] TESTFCOMTOST0 >BODY CALLPROC
    VARZ !      
    VARZ @ 7E007E00 AND 78003800 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 78003800 U. 
      ." , got " VARZ @  7E007E00 AND  U.
    THEN 
    CR
;

testfcomtost0


HEX
CODE TESTFCOMTOST0B
  FINIT,
  RAX RAX XOR,
  
  O1 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  ST1 FCOM->ST0,
  FSTSW->AX,
  10 N EAX SHL,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  64BIT  FSTP,

  O2 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  ST1 FCOM->ST0,
  FSTSW->AX,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT1 [O]  64BIT  FSTP,
  RET,  
END-CODE
 
: testfcomtost0b ( -- )
    ." testing FCOM->ST0, from ST1 "
    0 ['] TESTFCOMTOST0B >BODY CALLPROC
    VARZ !      
    VARZ @ 7E007E00 AND 70003000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 70003000 U. 
      ." , got " VARZ @  7E007E00 AND  U.
    THEN 
    CR
;

testfcomtost0b


HEX
CODE TESTFICOMTOST016
  FINIT,
  RAX RAX XOR,
  O1b [O] 64BIT FILD,
  O1 [O] 16BIT FICOM->ST0,
  FSTSW->AX,
  10 N EAX SHL,
  O2 [O] 16BIT FICOM->ST0,
  FSTSW->AX,
  ORESULT1 [O]  64BIT  FSTP,
  RET,  
END-CODE
 
: testficomtost016 ( -- )
    ." testing FICOM->ST0, 16 BIT "
    FF O2 2 + CCOC!
    FF O1 2 + CCOC!
    0 ['] TESTFICOMTOST016 >BODY CALLPROC
    VARZ !
    0 O2 2 + CCOC!
    0 O1 2 + CCOC!    
    VARZ @ 7E007E00 AND 78003800 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 78003800 U. 
      ." , got " VARZ @  7E007E00 AND  U.
    THEN 
    CR
;

testficomtost016


HEX
CODE TESTFICOMTOST032
  FINIT,
  RAX RAX XOR,
  O1b [O] 64BIT FILD,
  O1 [O] 32BIT FICOM->ST0,
  FSTSW->AX,
  10 N EAX SHL,
  O2 [O] 32BIT FICOM->ST0,
  FSTSW->AX,
  ORESULT1 [O]  64BIT  FSTP,
  RET,  
END-CODE
 
: testficomtost032 ( -- )
    ." testing FICOM->ST0, 32 BIT "
    FF O2 4 + CCOC!
    FF O1 4 + CCOC!
    0 ['] TESTFICOMTOST032 >BODY CALLPROC
    VARZ !
    0 O2 4 + CCOC!
    0 O1 4 + CCOC!    
    VARZ @ 7E007E00 AND 78003800 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 78003800 U. 
      ." , got " VARZ @  7E007E00 AND  U.
    THEN 
    CR
;

testficomtost032


HEX
CODE TESTFCOMITOST0
  FINIT,
  RAX RAX XOR,
  
  O1 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  ST1 FCOMI->ST0,
  EQ IF, 
    RAX DEC,
  THEN,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP, 
  RET,  
END-CODE
 
: testfcomitost0 ( -- )
    ." testing FCOMI->ST0, from ST1 "
    0 ['] TESTFCOMITOST0 >BODY CALLPROC
    VARZ !      
    VARZ @ -1 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " -1 U. 
      ." , got " VARZ @  U.
    THEN 
    CR
;

testfcomitost0


HEX
CODE TESTFCOMITOST0B
  FINIT,
  RAX RAX XOR,
  
  O2 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  ST1 FCOMI->ST0,
  CS IF, 
    RAX DEC,
  THEN,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP, 
  RET,  
END-CODE
 
: testfcomitost0b ( -- )
    ." testing FCOMI->ST0, from ST1 b "
    0 ['] TESTFCOMITOST0B >BODY CALLPROC
    VARZ !      
    VARZ @ -1 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " -1 U. 
      ." , got " VARZ @  U.
    THEN
    ORESULT2 CCO@ 4000000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT2 CCO@  U.
    THEN
    CR
;

testfcomitost0b


HEX
CODE TESTFCOMIPTOST0
  FINIT,
  RAX RAX XOR,
  
  O1 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  ST1 FCOMIP->ST0,
  EQ IF, 
    RAX DEC,
  THEN,
  ORESULT2 [O]  64BIT  FSTP, 
  RET,  
END-CODE
 
: testfcomiptost0 ( -- )
    ." testing FCOMIP->ST0, from ST1 "
    0 ['] TESTFCOMIPTOST0 >BODY CALLPROC
    VARZ !      
    VARZ @ -1 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " -1 U. 
      ." , got " VARZ @  U.
    THEN
    ORESULT2 CCO@ 3FF0000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " ORESULT2 CCO@  U.
    THEN 
    CR
;

testfcomiptost0


HEX
CODE TESTFCOMIPTOST0B
  FINIT,
  RAX RAX XOR,
  
  O2 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  ST1 FCOMIP->ST0,
  CS IF, 
    RAX DEC,
  THEN,
  ORESULT2 [O]  64BIT  FSTP, 
  RET,  
END-CODE
 
: testfcomiptost0b ( -- )
    ." testing FCOMIP->ST0, from ST1 b "
    0 ['] TESTFCOMIPTOST0B >BODY CALLPROC
    VARZ !      
    VARZ @ -1 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " -1 U. 
      ." , got " VARZ @  U.
    THEN
    ORESULT2 CCO@ 4000000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT2 CCO@  U.
    THEN 
    CR
;

testfcomiptost0b


HEX
CODE TESTFCOMPTOST0
  FINIT,
  RAX RAX XOR,
  O2 [O] 64BIT FILD,
  ORESULT2 [O]  64BIT  FSTP,

  O1 [O] 64BIT FILD,
  ORESULT1 [O]  64BIT  FST,
  ORESULT1 [O] 64BIT FCOMP->ST0,
  FSTSW->AX,
  10 N EAX SHL,

  O1 [O] 64BIT FILD,
  ORESULT2 [O] 64BIT FCOMP->ST0,
  FSTSW->AX,
  RET,  
END-CODE
 
: testfcomptost0 ( -- )
    ." testing FCOMP->ST0, "
    0 ['] TESTFCOMPTOST0 >BODY CALLPROC
    VARZ !      
    VARZ @ 7E007E00 AND 40000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 40000000 U. 
      ." , got " VARZ @  7E007E00 AND  U.
    THEN 
    CR
;

testfcomptost0


HEX
CODE TESTFICOMPTOST016
  FINIT,
  RAX RAX XOR,

  O1b [O] 64BIT FILD,
  O1 [O] 16BIT FICOMP->ST0,
  FSTSW->AX,
  10 N EAX SHL,

  O1b [O] 64BIT FILD,
  O2 [O] 16BIT FICOMP->ST0,
  FSTSW->AX,
  RET,  
END-CODE
 
: testficomptost016 ( -- )
    ." testing FICOMP->ST0, 16 BIT "
    FF O1 2 + CCOC!
    FF O2 2 + CCOC!
    0 ['] TESTFICOMPTOST016 >BODY CALLPROC
    VARZ !
    0 O1 2 + CCOC!
    0 O2 2 + CCOC!      
    VARZ @ 7E007E00 AND 40000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 40000000 U. 
      ." , got " VARZ @  7E007E00 AND  U.
    THEN 
    CR
;

testficomptost016


HEX
CODE TESTFICOMPTOST032
  FINIT,
  RAX RAX XOR,

  O1b [O] 64BIT FILD,
  O1 [O] 32BIT FICOMP->ST0,
  FSTSW->AX,
  10 N EAX SHL,

  O1b [O] 64BIT FILD,
  O2 [O] 32BIT FICOMP->ST0,
  FSTSW->AX,
  RET,  
END-CODE
 
: testficomptost032 ( -- )
    ." testing FICOMP->ST0, 32 BIT "
    FF O1 4 + CCOC!
    FF O2 4 + CCOC!
    0 ['] TESTFICOMPTOST032 >BODY CALLPROC
    VARZ !
    0 O1 4 + CCOC!
    0 O2 4 + CCOC!      
    VARZ @ 7E007E00 AND 40000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 40000000 U. 
      ." , got " VARZ @  7E007E00 AND  U.
    THEN 
    CR
;

testficomptost032


HEX
CODE TESTFCOMPP
  FINIT,
  RAX RAX XOR,

  O1 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  FCOMPP,
  FSTSW->AX,
  10 N EAX SHL,

  O2 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  FCOMPP,
  FSTSW->AX,
  RET,  
END-CODE
 
: testfcompp ( -- )
    ." testing FCOMPP, "
    0 ['] TESTFCOMPP >BODY CALLPROC
    VARZ !      
    VARZ @ 7E007E00 AND 40000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 40000000 U. 
      ." , got " VARZ @  7E007E00 AND  U.
    THEN 
    CR
;

testfcompp


HEX
CODE TESTFLD
  RAX  RAX  XOR,
  RAX  ORESULT2 [O]  MOV,
  4008000000000000 N  RAX  MOV,
  RAX  ORESULT1 [O]  MOV,

  ORESULT1 [O] 64BIT FLD,
  ORESULT2 [O] 64BIT FSTP,
  ORESULT2 [O]  RAX  MOV,
  RET,  
END-CODE
 
: testfld ( -- )
    ." testing FLD, "
    0 ['] TESTFLD >BODY CALLPROC
    VARZ !      
    VARZ @ 4008000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " VARZ @ U.
    THEN 
    CR
;

testfld


HEX
CODE TESTFIST32
  RAX  RAX  XOR,
  RAX  ORESULT2 [O]  MOV,

  O1 [O] 64BIT FILD,
  ORESULT2 [O] 32BIT FIST,
  ORESULT2 [O]  RAX  MOV,
  ORESULT1 [O] 64BIT FSTP,
  RET,  
END-CODE
 
: testfist32 ( -- )
    ." testing FIST, 32BIT "
    0 ['] TESTFIST32 >BODY CALLPROC
    VARZ !      
    VARZ @ 1 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1 U. 
      ." , got " VARZ @ U.
    THEN
    ORESULT1 CCO@ 3FF0000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN 
    CR
;

testfist32


HEX
CODE TESTFIST16
  RAX  RAX  XOR, RAX DEC,
  RAX  ORESULT2 [O]  MOV,

  O2 [O] 64BIT FILD,
  ORESULT2 [O] 16BIT FIST,
  ORESULT2 [O]  RAX  MOV,
  ORESULT1 [O] 64BIT FSTP,
  RET,  
END-CODE
 
: testfist16 ( -- )
    ." testing FIST, 16BIT "
    0 ['] TESTFIST16 >BODY CALLPROC
    VARZ !      
    VARZ @ FFFF AND 2 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 2 U. 
      ." , got " VARZ @ FFFF AND U.
    THEN
    VARZ @ FFFFFFFFFFFF0000 AND FFFFFFFFFFFF0000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFFFFFFF0000 U. 
      ." , got " VARZ @ FFFFFFFFFFFF0000 AND U.
    THEN 
    CR
;

testfist16


HEX
CODE TESTFISTP32
  FINIT,
  RAX  RAX  XOR,  RAX DEC,
  RAX  ORESULT2 [O]  MOV,

  O1 [O] 64BIT FILD,
  ORESULT2 [O] 32BIT FISTP,
  FSTSW->AX,
  RET,  
END-CODE
 
: testfistp32 ( -- )
    ." testing FISTP, 32BIT "
    0 ['] TESTFISTP32 >BODY CALLPROC
    VARZ !      
    ORESULT2 CCO@ FFFFFFFF AND 1 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1 U. 
      ." , got " ORESULT2 FFFFFFFF AND CCO@ U.
    THEN
    ORESULT2 CCO@ FFFFFFFF00000000 AND FFFFFFFF00000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFFF00000000 U. 
      ." , got " ORESULT2 FFFFFFFF00000000 AND CCO@ U.
    THEN
    VARZ @ 3800 AND 0 = IF
      ."  SUCCESS!"
    ELSE
      ."  FAIL! Expected " 0 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfistp32


HEX
CODE TESTFISTP16
  FINIT,
  RAX  RAX  XOR,  RAX DEC,
  RAX  ORESULT2 [O]  MOV,

  O2 [O] 64BIT FILD,
  ORESULT2 [O] 16BIT FISTP,
  FSTSW->AX,
  RET,  
END-CODE
 
: testfistp16 ( -- )
    ." testing FISTP, 16BIT "
    0 ['] TESTFISTP16 >BODY CALLPROC
    VARZ !      
    ORESULT2 CCO@ FFFFFFFFFFFF0002 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFFFFFFF0002 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    VARZ @ 3800 AND 0 = IF
      ."  SUCCESS!"
    ELSE
      ."  FAIL! Expected " 0 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfistp16


HEX
CODE TESTFISTP64
  FINIT,

  O1.5 [O] 64BIT FLD,
  ORESULT2 [O] 64BIT FISTP,
  FSTSW->AX,
  RET,  
END-CODE
 
: testfistp64 ( -- )
    ." testing FISTP, 64BIT "
    0 ['] TESTFISTP64 >BODY CALLPROC
    VARZ !      
    ORESULT2 CCO@ 2 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 2 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    VARZ @ 3800 AND 0 = IF
      ."  SUCCESS!"
    ELSE
      ."  FAIL! Expected " 0 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfistp64


HEX
CODE TESTFISTTP64
  FINIT,

  O1.5 [O] 64BIT FLD,
  ORESULT2 [O] 64BIT FISTTP,
  FSTSW->AX,
  RET,  
END-CODE
 
: testfisttp64 ( -- )
    ." testing FISTTP, 64BIT "
    0 ['] TESTFISTTP64 >BODY CALLPROC
    VARZ !      
    ORESULT2 CCO@ 1 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    VARZ @ 3800 AND 0 = IF
      ."  SUCCESS!"
    ELSE
      ."  FAIL! Expected " 0 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfisttp64


HEX
CODE TESTFISTTP32
  FINIT,
  RAX RAX XOR,  RAX DEC,
  RAX ORESULT2 [O] MOV,

  O1.5 [O] 64BIT FLD,
  ORESULT2 [O] 32BIT FISTTP,
  FSTSW->AX,
  RET,  
END-CODE
 
: testfisttp32 ( -- )
    ." testing FISTTP, 32BIT "
    0 ['] TESTFISTTP32 >BODY CALLPROC
    VARZ !      
    ORESULT2 CCO@ FFFFFFFF00000001 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFFF00000001 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    VARZ @ 3800 AND 0 = IF
      ."  SUCCESS!"
    ELSE
      ."  FAIL! Expected " 0 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfisttp32


HEX
CODE TESTFISTTP16
  FINIT,
  RAX RAX XOR,  RAX DEC,
  RAX ORESULT2 [O] MOV,

  O1.5 [O] 64BIT FLD,
  ORESULT2 [O] 16BIT FISTTP,
  FSTSW->AX,
  RET,  
END-CODE
 
: testfisttp16 ( -- )
    ." testing FISTTP, 16BIT "
    0 ['] TESTFISTTP16 >BODY CALLPROC
    VARZ !      
    ORESULT2 CCO@ FFFFFFFFFFFF0001 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " FFFFFFFFFFFF0001 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    VARZ @ 3800 AND 0 = IF
      ."  SUCCESS!"
    ELSE
      ."  FAIL! Expected " 0 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfisttp16


HEX
CODE TESTFPTAN0
  FLDZ,
  FPTAN,
  ORESULT1 [O]  64BIT FSTP,
  ORESULT2 [O]  64BIT FISTP,
  RET,  
END-CODE
 
: testfptan ( -- )
    ." testing FPTAN, 0 "
    0 ['] TESTFPTAN0 >BODY CALLPROC
    VARZ !      
    ORESULT1 CCO@ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 0 = IF
      ."  SUCCESS!"
    ELSE
      ."  FAIL! Expected " 0 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfptan


HEX
CODE TESTFPTANPI/4
  FLDPI,
  O4.0 [O] 64BIT FDIV->ST0,
  FPTAN,
  ORESULT1 [O]  64BIT FISTP,
  ORESULT2 [O]  64BIT FISTP,
  RET,  
END-CODE
 
: testfptanpi/4 ( -- )
    ." testing FPTAN, PI/4 "
    0 ['] TESTFPTANPI/4 >BODY CALLPROC
    VARZ !      
    ORESULT1 CCO@ 1 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 1 = IF
      ."  SUCCESS!"
    ELSE
      ."  FAIL! Expected " 1 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfptanpi/4


HEX
CODE TESTFPATAN(1,1)
  O1 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  FPATAN,
  FLDPI,
  O4 [O] 16BIT FIDIV->ST0,
  ST1 FSUBPST0->,
  ORESULT1 [O]  64BIT FISTP,
  RET,  
END-CODE
 
: testfpatan(1,1) ( -- )
    ." testing FPATAN, (1,1) "
    0 ['] TESTFPATAN(1,1) >BODY CALLPROC
    VARZ !      
    ORESULT1 CCO@ 0 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 0 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfpatan(1,1)


HEX
CODE TESTFRNDINT
  RAX RAX XOR,
  O1.5 [O] 64BIT FLD,
  FRNDINT,
  FSTSW->AX,
  ORESULT2 [O] 64BIT FSTP,
  RET,  
END-CODE
 
: testfrndint ( -- )
    ." testing FRNDINT,"
    0 ['] TESTFRNDINT >BODY CALLPROC
    VARZ !      
    ORESULT2 CCO@ 4000000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    VARZ @ 3800 AND 3800 = IF
      ."  SUCCESS!"
    ELSE
      ."  FAIL! Expected " 3800 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testfrndint


HEX
CODE TESTFSCALE
  O3 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  FSCALE,
  ORESULT1 [O]  64BIT FSTP,
  ORESULT2 [O]  64BIT FSTP,
  RET,  
END-CODE
 
: testfscale ( -- )
    ." testing FSCALE,"
    0 ['] TESTFSCALE >BODY CALLPROC
    VARZ !      
    ORESULT1 CCO@ 4020000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4020000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 4008000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfscale


HEX
CODE TESTFPREM
  O3 [O] 64BIT FILD,
  O8 [O] 64BIT FILD,
  FPREM,
  ORESULT1 [O]  64BIT FSTP,
  ORESULT2 [O]  64BIT FSTP,
  RET,  
END-CODE
 
: testfprem ( -- )
    ." testing FPREM,"
    0 ['] TESTFPREM >BODY CALLPROC
    VARZ !      
    ORESULT1 CCO@ 4000000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 4008000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfprem


HEX
CODE TESTFPREM1
  O3 [O] 64BIT FILD,
  O8 [O] 64BIT FILD,
  FPREM1,
  ORESULT1 [O]  64BIT FSTP,
  ORESULT2 [O]  64BIT FSTP,
  RET,  
END-CODE
 
: testfprem1 ( -- )
    ." testing FPREM1,"
    0 ['] TESTFPREM1 >BODY CALLPROC
    VARZ !      
    ORESULT1 CCO@ BFF0000000000000 = IF   // result is 8 - (3 * roundtoint(8/3)) = -1
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " BFF0000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 4008000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfprem1


HEX
CODE TESTFTST
  FINIT,
  RAX RAX XOR,
  O1 [O] 64BIT FLD,
  FTST,
  FSTSW->AX,
  ORESULT2 [O] 64BIT FSTP,
  10 N RAX SHL,

  FLDZ,
  FTST,
  FSTSW->AX,
  ORESULT2 [O] 64BIT FSTP,
  
  RET,  
END-CODE
 
: testftst ( -- )
    ." testing FTST,"
    0 ['] TESTFTST >BODY CALLPROC
    VARZ !      
    VARZ @ 40004000 AND 4000 = IF
      ."  SUCCESS!"
    ELSE
      ."  FAIL! Expected " 4000 U. 
      ." , got " VARZ @ 40004000 AND U.
    THEN
    CR
;

testftst


HEX
CODE TESTFXAM
  FINIT,
  RAX RAX XOR,
  O1 [O] 64BIT FLD,
  FXAM,
  FSTSW->AX,
  ORESULT2 [O] 64BIT FSTP,
  10 N RAX SHL,

  FLDZ,
  FTST,
  FSTSW->AX,
  ORESULT2 [O] 64BIT FSTP,
  
  RET,  
END-CODE
 
: testfxam ( -- )
    ." testing FXAM,"
    0 ['] TESTFXAM >BODY CALLPROC
    VARZ !      
    VARZ @ 40004000 AND 4000 = IF
      ."  SUCCESS!"
    ELSE
      ."  FAIL! Expected " 4000 U. 
      ." , got " VARZ @ 40004000 AND U.
    THEN
    CR
;

testfxam


HEX
CODE TESTFXCH
  O3 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  ST1 FXCHST0->,
  ORESULT1 [O]  64BIT FSTP,
  ORESULT2 [O]  64BIT FSTP,
  RET,  
END-CODE
 
: testfxch ( -- )
    ." testing ST1 FXCHST0->,"
    0 ['] TESTFXCH >BODY CALLPROC
    VARZ !      
    ORESULT1 CCO@ 4008000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 3FF0000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfxch


HEX
CODE TESTFNOP
  FINIT,
  RAX RAX XOR,
  O1 [O] 64BIT FILD,
  FSTSW->AX,
  AX CX MOV,
  FNOP,  
  FSTSW->AX,
  ORESULT2 [O] 64BIT FSTP,
  CX AX SUB,
  RET,  
END-CODE
 
: testfnop ( -- )
    ." testing FNOP,"
    0 ['] TESTFNOP >BODY CALLPROC
    VARZ !      
    VARZ @ 0 = IF
      ."  SUCCESS!"
    ELSE
      ."  FAIL! Expected " 0 U. 
      ." , got " VARZ @  U.
    THEN
    ORESULT2 CCO@ 3FF0000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfnop


// just doing a nop test...
HEX
CODE TESTFCLEX
  FINIT,
  RAX RAX XOR,
  O1 [O] 64BIT FILD,
  FSTSW->AX,
  AX CX MOV,
  FCLEX,  
  FSTSW->AX,
  ORESULT2 [O] 64BIT FSTP,
  CX AX SUB,
  RET,  
END-CODE
 
: testfclex ( -- )
    ." testing FCLEX,"
    0 ['] TESTFCLEX >BODY CALLPROC
    VARZ !      
    VARZ @ 0 = IF
      ."  SUCCESS!"
    ELSE
      ."  FAIL! Expected " 0 U. 
      ." , got " VARZ @  U.
    THEN
    ORESULT2 CCO@ 3FF0000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfclex


HEX
CODE TESTFNCLEX
  FINIT,
  RAX RAX XOR,
  O1 [O] 64BIT FILD,
  FSTSW->AX,
  AX CX MOV,
  FCLEX,  
  FSTSW->AX,
  ORESULT2 [O] 64BIT FSTP,
  CX AX SUB,
  RET,  
END-CODE
 
: testfnclex ( -- )
    ." testing FNCLEX,"
    0 ['] TESTFNCLEX >BODY CALLPROC
    VARZ !      
    VARZ @ 0 = IF
      ."  SUCCESS!"
    ELSE
      ."  FAIL! Expected " 0 U. 
      ." , got " VARZ @  U.
    THEN
    ORESULT2 CCO@ 3FF0000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfnclex


HEX
CODE TESTFYL2X
  FINIT,
  RAX RAX XOR,
  O2 [O] 64BIT FILD,
  O8 [O] 64BIT FILD,
  FYL2X,  
  ORESULT2 [O] 64BIT FSTP,
  RET,  
END-CODE
 
: testfyl2x ( -- )
    ." testing FYL2X,"
    0 ['] TESTFYL2X >BODY CALLPROC
    DROP
    ORESULT2 CCO@ 4018000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4018000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfyl2x


HEX
CODE TESTFYL2XP1
  FINIT,
  RAX RAX XOR,
  O2 [O] 64BIT FILD,
  O7 [O] 64BIT FILD,
  FYL2XP1,  
  ORESULT2 [O] 64BIT FSTP,
  RET,  
END-CODE
 
: testfyl2xp1 ( -- )
    ." testing FYL2XP1,"
    0 ['] TESTFYL2XP1 >BODY CALLPROC
    DROP
    ORESULT2 CCO@ 4018000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4018000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfyl2xp1


HEX
CODE TESTFXTRACT
  O7 [O] 64BIT FILD,
  FXTRACT,  
  ORESULT1 [O] 64BIT FSTP,
  ORESULT2 [O] 64BIT FSTP,
  RET,  
END-CODE
 
: testfxtract ( -- )
    ." testing FXTRACT,"
    0 ['] TESTFXTRACT >BODY CALLPROC
    DROP
    ORESULT1 CCO@ 3FFC000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FFC000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 4000000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfxtract


HEX
CODE TESTFSINCOS
  FLDPI,
  FSINCOS,  
  ORESULT1 [O] 64BIT FSTP,
  ORESULT2 [O] 64BIT FISTP,
  RET,  
END-CODE
 
: testfsincos ( -- )
    ." testing FSINCOS,"
    0 ['] TESTFSINCOS >BODY CALLPROC
    DROP
    ORESULT1 CCO@ BFF0000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " BFF0000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 0 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 0 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfsincos


HEX
CODE TESTFUCOMTOST0
  FINIT,
  RAX RAX XOR,
  O2 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  ST1 FUCOM->ST0,
  FSTSW->AX,
  10 N EAX SHL,
  ST0 FUCOM->ST0,
  FSTSW->AX,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  RET,  
END-CODE

// bu|c3|p2|p1|p0|c2|c1|c0
// c3 = sign
// c0 = carry 
: testfucomtost0 ( -- )
    ." testing FUCOM->ST0, "
    0 ['] TESTFUCOMTOST0 >BODY CALLPROC
    VARZ !     
    VARZ @ 7F007F00 AND 31007000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 31007000 U. 
      ." , got " VARZ @  7F007F00 AND  U.
    THEN
    ORESULT1 CCO@ 3FF0000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 4000000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfucomtost0


HEX
CODE TESTFUCOMPTOST0
  FINIT,
  RAX RAX XOR,
  O2 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  ST1 FUCOMP->ST0,
  FSTSW->AX,
  10 N EAX SHL,
  ST0 FUCOMP->ST0,
  FSTSW->AX,
  RET,  
END-CODE

// bu|c3|p2|p1|p0|c2|c1|c0
// c3 = sign
// c0 = carry 
: testfucomptost0 ( -- )
    ." testing FUCOMP->ST0, "
    0 ['] TESTFUCOMPTOST0 >BODY CALLPROC
    VARZ !     
    VARZ @ 7F007F00 AND 39004000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 39004000 U. 
      ." , got " VARZ @  7F007F00 AND  U.
    THEN
    CR
;

testfucomptost0


HEX
CODE TESTFUCOMPP
  FINIT,
  RAX RAX XOR,
  O2 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  FUCOMPP,
  FSTSW->AX,
  10 N EAX SHL,
  O2 [O] 64BIT FILD,
  O2 [O] 64BIT FILD,
  FUCOMPP,
  FSTSW->AX,
  RET,  
END-CODE

// bu|c3|p2|p1|p0|c2|c1|c0
// c3 = sign
// c0 = carry 
: testfucompp ( -- )
    ." testing FUCOMPP, "
    0 ['] TESTFUCOMPP >BODY CALLPROC
    VARZ !     
    VARZ @ 7F007F00 AND 01004000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 01004000 U. 
      ." , got " VARZ @  7F007F00 AND  U.
    THEN
    CR
;

testfucompp


HEX
CODE TESTFUCOMITOST0
  FINIT,
  RAX RAX XOR,
  
  O1 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  ST1 FUCOMI->ST0,
  EQ IF, 
    RAX DEC,
  THEN,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP, 
  RET,  
END-CODE
 
: testfucomitost0 ( -- )
    ." testing FUCOMI->ST0, from ST1 "
    0 ['] TESTFUCOMITOST0 >BODY CALLPROC
    VARZ !      
    VARZ @ -1 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " -1 U. 
      ." , got " VARZ @  U.
    THEN 
    CR
;

testfucomitost0


HEX
CODE TESTFUCOMITOST0B
  FINIT,
  RAX RAX XOR,
  
  O2 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  ST1 FUCOMI->ST0,
  CS IF, 
    RAX DEC,
  THEN,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP, 
  RET,  
END-CODE
 
: testfucomitost0b ( -- )
    ." testing FUCOMI->ST0, from ST1 b "
    0 ['] TESTFUCOMITOST0B >BODY CALLPROC
    VARZ !      
    VARZ @ -1 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " -1 U. 
      ." , got " VARZ @  U.
    THEN
    ORESULT2 CCO@ 4000000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT2 CCO@  U.
    THEN
    CR
;

testfucomitost0b


HEX
CODE TESTFUCOMIPTOST0
  FINIT,
  RAX RAX XOR,
  
  O1 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  ST1 FUCOMIP->ST0,
  EQ IF, 
    RAX DEC,
  THEN,
  ORESULT2 [O]  64BIT  FSTP, 
  RET,  
END-CODE
 
: testfucomiptost0 ( -- )
    ." testing FUCOMIP->ST0, from ST1 "
    0 ['] TESTFUCOMIPTOST0 >BODY CALLPROC
    VARZ !      
    VARZ @ -1 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " -1 U. 
      ." , got " VARZ @  U.
    THEN
    ORESULT2 CCO@ 3FF0000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " ORESULT2 CCO@  U.
    THEN 
    CR
;

testfucomiptost0


HEX
CODE TESTFUCOMIPTOST0B
  FINIT,
  RAX RAX XOR,
  
  O2 [O] 64BIT FILD,
  O1 [O] 64BIT FILD,
  ST1 FUCOMIP->ST0,
  CS IF, 
    RAX DEC,
  THEN,
  ORESULT2 [O]  64BIT  FSTP, 
  RET,  
END-CODE
 
: testfucomiptost0b ( -- )
    ." testing FUCOMIP->ST0, from ST1 b "
    0 ['] TESTFUCOMIPTOST0B >BODY CALLPROC
    VARZ !      
    VARZ @ -1 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " -1 U. 
      ." , got " VARZ @  U.
    THEN
    ORESULT2 CCO@ 4000000000000000 = IF
     ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT2 CCO@  U.
    THEN 
    CR
;

testfucomiptost0b


HEX
CODE TESTFSTENV
  OM28B [O]  FSTENV,
  RET,  
END-CODE
 
: testfstenv ( -- )
    ." testing FSTENV, "
    OM28B CCO>P 20 ERASE
    0 ['] TESTFSTENV >BODY CALLPROC
    DROP      
    OM28B 0D + CCOC@ 0<> IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected something other than 0" 
      ." , got " OM28B 0D + CCOC@  U.
    THEN 
    CR
;

testfstenv


HEX
CODE TESTFNSTENV
  OM28B [O]  FNSTENV,
  RET,  
END-CODE
 
: testfnstenv ( -- )
    ." testing FNSTENV, "
    OM28B CCO>P 20 ERASE
    0 ['] TESTFNSTENV >BODY CALLPROC
    DROP      
    OM28B 0D + CCOC@ 0<> IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected something other than 0" 
      ." , got " OM28B 0D + CCOC@  U.
    THEN 
    CR
;

testfnstenv


HEX
CODE TESTFLDENV
  OM28B [O]  FSTENV,
  OM28B [O]  FLDENV,
  RET,  
END-CODE
 
: testfldenv ( -- )
    ." testing FLDENV, "
    OM28B CCO>P 20 ERASE
    0 ['] TESTFLDENV >BODY CALLPROC
    DROP      
    OM28B 0D + CCOC@ 0<> IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected something other than 0" 
      ." , got " OM28B 0D + CCOC@  U.
    THEN 
    CR
;

testfldenv


HEX
CODE TESTFFREE
  FINIT,              
  FLDZ, // 01 = zero           ( ST2 = TAG3 )
  FLDPI, // will be free = 11  ( ST1 = TAG2 )
  FLDPI, // 00 = valid         ( ST0 = TAG1 )
  ST1 FFREE,                   (  11 = TAG0 )
  OM28B [O]  FSTENV,
  RET,  
END-CODE
 
: testffree ( -- )
    ." testing FFREE, "
    0 ['] TESTFFREE >BODY CALLPROC
    DROP
    // 00 = valid, 01 = zero, 10 = invalid (NaN e.g.), 11 = empty
    OM28B 9 + CCOC@ 73 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected 73 " 
      ." , got " OM28B 9 + CCOC@  U.
      CR OM28B CCO>P 20 DUMP
    THEN 
    CR
;

testffree


HEX
CODE TESTFLDCW
  ORESULT1 [O]  FSTCW,
  ORESULT1 [O]  FLDCW,
  RET,  
END-CODE
 
: testfldcw ( -- )
    ." testing FLDCW, FSTCW, - also a crash test "
    -1 ORESULT1 CCO!
    0 ['] TESTFLDCW >BODY CALLPROC
    DROP
    ORESULT1 CCO@ -1 <> IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected not -1 " 
      ." , got " ORESULT1 CCO@  U.
    THEN 
    CR
;

testfldcw


HEX
CODE TESTFNSTCW
  ORESULT1 [O]  FNSTCW,
  ORESULT1 [O]  FLDCW,
  RET,  
END-CODE
 
: testfnstcw ( -- )
    ." testing FLDCW, FNSTCW, - also a crash test "
    0 ORESULT1 CCO!
    0 ['] TESTFNSTCW >BODY CALLPROC
    DROP
    ORESULT1 CCO@ -1 <> IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected not -1 " 
      ." , got " ORESULT1 CCO@  U.
    THEN 
    CR
;

testfnstcw


HEX
CODE TESTFSAVE
  OM28B [O]  FSAVE,
  OM28B [O]  FRSTOR,
  RET,  
END-CODE
 
: testfsave ( -- )
    ." testing FSAVE, FRSTOR, - also a crash test "
    OM28B CCO>P 20 ERASE
    0 ['] TESTFSAVE >BODY CALLPROC
    DROP
    OM28B CCO@ 0 <> IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected not 0 " 
      ." , got " OM28B 10 + CCO@  U.
    THEN 
    CR
;

testfsave


HEX
CODE TESTFNSAVE
  OM108B [O]  FNSAVE,
  OM108B [O]  FRSTOR,
  RET,  
END-CODE
 
: testfnsave ( -- )
    ." testing FNSAVE, FRSTOR, - also a crash test "
    OM108B CCO>P 80 ERASE
    0 ['] TESTFNSAVE >BODY CALLPROC
    DROP
    OM108B CCO@ 0 <> IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected not 0 " 
      ." , got " OM108B 10 + CCO@  U.
    THEN 
    CR
;

testfnsave



HEX
CODE TESTFDUP
  FINIT,
  RAX RAX XOR,
  O2 [O] 64BIT FILD,
  FSTSW->AX,
  10 N EAX SHL,
  FDUP,
  FSTSW->AX,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  RET,  
END-CODE
 
: testfdup ( -- )
    ." testing FDUP, "
    0 ['] TESTFDUP >BODY CALLPROC
    VARZ !      
    VARZ @ 38007E00 AND 38003000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 78003800 U. 
      ." , got " VARZ @  7E007E00 AND  U.
    THEN
    ORESULT1 CCO@ 4000000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT1 CCO@  U.
    THEN
    ORESULT2 CCO@ 4000000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT2 CCO@  U.
    THEN
    CR
;

testfdup


HEX
CODE TESTFSWAP
  FINIT,
  O2 [O] 64BIT FILD,
  O3 [O] 64BIT FILD,
  FSWAP,
  ORESULT1 [O]  64BIT  FSTP,
  ORESULT2 [O]  64BIT  FSTP,
  RET,  
END-CODE
 
: testfswap ( -- )
    ." testing FSWAP, "
    0 ['] TESTFSWAP >BODY CALLPROC
    DROP     
    ORESULT1 CCO@ 4000000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT1 CCO@  U.
    THEN
    ORESULT2 CCO@ 4008000000000000 = IF
      ."  SUCCESS!"
    ELSE
      ." FAIL! Expected " 4008000000000000 U. 
      ." , got " ORESULT2 CCO@  U.
    THEN
    CR
;

testfswap


HEX
CODE TESTFLDST1
  O1 [O] 64BIT FILD,
  O2 [O] 64BIT FILD,
  ST1 FLD,
  ORESULT1 [O] 64BIT FSTP,
  ORESULT2 [O] 64BIT FSTP,
  ORESULT3 [O] 64BIT FSTP,
  RET,  
END-CODE
 
: testfldst1 ( -- )
    ." testing ST1 FLD, "
    0 ['] TESTFLDST1 >BODY CALLPROC
    DROP      
    ORESULT1 CCO@ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 4000000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    ORESULT3 CCO@ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U. 
      ." , got " ORESULT3 CCO@ U.
    THEN
    CR
;

testfldst1


HEX
CODE TESTFSTST1
  O1 [O] 64BIT FILD,
  O2 [O] 64BIT FILD,
  ST1 FST,
  ORESULT1 [O] 64BIT FSTP,
  ORESULT2 [O] 64BIT FSTP,
  RET,  
END-CODE
 
: testfstst1 ( -- )
    ." testing ST1 FST, "
    0 ['] TESTFSTST1 >BODY CALLPROC
    DROP      
    ORESULT1 CCO@ 4000000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    ORESULT2 CCO@ 4000000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT2 CCO@ U.
    THEN
    CR
;

testfstst1


HEX
CODE TESTFSTPST1
  O1 [O] 64BIT FILD,
  O2 [O] 64BIT FILD,
  ST1 FSTP,
  ORESULT1 [O] 64BIT FSTP,
  RET,  
END-CODE
 
: testfstpst1 ( -- )
    ." testing ST1 FSTP, "
    0 ['] TESTFSTPST1 >BODY CALLPROC
    DROP      
    ORESULT1 CCO@ 4000000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4000000000000000 U. 
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfstpst1


HEX
CODE TESTFDIV->ST0M64
  4000000000000000 N  RAX  MOV,
  RAX  ORESULT1 [O]  MOV,
  O3 [O]  64BIT  FILD,
  ORESULT1 [O]  64BIT  FDIV->ST0,
  ORESULT1 [O]  64BIT  FSTP,

  RET,  
END-CODE
  
: testfdiv->st0m64 ( -- )
    ." testing FDIV->ST0, 64BIT "
    0 ['] TESTFDIV->ST0M64 >BODY CALLPROC
    DROP  
    ORESULT1 CCO@ 3FF8000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF8000000000000 U.  // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfdiv->st0m64


HEX
CODE TESTFDIV->ST0M32
  O2 [O]  64BIT  FILD,
  ORESULT1 [O]  32BIT  FSTP,
  O3 [O]  64BIT  FILD,
  ORESULT1 [O]  32BIT  FDIV->ST0,
  ORESULT1 [O]  64BIT  FSTP,

  RET,  
END-CODE
  
: testfdiv->st0m32 ( -- )
    ." testing FDIV->ST0, 32BIT "
    0 ['] TESTFDIV->ST0M32 >BODY CALLPROC
    DROP  
    ORESULT1 CCO@ 3FF8000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF8000000000000 U.  // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfdiv->st0m32


HEX
CODE TESTFDIVR->ST0M64
  4008000000000000 N  RAX  MOV,
  RAX  ORESULT1 [O]  MOV,
  O2 [O]  64BIT  FILD,
  ORESULT1 [O]  64BIT  FDIVR->ST0,
  ORESULT1 [O]  64BIT  FSTP,

  RET,  
END-CODE
  
: testfdivr->st0m64 ( -- )
    ." testing FDIVR->ST0, 64BIT "
    0 ['] TESTFDIVR->ST0M64 >BODY CALLPROC
    DROP  
    ORESULT1 CCO@ 3FF8000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF8000000000000 U.  // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfdivr->st0m64


HEX
CODE TESTFDIVR->ST0M32
  O3 [O]  64BIT  FILD,
  ORESULT1 [O]  32BIT  FSTP,
  O2 [O]  64BIT  FILD,
  ORESULT1 [O]  32BIT  FDIVR->ST0,
  ORESULT1 [O]  64BIT  FSTP,

  RET,  
END-CODE
  
: testfdivr->st0m32 ( -- )
    ." testing FDIVR->ST0, 32BIT "
    0 ['] TESTFDIVR->ST0M32 >BODY CALLPROC
    DROP  
    ORESULT1 CCO@ 3FF8000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF8000000000000 U.  // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfdivr->st0m32



HEX
CODE TESTFMUL->ST0M64
  4000000000000000 N  RAX  MOV,
  RAX  ORESULT1 [O]  MOV,
  O3 [O]  64BIT  FILD,
  ORESULT1 [O]  64BIT  FMUL->ST0,
  ORESULT1 [O]  64BIT  FSTP,

  RET,  
END-CODE
  
: testfmul->st0m64 ( -- )
    ." testing FMUL->ST0, 64BIT "
    0 ['] TESTFMUL->ST0M64 >BODY CALLPROC
    DROP  
    ORESULT1 CCO@ 4018000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4018000000000000 U.  // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfmul->st0m64


HEX
CODE TESTFMUL->ST0M32
  O2 [O]  64BIT  FILD,
  ORESULT1 [O]  32BIT  FSTP,
  O3 [O]  64BIT  FILD,
  ORESULT1 [O]  32BIT  FMUL->ST0,
  ORESULT1 [O]  64BIT  FSTP,

  RET,  
END-CODE
  
: testfmul->st0m32 ( -- )
    ." testing FMUL->ST0, 32BIT "
    0 ['] TESTFMUL->ST0M32 >BODY CALLPROC
    DROP  
    ORESULT1 CCO@ 4018000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4018000000000000 U.  // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfmul->st0m32


HEX
CODE TESTFADD->ST0M64
  4000000000000000 N  RAX  MOV,
  RAX  ORESULT1 [O]  MOV,
  O3 [O]  64BIT  FILD,
  ORESULT1 [O]  64BIT  FADD->ST0,
  ORESULT1 [O]  64BIT  FSTP,

  RET,  
END-CODE
  
: testfadd->st0m64 ( -- )
    ." testing FADD->ST0, 64BIT "
    0 ['] TESTFADD->ST0M64 >BODY CALLPROC
    DROP  
    ORESULT1 CCO@ 4014000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4014000000000000 U.  // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfadd->st0m64


HEX
CODE TESTFADD->ST0M32
  O2 [O]  64BIT  FILD,
  ORESULT1 [O]  32BIT  FSTP,
  O3 [O]  64BIT  FILD,
  ORESULT1 [O]  32BIT  FADD->ST0,
  ORESULT1 [O]  64BIT  FSTP,

  RET,  
END-CODE
  
: testfadd->st0m32 ( -- )
    ." testing FADD->ST0, 32BIT "
    0 ['] TESTFADD->ST0M32 >BODY CALLPROC
    DROP  
    ORESULT1 CCO@ 4014000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 4014000000000000 U.  // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfadd->st0m32


HEX
CODE TESTFSUB->ST0M64
  4000000000000000 N  RAX  MOV,
  RAX  ORESULT1 [O]  MOV,
  O3 [O]  64BIT  FILD,
  ORESULT1 [O]  64BIT  FSUB->ST0,
  ORESULT1 [O]  64BIT  FSTP,

  RET,  
END-CODE
  
: testfsub->st0m64 ( -- )
    ." testing FSUB->ST0, 64BIT "
    0 ['] TESTFSUB->ST0M64 >BODY CALLPROC
    DROP  
    ORESULT1 CCO@ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U.  // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfsub->st0m64


HEX
CODE TESTFSUB->ST0M32
  O2 [O]  64BIT  FILD,
  ORESULT1 [O]  32BIT  FSTP,
  O3 [O]  64BIT  FILD,
  ORESULT1 [O]  32BIT  FSUB->ST0,
  ORESULT1 [O]  64BIT  FSTP,

  RET,  
END-CODE
  
: testfsub->st0m32 ( -- )
    ." testing FSUB->ST0, 32BIT "
    0 ['] TESTFSUB->ST0M32 >BODY CALLPROC
    DROP  
    ORESULT1 CCO@ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U.  // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfsub->st0m32


HEX
CODE TESTFSUBR->ST0M64
  4008000000000000 N  RAX  MOV,
  RAX  ORESULT1 [O]  MOV,
  O2 [O]  64BIT  FILD,
  ORESULT1 [O]  64BIT  FSUBR->ST0,
  ORESULT1 [O]  64BIT  FSTP,

  RET,  
END-CODE
  
: testfsubr->st0m64 ( -- )
    ." testing FSUBR->ST0, 64BIT "
    0 ['] TESTFSUBR->ST0M64 >BODY CALLPROC
    DROP  
    ORESULT1 CCO@ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U.  // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfsubr->st0m64


HEX
CODE TESTFSUBR->ST0M32
  O3 [O]  64BIT  FILD,
  ORESULT1 [O]  32BIT  FSTP,
  O2 [O]  64BIT  FILD,
  ORESULT1 [O]  32BIT  FSUBR->ST0,
  ORESULT1 [O]  64BIT  FSTP,

  RET,  
END-CODE
  
: testfsubr->st0m32 ( -- )
    ." testing FSUBR->ST0, 32BIT "
    0 ['] TESTFSUBR->ST0M32 >BODY CALLPROC
    DROP  
    ORESULT1 CCO@ 3FF0000000000000 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3FF0000000000000 U.  // 6.0
      ." , got " ORESULT1 CCO@ U.
    THEN
    CR
;

testfsubr->st0m32



HEX
CODE TESTMOVQXMM0<->M64
  O3 [O]  XMM0  MOVQ,
  XMM0  O2 [O]  MOVQ,
  RET,  
END-CODE
  
: testmovqxmm0<->m64 ( -- )
    ." testing movq xmm0 <-> m64 "
    0 O2 CCO!
    1122334455667789 O3 CCO!
    0 ['] TESTMOVQXMM0<->M64 >BODY CALLPROC
    DROP  
    O2 CCO@ 1122334455667789 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1122334455667789 U.  // 6.0
      ." , got " O2 CCO@ U.
    THEN
    CR
;

testmovqxmm0<->m64



HEX
CODE TESTMOVQST0<->M64
  O3 [O]  ST0  MOVQ,
  ST0  O2 [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testmovqst0<->m64 ( -- )
    ." testing movq st0 <-> m64 "
    0 O2 CCO!
    112233445566778A O3 CCO!
    0 ['] TESTMOVQST0<->M64 >BODY CALLPROC
    DROP  
    O2 CCO@ 112233445566778A = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 112233445566778A U.  // 6.0
      ." , got " O2 CCO@ U.
    THEN
    CR
;

testmovqst0<->m64


HEX
CODE TESTMOVDQAXMM0<->M128
  OU128A [O]  XMM0  MOVDQA,
  XMM0  OU128B [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovdqaxmm0<->m128 ( -- )
    ." testing movdqa xmm0 <-> m128 "
    0 OU128B CCO!  0 OU128B 8 + CCO!  
    112233445566778A OU128A CCO!  121314151617181C OU128A 8 + CCO!
    0 ['] TESTMOVDQAXMM0<->M128 >BODY CALLPROC
    DROP  
    OU128A CCO@ 112233445566778A = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " 112233445566778A U.  
      ." , got " OU128A CCO@ U.
    THEN
    OU128A 8 + CCO@ 121314151617181C = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 121314151617181C U.  
      ." , got " OU128A CCO@ U.
    THEN
    CR
;

testmovdqaxmm0<->m128



HEX
CODE TESTADDPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  ADDPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testaddpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  ADDPD, "
    O1.0 CCO@ OU128A CCO!  O2.0 CCO@ OU128A 8 + CCO!  
    O2.0 CCO@ OU128B CCO!  O3.0 CCO@ OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTADDPDM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ O3.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O3.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O5.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O5.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testaddpdm128->xmm0


HEX
CODE TESTADDPDM128->XMM9    // XMM9 uses REX
  OU128A [O]  XMM9  MOVDQA,
  OU128B [O]  XMM9  ADDPD,   
  XMM9  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testaddpdm128->xmm9 ( -- )
    ." testing OM128 [O]  XMM9  ADDPD, "
    O1.0 CCO@ OU128A CCO!  O2.0 CCO@ OU128A 8 + CCO!  
    O2.0 CCO@ OU128B CCO!  O3.0 CCO@ OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTADDPDM128->XMM9 >BODY CALLPROC
    DROP  
     OU128C CCO@ O3.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O3.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O5.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O5.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testaddpdm128->xmm9


HEX
CODE TESTADDSDM64->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  ADDSD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testaddsdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  ADDSD, "
    O1.0 CCO@ OU128A CCO!  O2.0 CCO@ OU128A 8 + CCO!  
    O2.0 CCO@ OU128B CCO!  O3.0 CCO@ OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTADDSDM64->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ O3.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O3.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O2.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O2.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testaddsdm128->xmm0


HEX
CODE TESTADDPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  ADDPS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testaddpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  ADDPS, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS1.0 OU128B CCOU32!  FPS1.0 OU128B 4 + CCOU32!   FPS1.0 OU128B 8 + CCOU32!  FPS1.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTADDPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS2.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS2.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS3.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS3.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS4.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS4.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS5.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS5.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testaddpsm128->xmm0


HEX
CODE TESTADDSSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  ADDSS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testaddssm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  ADDSS, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS1.0 OU128B CCOU32!  FPS1.0 OU128B 4 + CCOU32!   FPS1.0 OU128B 8 + CCOU32!  FPS1.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTADDSSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS2.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS2.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS3.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS3.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS4.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS4.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testaddssm128->xmm0


HEX
CODE TESTADDSUBPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  ADDSUBPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testaddsubpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  ADDSUBPD, "
    O2.0 CCO@ OU128A CCO!  O3.0 CCO@ OU128A 8 + CCO!  
    O1.0 CCO@ OU128B CCO!  O2.0 CCO@ OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTADDSUBPDM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ O1.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O1.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O5.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O5.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testaddsubpdm128->xmm0


HEX
CODE TESTADDSUBPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  ADDSUBPS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testaddsubpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  ADDSUBPS, "
    FPS2.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS1.0 OU128B CCOU32!  FPS1.0 OU128B 4 + CCOU32!   FPS1.0 OU128B 8 + CCOU32!  FPS1.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTADDSUBPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS1.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS1.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS3.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS3.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS2.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS2.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS5.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS5.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testaddsubpsm128->xmm0


HEX
CODE TESTANDPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  ANDPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testandpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  ANDPD, "
    FPS1.0 OU128A CCO!  FPS2.0 OU128A 8 + CCO!  
    FPS2.0 OU128B CCO!  FPS3.0 OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTANDPDM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ FPS1.0 FPS2.0 AND = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPS1.0 FPS2.0 AND U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPS2.0 FPS3.0 AND = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPS2.0 FPS3.0 AND U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testandpdm128->xmm0


HEX
CODE TESTANDNPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM1  MOVDQA,
  XMM1 XMM0 ANDNPD,
  // OU128B [O]  XMM0  ANDNPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE


  
: testandnpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  ANDNPD, "
    // FPD1.0 OU128A CCO!  FPD2.0 OU128A 8 + CCO! 
    FFFFFFFF00000000 OU128A CCO!  FF00FF00FF00FF00 OU128A 8 + CCO! 
    // FPD2.0 OU128B CCO!  FPD3.0 OU128B 8 + CCO!
    FFFF0000FFFF0000 OU128B CCO!  F0F0F0F0F0F0F0F0 OU128B 8 + CCO! 
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTANDNPDM128->XMM0 >BODY CALLPROC
    DROP  
    // OU128C CCO@ FPD1.0 FPD2.0 AND INVERT = IF
    OU128C CCO@ FFFF0000 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " ( FPD1.0 FPD2.0 AND INVERT ) FFFF0000 U.  
      ." , got " OU128C CCO@ U.
    THEN
    // OU128C 8 + CCO@ FPD2.0 FPD3.0 AND INVERT = IF
    OU128C 8 + CCO@ 00F000F000F000F0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " ( FPD2.0 FPD3.0 AND INVERT ) 00F000F000F000F0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testandnpdm128->xmm0


// how is this instruction's operation any different from ANDNPD, ???

HEX
CODE TESTANDNPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM1  MOVDQA,
  XMM1 XMM0 ANDNPS,
  // OU128B [O]  XMM0  ANDNPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE


  
: testandnpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  ANDNPS, "
    // FPD1.0 OU128A CCO!  FPD2.0 OU128A 8 + CCO! 
    FFFFFFFF00000000 OU128A CCO!  FF00FF00FF00FF00 OU128A 8 + CCO! 
    // FPD2.0 OU128B CCO!  FPD3.0 OU128B 8 + CCO!
    FFFF0000FFFF0000 OU128B CCO!  F0F0F0F0F0F0F0F0 OU128B 8 + CCO! 
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTANDNPSM128->XMM0 >BODY CALLPROC
    DROP  
    // OU128C CCO@ FPD1.0 FPD2.0 AND INVERT = IF
    OU128C CCO@ FFFF0000 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " ( FPD1.0 FPD2.0 AND INVERT ) FFFF0000 U.  
      ." , got " OU128C CCO@ U.
    THEN
    // OU128C 8 + CCO@ FPD2.0 FPD3.0 AND INVERT = IF
    OU128C 8 + CCO@ 00F000F000F000F0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " ( FPD2.0 FPD3.0 AND INVERT ) 00F000F000F000F0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testandnpsm128->xmm0


HEX
CODE TESTANDPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  ANDPS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testandpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  ANDPS, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS1.0 OU128B CCOU32!  FPS1.0 OU128B 4 + CCOU32!   FPS1.0 OU128B 8 + CCOU32!  FPS1.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTANDPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS1.0 FPS1.0 AND = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS1.0 FPS1.0 AND U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS2.0 FPS1.0 AND = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 FPS1.0 AND U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS3.0 FPS1.0 AND = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS3.0 FPS1.0 AND U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS1.0 FPS4.0 AND = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS1.0 FPS4.0 AND U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testandpsm128->xmm0


HEX
CODE TESTBLENDPD0NM128->XMM9    // XMM9 uses REX
  OU128A [O]  XMM9  MOVDQA,
  0 N  OU128B [O]  XMM9  BLENDPD,   
  XMM9  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testblendpd0nm128->xmm9 ( -- )
    ." testing 0 N OM128 [O]  XMM9  BLENDPD, "
    O1.0 CCO@ OU128A CCO!  O2.0 CCO@ OU128A 8 + CCO!  
    O3.0 CCO@ OU128B CCO!  O4.0 CCO@ OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTBLENDPD0NM128->XMM9 >BODY CALLPROC
    DROP  
     OU128C CCO@ O1.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O1.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O2.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O2.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testblendpd0nm128->xmm9


HEX
CODE TESTBLENDPD1NM128->XMM0 
  OU128A [O]  XMM0  MOVDQA,
  1 N  OU128B [O]  XMM0  BLENDPD,   
  // 1 N XMM1 XMM0 BLENDPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testblendpd1nm128->xmm0 ( -- )
    ." testing 1 N OM128 [O]  XMM0  BLENDPD, "
    FPD1.0 OU128A CCO!  FPD2.0 OU128A 8 + CCO!  
    FPD3.0 OU128B CCO!  FPD4.0 OU128B 8 + CCO!
         0 OU128C CCO!       0 OU128C 8 + CCO!
    0 ['] TESTBLENDPD1NM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ FPD3.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD3.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD2.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD2.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testblendpd1nm128->xmm0


HEX
CODE TESTCMPPD0NM128->XMM0 
  OU128A [O]  XMM0  MOVDQA,
  0 N  OU128B [O]  XMM0  CMPPD,   
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcmppd0nm128->xmm0 ( -- )
    ." testing 0 N OM128 [O]  XMM0  CMPPD, "
    FPD1.0 OU128A CCO!  FPD2.0 OU128A 8 + CCO!  
    FPD1.0 OU128B CCO!  FPD4.0 OU128B 8 + CCO!
         0 OU128C CCO!       0 OU128C 8 + CCO!
    0 ['] TESTCMPPD0NM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ FFFFFFFFFFFFFFFF = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FFFFFFFFFFFFFFFF U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ 0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testcmppd0nm128->xmm0


HEX
CODE TESTCMPPS0NM128->XMM0 
  OU128A [O]  XMM0  MOVDQA,
  0 N  OU128B [O]  XMM0  CMPPS,   
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcmpps0nm128->xmm0 ( -- )
    ." testing 0 N OM128 [O]  XMM0  CMPPS, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!  FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32! 
    FPS1.0 OU128B CCOU32!  FPS4.0 OU128B 4 + CCOU32!  FPS3.0 OU128B 8 + CCOU32!  FPS6.0 OU128B 0C + CCOU32! 
         0 OU128C CCO!       0 OU128C 8 + CCO!
    0 ['] TESTCMPPS0NM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCOU32@ FFFFFFFF = IF
     ." 1st quarter SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st quarter " FFFFFFFF U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ 0 = IF
     ." 2nd quarter SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd quarter " 0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    OU128C 8 + CCOU32@ FFFFFFFF = IF
     ." 3rd quarter SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd quarter " FFFFFFFF U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN
    OU128C 0C + CCOU32@ 0 = IF
     ." 4th quarter SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th quarter " 0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN
    CR
;

testcmpps0nm128->xmm0


HEX
CODE TESTCMPSD0NM128->XMM0 
  OU128A [O]  XMM0  MOVDQA,
  0 N  OU128B [O]  XMM0  CMPSD2,   
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcmpsd0nm128->xmm0 ( -- )
    ." testing 0 N OM128 [O]  XMM0  CMPSD, "
    FPD1.0 OU128A CCO!  FPD2.0 OU128A 8 + CCO!  
    FPD1.0 OU128B CCO!  FPD3.0 OU128B 8 + CCO!
         0 OU128C CCO!       0 OU128C 8 + CCO!
    0 ['] TESTCMPSD0NM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ FFFFFFFFFFFFFFFF = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FFFFFFFFFFFFFFFF U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD2.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD2.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testcmpsd0nm128->xmm0


HEX
CODE TESTCMPSS0NM128->XMM0 
  OU128A [O]  XMM0  MOVDQA,
  0 N  OU128B [O]  XMM0  CMPSS,   
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcmpss0nm128->xmm0 ( -- )
    ." testing 0 N OM128 [O]  XMM0  CMPSS, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!  FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32! 
    FPS1.0 OU128B CCOU32!  FPS4.0 OU128B 4 + CCOU32!  FPS3.0 OU128B 8 + CCOU32!  FPS6.0 OU128B 0C + CCOU32! 
         0 OU128C CCO!       0 OU128C 8 + CCO!
    0 ['] TESTCMPSS0NM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCOU32@ FFFFFFFF = IF
     ." 1st quarter SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st quarter " FFFFFFFF U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ FPS2.0 = IF
     ." 2nd quarter SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd quarter " FPS2.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    OU128C 8 + CCOU32@ FPS3.0 = IF
     ." 3rd quarter SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd quarter " FPS3.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN
    OU128C 0C + CCOU32@ FPS4.0 = IF
     ." 4th quarter SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th quarter " FPS4.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN
    CR
;

testcmpss0nm128->xmm0


HEX
CODE TESTDIVPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  DIVPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testdivpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  DIVPD, "
    O4.0 CCO@ OU128A CCO!  O8.0 CCO@ OU128A 8 + CCO!  
    O2.0 CCO@ OU128B CCO!  O2.0 CCO@ OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTDIVPDM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ O2.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O2.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O4.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O4.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testdivpdm128->xmm0


HEX
CODE TESTDIVPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  DIVPS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testdivpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  DIVPS, "
    FPS8.0 OU128A CCOU32!  FPS8.0 OU128A 4 + CCOU32!   FPS4.0 OU128A 8 + CCOU32!  FPS6.0 OU128A 0C + CCOU32!  
    FPS2.0 OU128B CCOU32!  FPS4.0 OU128B 4 + CCOU32!   FPS4.0 OU128B 8 + CCOU32!  FPS3.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTDIVPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS4.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS4.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS1.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS1.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS2.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS2.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testdivpsm128->xmm0


HEX
CODE TESTDIVSDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  DIVSD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testdivsdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  DIVSD, "
    O4.0 CCO@ OU128A CCO!  O8.0 CCO@ OU128A 8 + CCO!  
    O2.0 CCO@ OU128B CCO!  O2.0 CCO@ OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTDIVSDM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ O2.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O2.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O8.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O8.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testdivsdm128->xmm0


HEX
CODE TESTDIVSSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  DIVSS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testdivssm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  DIVSS, "
    FPS8.0 OU128A CCOU32!  FPS8.0 OU128A 4 + CCOU32!   FPS4.0 OU128A 8 + CCOU32!  FPS6.0 OU128A 0C + CCOU32!  
    FPS2.0 OU128B CCOU32!  FPS4.0 OU128B 4 + CCOU32!   FPS4.0 OU128B 8 + CCOU32!  FPS3.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTDIVSSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS4.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS4.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS8.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS8.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS4.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS4.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS6.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS6.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testdivssm128->xmm0



HEX
CODE TESTMAXPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MAXPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmaxpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MAXPD, "
    O4.0 CCO@ OU128A CCO!  O2.0 CCO@ OU128A 8 + CCO!  
    O2.0 CCO@ OU128B CCO!  O8.0 CCO@ OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTMAXPDM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ O4.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O4.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O8.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O8.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testmaxpdm128->xmm0


HEX
CODE TESTMAXPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MAXPS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmaxpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MAXPS, "
    FPS8.0 OU128A CCOU32!  FPS8.0 OU128A 4 + CCOU32!   FPS4.0 OU128A 8 + CCOU32!  FPS3.0 OU128A 0C + CCOU32!  
    FPS2.0 OU128B CCOU32!  FPS4.0 OU128B 4 + CCOU32!   FPS4.0 OU128B 8 + CCOU32!  FPS6.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMAXPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS8.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS8.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS8.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS8.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS4.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS4.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS6.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS6.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmaxpsm128->xmm0


HEX
CODE TESTMAXSDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MAXSD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmaxsdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MAXSD, "
    O4.0 CCO@ OU128A CCO!  O2.0 CCO@ OU128A 8 + CCO!  
    O2.0 CCO@ OU128B CCO!  O8.0 CCO@ OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTMAXSDM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ O4.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O4.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O2.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O2.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testmaxsdm128->xmm0


HEX
CODE TESTMAXSSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MAXSS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmaxssm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MAXSS, "
    FPS8.0 OU128A CCOU32!  FPS8.0 OU128A 4 + CCOU32!   FPS4.0 OU128A 8 + CCOU32!  FPS3.0 OU128A 0C + CCOU32!  
    FPS2.0 OU128B CCOU32!  FPS4.0 OU128B 4 + CCOU32!   FPS4.0 OU128B 8 + CCOU32!  FPS6.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMAXSSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS8.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS8.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS8.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS8.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS4.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS4.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS3.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS3.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmaxssm128->xmm0


HEX
CODE TESTMINPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MINPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testminpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MINPD, "
    O4.0 CCO@ OU128A CCO!  O2.0 CCO@ OU128A 8 + CCO!  
    O2.0 CCO@ OU128B CCO!  O8.0 CCO@ OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTMINPDM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ O2.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O2.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O2.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O2.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testminpdm128->xmm0


HEX
CODE TESTMINPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MINPS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testminpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MINPS, "
    FPS8.0 OU128A CCOU32!  FPS8.0 OU128A 4 + CCOU32!   FPS4.0 OU128A 8 + CCOU32!  FPS3.0 OU128A 0C + CCOU32!  
    FPS2.0 OU128B CCOU32!  FPS4.0 OU128B 4 + CCOU32!   FPS4.0 OU128B 8 + CCOU32!  FPS6.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMINPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS2.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS2.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS4.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS4.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS4.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS4.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS3.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS3.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testminpsm128->xmm0


HEX
CODE TESTMINSDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MINSD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testminsdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MINSD, "
    O4.0 CCO@ OU128A CCO!  O2.0 CCO@ OU128A 8 + CCO!  
    O2.0 CCO@ OU128B CCO!  O8.0 CCO@ OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTMINSDM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ O2.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O2.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O2.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O2.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testminsdm128->xmm0


HEX
CODE TESTMINSSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MINSS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testminssm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MINSS, "
    FPS8.0 OU128A CCOU32!  FPS8.0 OU128A 4 + CCOU32!   FPS4.0 OU128A 8 + CCOU32!  FPS3.0 OU128A 0C + CCOU32!  
    FPS2.0 OU128B CCOU32!  FPS4.0 OU128B 4 + CCOU32!   FPS4.0 OU128B 8 + CCOU32!  FPS6.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMINSSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS2.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS2.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS8.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS8.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS4.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS4.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS3.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS3.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testminssm128->xmm0


HEX
CODE TESTMULPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MULPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmulpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MULPD, "
    O4.0 CCO@ OU128A CCO!  O2.0 CCO@ OU128A 8 + CCO!  
    O2.0 CCO@ OU128B CCO!  O2.0 CCO@ OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTMULPDM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ O8.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O8.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O4.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O4.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testmulpdm128->xmm0


HEX
CODE TESTMULPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MULPS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmulpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MULPS, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS2.0 OU128B CCOU32!  FPS4.0 OU128B 4 + CCOU32!   FPS2.0 OU128B 8 + CCOU32!  FPS1.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMULPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS2.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS2.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS8.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS8.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS6.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS6.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS4.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS4.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmulpsm128->xmm0


HEX
CODE TESTMULSDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MULSD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmulsdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MULSD, "
    O4.0 CCO@ OU128A CCO!  O2.0 CCO@ OU128A 8 + CCO!  
    O2.0 CCO@ OU128B CCO!  O3.0 CCO@ OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTMULSDM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ O8.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O8.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O2.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O2.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testmulsdm128->xmm0


HEX
CODE TESTMULSSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MULSS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmulssm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MULSS, "
    FPS4.0 OU128A CCOU32!  FPS8.0 OU128A 4 + CCOU32!   FPS4.0 OU128A 8 + CCOU32!  FPS3.0 OU128A 0C + CCOU32!  
    FPS2.0 OU128B CCOU32!  FPS4.0 OU128B 4 + CCOU32!   FPS4.0 OU128B 8 + CCOU32!  FPS6.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMULSSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS8.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS8.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS8.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS8.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS4.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS4.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS3.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS3.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmulssm128->xmm0



HEX
CODE TESTCVTDQ2PDM128->XMM0
  OU128B [O]  XMM0  CVTDQ2PD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcvtdq2pdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  CVTDQ2PD, "  
    2 OU128B CCOU32!  3 OU128B 4 + CCOU32!
    0 OU128C CCO!  0 OU128C 8 + CCO!
    0 ['] TESTCVTDQ2PDM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@ O2.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O2.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O3.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O3.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testcvtdq2pdm128->xmm0


HEX
CODE TESTCVTDQ2PSM128->XMM0
  OU128B [O]  XMM0  CVTDQ2PS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcvtdq2psm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  CVTDQ2PS, "  
    2 OU128B CCOU32!  3 OU128B 4 + CCOU32!  5 OU128B 8 + CCOU32!  8 OU128B 0C + CCOU32!
    0 OU128C CCO!  0 OU128C 8 + CCO!
    0 ['] TESTCVTDQ2PSM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCOU32@ FPS2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPS2.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 4 + CCOU32@ FPS3.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPS3.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    OU128C 8 + CCOU32@ FPS5.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPS5.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN
    OU128C 0C + CCOU32@ FPS8.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPS8.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN
    CR
;

testcvtdq2psm128->xmm0


HEX
CODE TESTCVTPD2DQM128->XMM0
  OU128B [O]  XMM0  CVTPD2DQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcvtpd2dqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  CVTPD2DQ, "  
    FPD4.0 OU128B CCO!  FPD3.0 OU128B 8 + CCO!
    0 OU128C CCO!  0 OU128C 8 + CCO!
    0 ['] TESTCVTPD2DQM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCOU32@ 4 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " 4 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ 3 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 3 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    CR
;

testcvtpd2dqm128->xmm0


HEX
CODE TESTCVTPD2PIXMM0->ST0
  OU128B [O]  XMM0  MOVDQA,
  XMM0  ST0  CVTPD2PI,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testcvtpd2pixmm0->st0 ( -- )
    ." testing  XMM0  ST0  CVTPD2PI, "  
    FPD4.0 OU128B CCO!  FPD3.0 OU128B 8 + CCO!
    0 OU128C CCO!  0 OU128C 8 + CCO!
    0 ['] TESTCVTPD2PIXMM0->ST0 >BODY CALLPROC
    DROP  
    OU128C CCOU32@ 4 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " 4 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ 3 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 3 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    CR
;

testcvtpd2pixmm0->st0


HEX
CODE TESTCVTPD2PSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  CVTPD2PS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcvtpd2psm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  CVTPD2PS, "  
    FPD2.0 OU128B CCO!  FPD3.0 OU128B 8 + CCO!
    0 OU128C CCO!  0 OU128C 8 + CCO!
    0 ['] TESTCVTPD2PSM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCOU32@ FPS2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPS2.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ FPS3.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPS3.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    CR
;

testcvtpd2psm128->xmm0



HEX
CODE TESTCVTPI2PDST0->XMM0
  OU128B [O]  ST0  MOVQ,
  ST0  XMM0  CVTPI2PD,
  XMM0  OU128C [O]  MOVDQA,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testcvtpi2pdst0->xmm0 ( -- )
    ." testing  ST0  XMM0  CVTPI2PD, "  
    4 OU128B CCOU32!  3 OU128B 4 + CCOU32!
    0 OU128C CCO!     0 OU128C 8 + CCO!
    0 ['] TESTCVTPI2PDST0->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@ FPD4.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD4.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD3.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD3.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testcvtpi2pdst0->xmm0


HEX
CODE TESTCVTPI2PSST0->XMM0
  OU128B [O]  ST0  MOVQ,
  ST0  XMM0  CVTPI2PS,
  XMM0  OU128C [O]  MOVDQA,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testcvtpi2psst0->xmm0 ( -- )
    ." testing  ST0  XMM0  CVTPI2PS, "  
    4 OU128B CCOU32!  3 OU128B 4 + CCOU32!
    0 OU128C CCO!     0 OU128C 8 + CCO!
    0 ['] TESTCVTPI2PSST0->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCOU32@ FPS4.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPS4.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ FPS3.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPS3.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    CR
;

testcvtpi2psst0->xmm0


HEX
CODE TESTCVTPS2DQM128->XMM0
  OU128B [O]  XMM0  CVTPS2DQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcvtps2dqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  CVTPS2DQ, "  
    FPS2.0 OU128B     CCOU32!  FPS3.0 OU128B 04 + CCOU32!  
    FPS6.0 OU128B 8 + CCOU32!  FPS8.0 OU128B 0C + CCOU32!
    0 OU128C CCO!  0 OU128C 8 + CCO!
    0 ['] TESTCVTPS2DQM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCOU32@ 2 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " 2 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ 3 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 3 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    OU128C 8 + CCOU32@ 6 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 6 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN
    OU128C 0C + CCOU32@ 8 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 8 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN
    CR
;

testcvtps2dqm128->xmm0


HEX
CODE TESTCVTPS2PDM128->XMM0
  OU128B [O]  XMM0  CVTPS2PD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcvtps2pdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  CVTPS2PD, "  
    FPS2.0 OU128B     CCOU32!  FPS3.0 OU128B 04 + CCOU32!  
    FPS6.0 OU128B 8 + CCOU32!  FPS8.0 OU128B 0C + CCOU32!
    0 OU128C CCO!  0 OU128C 8 + CCO!
    0 ['] TESTCVTPS2PDM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@ FPD2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD2.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD3.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD3.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testcvtps2pdm128->xmm0


HEX
CODE TESTCVTPS2PIXMM0->ST0
  OU128B [O]  XMM0  MOVDQA,
  XMM0  ST0  CVTPS2PI,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testcvtps2pixmm0->st0 ( -- )
    ." testing  XMM0  ST0  CVTPS2PI, "  
    FPS3.0 OU128B CCOU32!  FPS6.0 OU128B 4 + CCOU32!
         0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTCVTPS2PIXMM0->ST0 >BODY CALLPROC
    DROP  
    OU128C CCOU32@ 3 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " 3 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ 6 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 6 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    CR
;

testcvtps2pixmm0->st0


HEX
CODE TESTCVTSD2SIXMM0->EAX
  OU128B [O]  XMM0  MOVDQA,
  RAX RAX XOR, RAX DEC,
  XMM0  EAX  CVTSD2SI,
  RAX  OU128C [O]  MOV,
  RET,  
END-CODE
  
: testcvtsd2sixmm0->eax ( -- )
    ." testing  XMM0  EAX  CVTSD2SI, "  
    FPD3.0 OU128B CCO!  FPD6.0 OU128B 8 + CCO!
        -1 OU128C CCO!     -1 OU128C 8 + CCO!
    0 ['] TESTCVTSD2SIXMM0->EAX >BODY CALLPROC
    DROP  
    OU128C CCOU32@ 3 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " 3 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ 0 = IF // seems like top half is always set to 0
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    FPD-2.0 OU128B CCO!  FPD6.0 OU128B 8 + CCO!
          0 OU128C CCO!       0 OU128C 8 + CCO!
    0 ['] TESTCVTSD2SIXMM0->EAX >BODY CALLPROC
    DROP  
    OU128C CCOU32@ FFFFFFFE = IF
     ." 2nd test lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for 2nd test lo half " FFFFFFFE U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ 0 = IF
     ." 2nd test hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd test hi half " 0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN 

    CR
;

testcvtsd2sixmm0->eax


HEX
CODE TESTCVTSD2SIXMM0->RAX
  OU128B [O]  XMM0  MOVDQA,
  RAX RAX XOR,  RAX DEC,
  XMM0  RAX  CVTSD2SI,
  RAX  OU128C [O]  MOV,
  RET,  
END-CODE
  
: testcvtsd2sixmm0->rax ( -- )
    ." testing  XMM0  RAX  CVTSD2SI, "  
    FPD3.0 OU128B CCO!  FPD6.0 OU128B 8 + CCO!
        -1 OU128C CCO!      -1 OU128C 8 + CCO!
    0 ['] TESTCVTSD2SIXMM0->RAX >BODY CALLPROC
    DROP  
    OU128C CCO@ 3 = IF
     ." SUCCESS! "
    ELSE
      ." FAIL! Expected " 3 U.  
      ." , got " OU128C CCO@ U.
    THEN
    CR
;

testcvtsd2sixmm0->rax


HEX
CODE TESTCVTSS2SIXMM0->EAX
  OU128B [O]  XMM0  MOVDQA,
  RAX RAX XOR,  RAX DEC,
  XMM0  EAX  CVTSS2SI,
  RAX  OU128C [O]  MOV,
  RET,  
END-CODE
  
: testcvtss2sixmm0->eax ( -- )
    ." testing  XMM0  EAX  CVTSS2SI, "  
    FPS3.0 OU128B CCOU32!  FPS6.0 OU128B 4 + CCOU32!
        -1 OU128C CCO!     -1 OU128C 8 + CCO!
    0 ['] TESTCVTSS2SIXMM0->EAX >BODY CALLPROC
    DROP  
    OU128C CCOU32@ 3 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " 3 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ 0 = IF  // seems like top half is always set to 0
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    FPS-2.0 OU128B CCOU32!  FPS6.0 OU128B 4 + CCOU32!
          0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTCVTSS2SIXMM0->EAX >BODY CALLPROC
    DROP  
    OU128C CCOU32@ FFFFFFFE = IF
     ." 2nd test lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for 2nd test lo half " FFFFFFFE U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ 0 = IF
     ." 2nd test hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd test hi half " 0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    CR
;

testcvtss2sixmm0->eax


HEX
CODE TESTCVTSS2SIXMM0->RAX
  OU128B [O]  XMM0  MOVDQA,
  RAX RAX XOR,   RAX DEC,
  XMM0  RAX  CVTSS2SI,
  RAX  OU128C [O]  MOV,
  RET,  
END-CODE
  
: testcvtss2sixmm0->rax ( -- )
    ." testing  XMM0  RAX  CVTSS2SI, "  
    FPS3.0 OU128B CCOU32!  FPS6.0 OU128B 4 + CCOU32!
        -1 OU128C CCO!     -1 OU128C 8 + CCO!
    0 ['] TESTCVTSS2SIXMM0->RAX >BODY CALLPROC
    DROP  
    OU128C CCO@ 3 = IF
     ." SUCCESS! "
    ELSE
      ." FAIL! Expected " 3 U.  
      ." , got " OU128C CCO@ U.
    THEN
    CR
;

testcvtss2sixmm0->rax


HEX
CODE TESTCVTSI2SDEAX->XMM0
  OU128C [O]  XMM0  MOVDQA,  // to clear xmm0... the hard way :-)
  OU128B [O]  RAX  MOV, // assumes little endian
  EAX  XMM0  CVTSI2SD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcvtsi2sdeax->xmm0 ( -- )
    ." testing  EAX  XMM0  CVTSI2SD, "  
    -2 OU128B CCOU32!  0 OU128B 4 + CCOU32!
     0 OU128C CCO!     0 OU128C 8 + CCO!
    0 ['] TESTCVTSI2SDEAX->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@ FPD-2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." lo half FAIL! Expected " FPD-2.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ 0 = IF
     ."  hi half SUCCESS! "
    ELSE
      ."  hi half FAIL! Expected " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testcvtsi2sdeax->xmm0



HEX
CODE TESTCVTSI2SDRAX->XMM0
  OU128C [O]  XMM0  MOVDQA,  // to clear xmm0... the hard way :-)
  OU128B [O]  RAX  MOV, 
  RAX  XMM0  CVTSI2SD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcvtsi2sdrax->xmm0 ( -- )
    ." testing  RAX  XMM0  CVTSI2SD, "  
    -2 OU128B CCO!  0 OU128B 8 + CCO!
     0 OU128C CCO!  0 OU128C 8 + CCO!
    0 ['] TESTCVTSI2SDRAX->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@ FPD-2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." lo half FAIL! Expected " FPD-2.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ 0 = IF
     ."  hi half SUCCESS! "
    ELSE
      ."  hi half FAIL! Expected " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testcvtsi2sdrax->xmm0


HEX
CODE TESTCVTSI2SSRAX->XMM0
  OU128C [O]  XMM0  MOVDQA,  // to clear xmm0... the hard way :-)
  OU128B [O]  RAX  MOV, 
  RAX  XMM0  CVTSI2SS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcvtsi2ssrax->xmm0 ( -- )
    ." testing  RAX  XMM0  CVTSI2SS, "  
    -2 OU128B CCO!  0 OU128B 8 + CCO!
     0 OU128C CCO!  0 OU128C 8 + CCO!
    0 ['] TESTCVTSI2SSRAX->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCOU32@ FPS-2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." lo half FAIL! Expected " FPS-2.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ 0 = IF
     ."  hi half SUCCESS! "
    ELSE
      ."  hi half FAIL! Expected " 0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    CR
;

testcvtsi2ssrax->xmm0



HEX
CODE TESTCVTSD2SSM128->XMM0
  OU128B [O]  XMM0  CVTSD2SS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcvtsd2ssm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  CVTSD2SS, "  
    FPD2.0 OU128B CCO!  FPD3.0 OU128B 8 + CCO!  
    0 OU128C CCO!  0 OU128C 8 + CCO!
    0 ['] TESTCVTSD2SSM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCOU32@ FPS2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPS2.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ 0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    CR
;

testcvtsd2ssm128->xmm0


HEX
CODE TESTCVTSS2SDM128->XMM0
  OU128B [O]  XMM0  CVTSS2SD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcvtss2sdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  CVTSS2SD, "  
    FPS2.0 OU128B CCOU32!  FPS3.0 OU128B 4 + CCOU32!  
    0 OU128C CCO!  0 OU128C 8 + CCO!
    0 ['] TESTCVTSS2SDM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@ FPD2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD2.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ 0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testcvtss2sdm128->xmm0


HEX
CODE TESTCVTTPD2DQM128->XMM0
  OU128B [O]  XMM0  CVTTPD2DQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcvttpd2dqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  CVTTPD2DQ, "  
    FPD1.5 OU128B CCO!  FPD3.0 OU128B 8 + CCO!
    0 OU128C CCO!  0 OU128C 8 + CCO!
    0 ['] TESTCVTTPD2DQM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCOU32@ 1 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " 1 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ 3 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 3 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    CR
;

testcvttpd2dqm128->xmm0


HEX
CODE TESTCVTTPD2PIXMM0->ST0
  OU128B [O]  XMM0  MOVDQA,
  XMM0  ST0  CVTTPD2PI,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testcvttpd2pixmm0->st0 ( -- )
    ." testing  XMM0  ST0  CVTTPD2PI, "  
    FPD1.5 OU128B CCO!  FPD3.0 OU128B 8 + CCO!
    0 OU128C CCO!  0 OU128C 8 + CCO!
    0 ['] TESTCVTTPD2PIXMM0->ST0 >BODY CALLPROC
    DROP  
    OU128C CCOU32@ 1 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " 1 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ 3 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 3 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    CR
;

testcvttpd2pixmm0->st0


HEX
CODE TESTCVTTPS2DQM128->XMM0
  OU128B [O]  XMM0  CVTTPS2DQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcvttps2dqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  CVTTPS2DQ, "  
    FPS1.5 OU128B     CCOU32!  FPS3.0 OU128B 04 + CCOU32!  
    FPS6.0 OU128B 8 + CCOU32!  FPS8.0 OU128B 0C + CCOU32!
    0 OU128C CCO!  0 OU128C 8 + CCO!
    0 ['] TESTCVTTPS2DQM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCOU32@ 1 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " 1 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ 3 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 3 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    OU128C 8 + CCOU32@ 6 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 6 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN
    OU128C 0C + CCOU32@ 8 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 8 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN
    CR
;

testcvttps2dqm128->xmm0


HEX
CODE TESTCVTTPS2PIXMM0->ST0
  OU128B [O]  XMM0  MOVDQA,
  XMM0  ST0  CVTTPS2PI,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testcvttps2pixmm0->st0 ( -- )
    ." testing  XMM0  ST0  CVTTPS2PI, "  
    FPS1.5 OU128B CCOU32!  FPS6.0 OU128B 4 + CCOU32!
         0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTCVTTPS2PIXMM0->ST0 >BODY CALLPROC
    DROP  
    OU128C CCOU32@ 1 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " 1 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ 6 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 6 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    CR
;

testcvttps2pixmm0->st0


HEX
CODE TESTCVTTSD2SIXMM0->RAX
  OU128B [O]  XMM0  MOVDQA,
  RAX RAX XOR,  RAX DEC,
  XMM0  RAX  CVTTSD2SI,
  RAX  OU128C [O]  MOV,
  RET,  
END-CODE
  
: testcvttsd2sixmm0->rax ( -- )
    ." testing  XMM0  RAX  CVTTSD2SI, "  
    FPD1.5 OU128B CCO!  FPD6.0 OU128B 8 + CCO!
        -1 OU128C CCO!      -1 OU128C 8 + CCO!
    0 ['] TESTCVTTSD2SIXMM0->RAX >BODY CALLPROC
    DROP  
    OU128C CCO@ 1 = IF
     ." SUCCESS! "
    ELSE
      ." FAIL! Expected " 1 U.  
      ." , got " OU128C CCO@ U.
    THEN
    CR
;

testcvttsd2sixmm0->rax


HEX
CODE TESTCVTTSS2SIXMM0->RAX
  OU128B [O]  XMM0  MOVDQA,
  RAX RAX XOR,   RAX DEC,
  XMM0  RAX  CVTTSS2SI,
  RAX  OU128C [O]  MOV,
  RET,  
END-CODE
  
: testcvttss2sixmm0->rax ( -- )
    ." testing  XMM0  RAX  CVTTSS2SI, "  
    FPS1.5 OU128B CCOU32!  FPS6.0 OU128B 4 + CCOU32!
        -1 OU128C CCO!     -1 OU128C 8 + CCO!
    0 ['] TESTCVTTSS2SIXMM0->RAX >BODY CALLPROC
    DROP  
    OU128C CCO@ 1 = IF
     ." SUCCESS! "
    ELSE
      ." FAIL! Expected " 1 U.  
      ." , got " OU128C CCO@ U.
    THEN
    CR
;

testcvttss2sixmm0->rax


HEX
CODE TESTHADDPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  HADDPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testhaddpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  HADDPD, "
    O1.0 CCO@ OU128A CCO!  O3.0 CCO@ OU128A 8 + CCO!  
    O2.0 CCO@ OU128B CCO!  O4.0 CCO@ OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTHADDPDM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ O4.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O4.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O6.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O6.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testhaddpdm128->xmm0


HEX
CODE TESTHADDPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  HADDPS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testhaddpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  HADDPS, "
    FPS2.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS5.0 OU128A 0C + CCOU32!  
    FPS1.0 OU128B CCOU32!  FPS1.0 OU128B 4 + CCOU32!   FPS1.0 OU128B 8 + CCOU32!  FPS2.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTHADDPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS4.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS4.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS8.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS8.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS2.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS2.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS3.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS3.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testhaddpsm128->xmm0


HEX
CODE TESTHSUBPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  HSUBPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testhsubpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  HSUBPD, "
    O3.0 CCO@ OU128A CCO!  O1.0 CCO@ OU128A 8 + CCO!  
    O5.0 CCO@ OU128B CCO!  O2.0 CCO@ OU128B 8 + CCO!
            0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTHSUBPDM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ O2.0 CCO@ = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " O2.0 CCO@ U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ O3.0 CCO@ = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " O3.0 CCO@ U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testhsubpdm128->xmm0


HEX
CODE TESTHSUBPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  HSUBPS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testhsubpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  HSUBPS, "
    FPS3.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS5.0 OU128A 8 + CCOU32!  FPS3.0 OU128A 0C + CCOU32!  
    FPS4.0 OU128B CCOU32!  FPS1.0 OU128B 4 + CCOU32!   FPS5.0 OU128B 8 + CCOU32!  FPS1.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTHSUBPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS1.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS1.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS3.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS3.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS4.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS4.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testhsubpsm128->xmm0


HEX
CODE TESTMOVDQ2QXMM0->ST0
  OU128B [O]  XMM0  MOVDQA,
  XMM0  ST0  MOVDQ2Q,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testmovdq2qxmm0->st0 ( -- )
    ." testing  XMM0  ST0  MOVDQ2Q, "  
    FPD1.5 OU128B CCO!  0 OU128B 8 + CCO!
         0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTMOVDQ2QXMM0->ST0 >BODY CALLPROC
    DROP  
    OU128C CCO@ FPD1.5 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD1.5 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ 0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testmovdq2qxmm0->st0


HEX
CODE TESTMOVDQUM128->XMM0
  OU128B [O]  XMM0  MOVDQU,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovdqum128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MOVDQU, "
    FPS3.0 OU128B CCOU32!  FPS2.0 OU128B 4 + CCOU32!   FPS5.0 OU128B 8 + CCOU32!  FPS3.0 OU128B 0C + CCOU32!  
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMOVDQUM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS3.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS3.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS5.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS5.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS3.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS3.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmovdqum128->xmm0


HEX
CODE TESTMOVDQUXMM0->M128
  OU128B [O]  XMM0  MOVDQA,
  XMM0  OU128C [O]  MOVDQU,
  RET,  
END-CODE
  
: testmovdquxmm0->m128 ( -- )
    ." testing  XMM0  OM128 [O]  MOVDQU, "
    FPS3.0 OU128B CCOU32!  FPS2.0 OU128B 4 + CCOU32!   FPS5.0 OU128B 8 + CCOU32!  FPS3.0 OU128B 0C + CCOU32!  
         0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTMOVDQUXMM0->M128 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS3.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS3.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS5.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS5.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS3.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS3.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmovdquxmm0->m128


HEX
CODE TESTMOVAPDM128->XMM0
  OU128B [O]  XMM0  MOVAPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovapdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MOVAPD, "
    FPD3.0 OU128B CCO!     FPD2.0 OU128B 8 + CCO!     
         0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTMOVAPDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FPD3.0 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FPD3.0 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FPD2.0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FPD2.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testmovapdm128->xmm0


HEX  
: testmovapdm128->xmm0b ( -- )
    ." testing OM128 [O]  XMM0  MOVAPD,  with binary values"
    -1 OU128B CCO!     -1 1- OU128B 8 + CCO!     
         0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTMOVAPDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ -1 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  -1 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ -1 1- = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " -1 1- U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testmovapdm128->xmm0b


HEX
CODE TESTMOVAPDXMM0->M128
  OU128B [O]  XMM0  MOVDQA,
  XMM0  OU128C [O]  MOVAPD,
  RET,  
END-CODE
  
: testmovapdxmm0->m128 ( -- )
    ." testing  OM128 [O]  XMM0  MOVAPD, "
    FPD3.0 OU128B CCO!     FPD2.0 OU128B 8 + CCO!     
         0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTMOVAPDXMM0->M128 >BODY CALLPROC
    DROP  

    OU128C CCO@ FPD3.0 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FPD3.0 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FPD2.0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FPD2.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testmovapdxmm0->m128


HEX
CODE TESTMOVAPSM128->XMM0
  OU128B [O]  XMM0  MOVAPS,
  XMM0  OU128C [O]  MOVDQU,
  RET,  
END-CODE
  
: testmovapsm128->xmm0 ( -- )
    ." testing  OM128 [O]  XMM0  MOVAPS, "
    FPS3.0 OU128B CCOU32!  FPS2.0 OU128B 4 + CCOU32!   FPS5.0 OU128B 8 + CCOU32!  FPS3.0 OU128B 0C + CCOU32!  
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMOVAPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS3.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS3.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS5.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS5.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS3.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS3.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmovapsm128->xmm0


HEX
CODE TESTMOVAPSXMM0->M128
  OU128B [O]  XMM0  MOVDQU,
  XMM0  OU128C [O]  MOVAPS,
  RET,  
END-CODE
  
: testmovapsxmm0->m128 ( -- )
    ." testing  XMM0   OM128 [O]  MOVAPS, "
    FPS3.0 OU128B CCOU32!  FPS2.0 OU128B 4 + CCOU32!   FPS5.0 OU128B 8 + CCOU32!  FPS3.0 OU128B 0C + CCOU32!  
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMOVAPSXMM0->M128 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS3.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS3.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS5.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS5.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS3.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS3.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmovapsxmm0->m128


HEX
CODE TESTMOVDDUPM128->XMM0
  OU128B [O]  XMM0  MOVDDUP,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovddupm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MOVDDUP, "
    FPD3.0 OU128B CCO!     FPD2.0 OU128B 8 + CCO!     
         0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTMOVDDUPM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FPD3.0 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FPD3.0 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FPD3.0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FPD3.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testmovddupm128->xmm0


HEX
CODE TESTMOVHLPSXMM0->XMM1
  OU128B [O]  XMM0  MOVDQA,
  OU128C [O]  XMM1  MOVDQA,
  XMM0  XMM1  MOVHLPS,
  XMM1  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovhlpsxmm0->xmm1 ( -- )
    ." testing  XMM0  XMM1  MOVHLPS, "
    FPS3.0 OU128B     CCOU32!   FPS2.0 OU128B 04 + CCOU32!  
    FPS1.0 OU128B 8 + CCOU32!   FPS4.0 OU128B 0C + CCOU32!        
         0 OU128C CCO!               0 OU128C 8 + CCO!
    0 ['] TESTMOVHLPSXMM0->XMM1 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS1.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS1.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS4.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 "  FPS4.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ 0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 "  0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ 0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 "  0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmovhlpsxmm0->xmm1


HEX
CODE TESTCOMISDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  COMISD,
  EFLAGS->AH,
  RAX   OU128D [O]  MOV,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcomisdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  COMISD, with 3.0 3.0 "
    FPD3.0 OU128A CCO!  FPD1.0 OU128A 8 + CCO!  
    FPD3.0 OU128B CCO!  FPD2.0 OU128B 8 + CCO!
         0 OU128C CCO!       0 OU128C 8 + CCO!
    0 ['] TESTCOMISDM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@  FPD3.0  = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD3.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD1.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD1.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    OU128D CCO@  4100 AND  4000 = IF  // bit 8 = carry flag, bit 14 = zero flag
      ."  got correct flags SUCCESS! "
    ELSE
      ." FAIL! Expected for flags " 4000 U.
      ." , got " OU128D CCO@  4000 AND U.
    THEN   
    CR
    
    ." testing OM128 [O]  XMM0  COMISD, with 3.0 4.0 "
    FPD3.0 OU128A CCO!  FPD1.0 OU128A 8 + CCO!  
    FPD2.0 OU128B CCO!  FPD2.0 OU128B 8 + CCO!
         0 OU128C CCO!       0 OU128C 8 + CCO!
    0 ['] TESTCOMISDM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@  FPD3.0  = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD3.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD1.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD1.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    OU128D CCO@  0100 AND  00 = IF  // bit 8 = carry flag, bit 14 = zero flag
      ."  got correct flags SUCCESS! "
    ELSE
      ." FAIL! Expected for flags " 0000 U.
      ." , got " OU128D CCO@  0000 AND U.
    THEN   
    CR
;

testcomisdm128->xmm0


HEX
CODE TESTCOMISSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  COMISS,
  EFLAGS->AH,
  RAX   OU128D [O]  MOV,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testcomissm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  COMISS, with 3.0 3.0 "
    FPS3.0 OU128A CCOU32!  FPS1.0 OU128A 4 + CCOU32!  
    FPS3.0 OU128B CCOU32!  FPS2.0 OU128B 4 + CCOU32!
         0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTCOMISSM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCOU32@  FPS3.0  = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPS2.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ FPS1.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPS1.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    OU128D CCO@  4100 AND  4000 = IF  // bit 8 = carry flag, bit 14 = zero flag
      ."  got correct flags SUCCESS! "
    ELSE
      ." FAIL! Expected for flags " 4000 U.
      ." , got " OU128D CCO@  4000 AND U.
    THEN   
    CR
    
    ." testing OM128 [O]  XMM0  COMISS, with 3.0 4.0 "
    FPS3.0 OU128A CCOU32!  FPS1.0 OU128A 4 + CCOU32!  
    FPS2.0 OU128B CCOU32!  FPS2.0 OU128B 4 + CCOU32!
         0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTCOMISSM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCOU32@  FPS3.0  = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPS3.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN
    OU128C 4 + CCOU32@ FPS1.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPS1.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN
    OU128D CCO@  0100 AND  00 = IF  // bit 8 = carry flag, bit 14 = zero flag
      ."  got correct flags SUCCESS! "
    ELSE
      ." FAIL! Expected for flags " 0000 U.
      ." , got " OU128D CCO@  0000 AND U.
    THEN   
    CR
;

testcomissm128->xmm0


HEX
CODE TESTLZCNT[R]->EAX
  RAX RAX XOR,
  VARY N  RDI  MOV,
  RDI [R] EAX LZCNT,
  RET,
END-CODE

: testlzcnt[r]->eax ( -- )
    ." testing LZCNT[R]->EAX for 40000000 "
    40000000 VARY !
    0 ['] TESTLZCNT[R]->EAX >BODY CALLPROC VARZ ! 
    VARZ @ 1 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1 U. 
      ." , got " VARZ @ U.
    THEN
    CR

    ." testing LZCNT[R]->EAX for 1 "
    1 VARY !
    0 ['] TESTLZCNT[R]->EAX >BODY CALLPROC VARZ ! 
    VARZ @ 1F =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1F U. 
      ." , got " VARZ @ U.
    THEN
    CR

    ." testing LZCNT[R]->EAX for 0 "
    0 VARY !
    0 ['] TESTLZCNT[R]->EAX >BODY CALLPROC VARZ ! 
    VARZ @ 20 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 20 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testlzcnt[r]->eax


HEX
CODE TESTLZCNT[R]->RAX
  VARY N  RDI  MOV,
  RDI [R] RAX LZCNT,
  RET,
END-CODE

: testlzcnt[r]->rax ( -- )
    ." testing LZCNT[R]->RAX for 4000000000000000 "
    4000000000000000 VARY !
    0 ['] TESTLZCNT[R]->RAX >BODY CALLPROC VARZ ! 
    VARZ @ 1 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1 U. 
      ." , got " VARZ @ U.
    THEN
    CR

    ." testing LZCNT[R]->RAX for 1 "
    1 VARY !
    0 ['] TESTLZCNT[R]->RAX >BODY CALLPROC VARZ ! 
    VARZ @ 3F =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 3F U. 
      ." , got " VARZ @ U.
    THEN
    CR

    ." testing LZCNT[R]->RAX for 0 "
    0 VARY !
    0 ['] TESTLZCNT[R]->RAX >BODY CALLPROC VARZ ! 
    VARZ @ 40 =
    IF
      ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 40 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testlzcnt[r]->rax


HEX
CODE TESTSQRTPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  SQRTPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testsqrtpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  SQRTPD, "
    FPD1.0 OU128A CCO! FPD2.0 OU128A 8 + CCO!  
    FPD4.0 OU128B CCO! FPD9.0 OU128B 8 + CCO!
         0 OU128C CCO!      0 OU128C 8 + CCO!
    0 ['] TESTSQRTPDM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@ FPD2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD2.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD3.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD3.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testsqrtpdm128->xmm0


HEX
CODE TESTSQRTPDM128->XMM9    // XMM9 uses REX
  OU128A [O]  XMM9  MOVDQA,
  OU128B [O]  XMM9  SQRTPD,   
  XMM9  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testsqrtpdm128->xmm9 ( -- )
    ." testing OM128 [O]  XMM9  SQRTPD, "
    FPD1.0 OU128A CCO!  FPD5.0 OU128A 8 + CCO!  
    FPD9.0 OU128B CCO!  FPD4.0 OU128B 8 + CCO!
         0 OU128C CCO!       0 OU128C 8 + CCO!
    0 ['] TESTSQRTPDM128->XMM9 >BODY CALLPROC
    DROP  
     OU128C CCO@ FPD3.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD3.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD2.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD2.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testsqrtpdm128->xmm9


HEX
CODE TESTSQRTSDM64->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  SQRTSD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testsqrtsdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  SQRTSD, "
    FPD1.0 OU128A CCO!  FPD5.0 OU128A 8 + CCO!  
    FPD4.0 OU128B CCO!  FPD9.0 OU128B 8 + CCO!
         0 OU128C CCO!       0 OU128C 8 + CCO!
    0 ['] TESTSQRTSDM64->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ FPD2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD2.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD5.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD5.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testsqrtsdm128->xmm0


HEX
CODE TESTSQRTPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  SQRTPS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testsqrtpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  SQRTPS, "
    FPS3.0 OU128A CCOU32!  FPS3.0 OU128A 4 + CCOU32!   FPS2.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS1.0 OU128B CCOU32!  FPS4.0 OU128B 4 + CCOU32!   FPS9.0 OU128B 8 + CCOU32!  FPS4.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTSQRTPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS1.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS1.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS3.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS3.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS2.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS2.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testsqrtpsm128->xmm0


HEX
CODE TESTSQRTSSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  SQRTSS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testsqrtssm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  SQRTSS, "
    FPS1.0 OU128A CCOU32!  FPS5.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS4.0 OU128B CCOU32!  FPS1.0 OU128B 4 + CCOU32!   FPS1.0 OU128B 8 + CCOU32!  FPS1.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTSQRTSSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS2.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS2.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS5.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS5.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS3.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS3.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS4.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS4.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testsqrtssm128->xmm0



HEX
CODE TESTSUBPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  SUBPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testsubpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  SUBPD, "
    FPD5.0 OU128A CCO! FPD4.0 OU128A 8 + CCO!  
    FPD3.0 OU128B CCO! FPD1.0 OU128B 8 + CCO!
         0 OU128C CCO!      0 OU128C 8 + CCO!
    0 ['] TESTSUBPDM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@ FPD2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD2.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD3.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD3.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testsubpdm128->xmm0


HEX
CODE TESTSUBPDM128->XMM9    // XMM9 uses REX
  OU128A [O]  XMM9  MOVDQA,
  OU128B [O]  XMM9  SUBPD,   
  XMM9  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testsubpdm128->xmm9 ( -- )
    ." testing OM128 [O]  XMM9  SUBPD, "
    FPD5.0 OU128A CCO!  FPD6.0 OU128A 8 + CCO!  
    FPD2.0 OU128B CCO!  FPD4.0 OU128B 8 + CCO!
         0 OU128C CCO!       0 OU128C 8 + CCO!
    0 ['] TESTSUBPDM128->XMM9 >BODY CALLPROC
    DROP  
     OU128C CCO@ FPD3.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD3.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD2.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD2.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testsubpdm128->xmm9


HEX
CODE TESTSUBSDM64->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  SUBSD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testsubsdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  SUBSD, "
    FPD5.0 OU128A CCO!  FPD5.0 OU128A 8 + CCO!  
    FPD3.0 OU128B CCO!  FPD9.0 OU128B 8 + CCO!
         0 OU128C CCO!       0 OU128C 8 + CCO!
    0 ['] TESTSUBSDM64->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ FPD2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD2.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD5.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD5.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testsubsdm128->xmm0


HEX
CODE TESTSUBPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  SUBPS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testsubpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  SUBPS, "
    FPS3.0 OU128A CCOU32!  FPS5.0 OU128A 4 + CCOU32!   FPS5.0 OU128A 8 + CCOU32!  FPS6.0 OU128A 0C + CCOU32!  
    FPS2.0 OU128B CCOU32!  FPS3.0 OU128B 4 + CCOU32!   FPS2.0 OU128B 8 + CCOU32!  FPS4.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTSUBPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS1.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS1.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS3.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS3.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS2.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS2.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testsubpsm128->xmm0


HEX
CODE TESTSUBSSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  SUBSS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testsubssm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  SUBSS, "
    FPS3.0 OU128A CCOU32!  FPS5.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS1.0 OU128B CCOU32!  FPS1.0 OU128B 4 + CCOU32!   FPS1.0 OU128B 8 + CCOU32!  FPS1.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTSUBSSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS2.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS2.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS5.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS5.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS3.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS3.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS4.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS4.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testsubssm128->xmm0


HEX
CODE TESTUNPCKHPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  UNPCKHPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testunpckhpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  UNPCKHPD, "
    FPD5.0 OU128A CCO! FPD4.0 OU128A 8 + CCO!  
    FPD3.0 OU128B CCO! FPD1.0 OU128B 8 + CCO!
         0 OU128C CCO!      0 OU128C 8 + CCO!
    0 ['] TESTUNPCKHPDM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@ FPD4.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD4.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD1.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD1.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testunpckhpdm128->xmm0


HEX
CODE TESTUNPCKHPDM128->XMM9    // XMM9 uses REX
  OU128A [O]  XMM9  MOVDQA,
  OU128B [O]  XMM9  UNPCKHPD,   
  XMM9  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testunpckhpdm128->xmm9 ( -- )
    ." testing OM128 [O]  XMM9  UNPCKHPD, "
    FPD5.0 OU128A CCO!  FPD6.0 OU128A 8 + CCO!  
    FPD2.0 OU128B CCO!  FPD4.0 OU128B 8 + CCO!
         0 OU128C CCO!       0 OU128C 8 + CCO!
    0 ['] TESTUNPCKHPDM128->XMM9 >BODY CALLPROC
    DROP  
     OU128C CCO@ FPD6.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD6.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD4.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD4.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testunpckhpdm128->xmm9



HEX
CODE TESTUNPCKHPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  UNPCKHPS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testunpckhpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  UNPCKHPS, "
    FPS3.0 OU128A CCOU32!  FPS5.0 OU128A 4 + CCOU32!   FPS5.0 OU128A 8 + CCOU32!  FPS6.0 OU128A 0C + CCOU32!  
    FPS2.0 OU128B CCOU32!  FPS8.0 OU128B 4 + CCOU32!   FPS1.0 OU128B 8 + CCOU32!  FPS4.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTUNPCKHPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS5.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS5.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS1.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS1.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS6.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS6.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS4.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS4.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testunpckhpsm128->xmm0


HEX
CODE TESTUNPCKLPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  UNPCKLPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testunpcklpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  UNPCKLPD, "
    FPD5.0 OU128A CCO! FPD4.0 OU128A 8 + CCO!  
    FPD3.0 OU128B CCO! FPD1.0 OU128B 8 + CCO!
         0 OU128C CCO!      0 OU128C 8 + CCO!
    0 ['] TESTUNPCKLPDM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@ FPD5.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD5.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD3.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD3.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testunpcklpdm128->xmm0


HEX
CODE TESTUNPCKLPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  UNPCKLPS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testunpcklpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  UNPCKLPS, "
    FPS3.0 OU128A CCOU32!  FPS5.0 OU128A 4 + CCOU32!   FPS5.0 OU128A 8 + CCOU32!  FPS6.0 OU128A 0C + CCOU32!  
    FPS2.0 OU128B CCOU32!  FPS8.0 OU128B 4 + CCOU32!   FPS2.0 OU128B 8 + CCOU32!  FPS4.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTUNPCKLPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS3.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS3.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS5.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS5.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS8.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS8.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testunpcklpsm128->xmm0


HEX
CODE TESTXORPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  XORPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testxorpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  XORPD, "
    0F0F0F0F0F0F0F0F OU128A CCO! FFFF0000FFFF0000 OU128A 8 + CCO!  
    0000FFFF0000FFFF OU128B CCO! FFFFFFFF00000000 OU128B 8 + CCO!
                   0 OU128C CCO!                0 OU128C 8 + CCO!
    0 ['] TESTXORPDM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@ 0F0FF0F00F0FF0F0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " 0F0FF0F00F0FF0F0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ 0000FFFFFFFF0000 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 0000FFFFFFFF0000 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testxorpdm128->xmm0


HEX
CODE TESTXORPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  XORPS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testxorpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  XORPS, "
    FFFF0000 OU128A CCOU32!  F0F0F0F0 OU128A 4 + CCOU32!   FFFFFFFF OU128A 8 + CCOU32!  F00FF00F OU128A 0C + CCOU32!  
    FF00FF00 OU128B CCOU32!  FF0000FF OU128B 4 + CCOU32!   F0F00F0F OU128B 8 + CCOU32!  0FF0F00F OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTXORPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ 00FFFF00 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  00FFFF00 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ 0FF0F00F = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " 0FF0F00F U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ 0F0FF0F0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " 0F0FF0F0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FFFF0000 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FFFF0000 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testxorpsm128->xmm0


HEX
CODE TESTMOVHPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MOVHPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovhpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MOVHPD, "
    FPD2.0 OU128A CCO! FPD5.0 OU128A 8 + CCO!  
    FPD1.0 OU128B CCO! FPD3.0 OU128B 8 + CCO!
         0 OU128C CCO!      0 OU128C 8 + CCO!
    0 ['] TESTMOVHPDM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@ FPD2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD2.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD1.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD1.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testmovhpdm128->xmm0


HEX
CODE TESTMOVHPDXMM0->M128
  OU128A [O]  XMM0  MOVDQA,
  XMM0  OU128B [O]  MOVHPD,   // the documentation is a bit confusing but
                              //  what happens is the high 64 bits of xmm go to the lo 64 bits of the mem location
                              //  shouldn't this instruction have a different name?
  // XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovhpdxmm0->m128 ( -- )
    ." testing  XMM0  OM128 [O]  MOVHPD, "
    FPD2.0 OU128A CCO! FPD5.0 OU128A 8 + CCO!  
    FPD1.0 OU128B CCO! FPD3.0 OU128B 8 + CCO!
    //      0 OU128C CCO!      0 OU128C 8 + CCO!
    0 ['] TESTMOVHPDXMM0->M128 >BODY CALLPROC
    DROP  
    OU128B CCO@ FPD5.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD5.0 U.  
      ." , got " OU128B CCO@ U.
    THEN
    OU128B 8 + CCO@ FPD3.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD3.0 U.  
      ." , got " OU128B 8 + CCO@ U.
    THEN
    CR
;

testmovhpdxmm0->m128



HEX
CODE TESTMOVHPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MOVHPS,  // how is this instruction different MOVHPD?
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovhpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MOVHPS, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS5.0 OU128B CCOU32!  FPS6.0 OU128B 4 + CCOU32!   FPS8.0 OU128B 8 + CCOU32!  FPS9.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMOVHPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS1.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS1.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS5.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS5.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS6.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS6.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmovhpsm128->xmm0


HEX
CODE TESTMOVHPSXMM0->M128
  OU128A [O]  XMM0  MOVDQA,
  XMM0  OU128B [O]  MOVHPS,    // the documentation is a bit confusing but
                              //  what happens is the high 64 bits of xmm go to the lo 64 bits of the mem location
                              //  shouldn't this instruction have a different name?
  // XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovhpsxmm0->m128 ( -- )
    ." testing XMM0  OM128 [O]  MOVHPS, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS5.0 OU128B CCOU32!  FPS6.0 OU128B 4 + CCOU32!   FPS8.0 OU128B 8 + CCOU32!  FPS9.0 OU128B 0C + CCOU32!
    //     0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMOVHPSXMM0->M128 >BODY CALLPROC
    DROP  

    OU128B CCOU32@ FPS3.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS3.0 U.  
      ." , got " OU128B CCOU32@ U.
    THEN

    OU128B 4 + CCOU32@ FPS4.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS4.0 U.  
      ." , got " OU128B 4 + CCOU32@ U.
    THEN

    OU128B 8 + CCOU32@ FPS8.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS8.0 U.  
      ." , got " OU128B 8 + CCOU32@ U.
    THEN

    OU128B 0C + CCOU32@ FPS9.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS9.0 U.  
      ." , got " OU128B 0C + CCOU32@ U.
    THEN

    CR
;

testmovhpsxmm0->m128


HEX
CODE TESTMOVLHPSXMM1->XMM0
  OU128A [O]  XMM1  MOVDQA,
  OU128B [O]  XMM0  MOVDQA,
  XMM1  XMM0  MOVLHPS,  
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovlhpsxmm1->xmm0 ( -- )
    ." testing XMM1  XMM0  MOVLHPS, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS5.0 OU128B CCOU32!  FPS6.0 OU128B 4 + CCOU32!   FPS8.0 OU128B 8 + CCOU32!  FPS9.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMOVLHPSXMM1->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS5.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS5.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS6.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS6.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS1.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS1.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS2.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS2.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmovlhpsxmm1->xmm0



HEX
CODE TESTMOVLPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MOVLPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovlpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MOVLPD, "
    FPD2.0 OU128A CCO! FPD5.0 OU128A 8 + CCO!  
    FPD1.0 OU128B CCO! FPD3.0 OU128B 8 + CCO!
         0 OU128C CCO!      0 OU128C 8 + CCO!
    0 ['] TESTMOVLPDM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@ FPD1.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD1.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD5.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD5.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testmovlpdm128->xmm0


HEX
CODE TESTMOVLPDXMM0->M128
  OU128A [O]  XMM0  MOVDQA,
  XMM0  OU128B [O]  MOVLPD,   
  // XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovlpdxmm0->m128 ( -- )
    ." testing  XMM0  OM128 [O]  MOVLPD, "
    FPD2.0 OU128A CCO! FPD5.0 OU128A 8 + CCO!  
    FPD1.0 OU128B CCO! FPD3.0 OU128B 8 + CCO!
    //      0 OU128C CCO!      0 OU128C 8 + CCO!
    0 ['] TESTMOVLPDXMM0->M128 >BODY CALLPROC
    DROP  
    OU128B CCO@ FPD2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD2.0 U.  
      ." , got " OU128B CCO@ U.
    THEN
    OU128B 8 + CCO@ FPD3.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD3.0 U.  
      ." , got " OU128B 8 + CCO@ U.
    THEN
    CR
;

testmovlpdxmm0->m128



HEX
CODE TESTMOVLPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MOVLPS,  // how is this instruction different MOVHPD?
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovlpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MOVLPS, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS5.0 OU128B CCOU32!  FPS6.0 OU128B 4 + CCOU32!   FPS8.0 OU128B 8 + CCOU32!  FPS9.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMOVLPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS5.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS5.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS6.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS6.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS3.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS3.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS4.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS4.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmovlpsm128->xmm0


HEX
CODE TESTMOVLPSXMM0->M128
  OU128A [O]  XMM0  MOVDQA,
  XMM0  OU128B [O]  MOVLPS,    
  // XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovlpsxmm0->m128 ( -- )
    ." testing XMM0  OM128 [O]  MOVLPS, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS5.0 OU128B CCOU32!  FPS6.0 OU128B 4 + CCOU32!   FPS8.0 OU128B 8 + CCOU32!  FPS9.0 OU128B 0C + CCOU32!
    //     0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMOVLPSXMM0->M128 >BODY CALLPROC
    DROP  

    OU128B CCOU32@ FPS1.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS1.0 U.  
      ." , got " OU128B CCOU32@ U.
    THEN

    OU128B 4 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128B 4 + CCOU32@ U.
    THEN

    OU128B 8 + CCOU32@ FPS8.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS8.0 U.  
      ." , got " OU128B 8 + CCOU32@ U.
    THEN

    OU128B 0C + CCOU32@ FPS9.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS9.0 U.  
      ." , got " OU128B 0C + CCOU32@ U.
    THEN

    CR
;

testmovlpsxmm0->m128


HEX
CODE TESTMOVNTDQAM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  MOVNTDQA,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovntdqam128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MOVNTDQA, "
    FPD2.0 OU128A CCO! FPD5.0 OU128A 8 + CCO!  
    FPD1.0 OU128B CCO! FPD3.0 OU128B 8 + CCO!
         0 OU128C CCO!      0 OU128C 8 + CCO!
    0 ['] TESTMOVNTDQAM128->XMM0 >BODY CALLPROC
    DROP  
    OU128C CCO@ FPD1.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD1.0 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FPD3.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD3.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testmovntdqam128->xmm0



HEX
CODE TESTMOVNTDQXMM0->M128
  OU128A [O]  XMM0  MOVDQA,
  XMM0  OU128B [O]  MOVNTDQ,   
  // XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovntdqxmm0->m128 ( -- )
    ." testing  XMM0  OM128 [O]  MOVNTDQ, "
    FPD2.0 OU128A CCO! FPD5.0 OU128A 8 + CCO!  
    FPD1.0 OU128B CCO! FPD3.0 OU128B 8 + CCO!
    //      0 OU128C CCO!      0 OU128C 8 + CCO!
    0 ['] TESTMOVNTDQXMM0->M128 >BODY CALLPROC
    DROP  
    OU128B CCO@ FPD2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD2.0 U.  
      ." , got " OU128B CCO@ U.
    THEN
    OU128B 8 + CCO@ FPD5.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD5.0 U.  
      ." , got " OU128B 8 + CCO@ U.
    THEN
    CR
;

testmovntdqxmm0->m128



HEX
CODE TESTMOVNTPDXMM0->M128
  OU128A [O]  XMM0  MOVDQA,
  XMM0  OU128B [O]  MOVNTPD,   
  // XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovntpdxmm0->m128 ( -- )
    ." testing  XMM0  OM128 [O]  MOVNTPD, "
    FPD2.0 OU128A CCO! FPD5.0 OU128A 8 + CCO!  
    FPD1.0 OU128B CCO! FPD3.0 OU128B 8 + CCO!
    //      0 OU128C CCO!      0 OU128C 8 + CCO!
    0 ['] TESTMOVNTPDXMM0->M128 >BODY CALLPROC
    DROP  
    OU128B CCO@ FPD2.0 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FPD2.0 U.  
      ." , got " OU128B CCO@ U.
    THEN
    OU128B 8 + CCO@ FPD5.0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FPD5.0 U.  
      ." , got " OU128B 8 + CCO@ U.
    THEN
    CR
;

testmovntpdxmm0->m128



HEX
CODE TESTMOVNTPSXMM0->M128
  OU128A [O]  XMM0  MOVDQA,
  XMM0  OU128B [O]  MOVNTPS,    
  // XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovntpsxmm0->m128 ( -- )
    ." testing XMM0  OM128 [O]  MOVNTPS, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS5.0 OU128B CCOU32!  FPS6.0 OU128B 4 + CCOU32!   FPS8.0 OU128B 8 + CCOU32!  FPS9.0 OU128B 0C + CCOU32!
    //     0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMOVNTPSXMM0->M128 >BODY CALLPROC
    DROP  

    OU128B CCOU32@ FPS1.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS1.0 U.  
      ." , got " OU128B CCOU32@ U.
    THEN

    OU128B 4 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128B 4 + CCOU32@ U.
    THEN

    OU128B 8 + CCOU32@ FPS3.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS3.0 U.  
      ." , got " OU128B 8 + CCOU32@ U.
    THEN

    OU128B 0C + CCOU32@ FPS4.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS4.0 U.  
      ." , got " OU128B 0C + CCOU32@ U.
    THEN

    CR
;

testmovntpsxmm0->m128


HEX
CODE TESTORPDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  ORPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testorpdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  ORPD, "
    FF00FF00FF00FF00 OU128A CCO!  FFFF0000FFFF0000 OU128A 8 + CCO!  
    FFFFFFFF00000000 OU128B CCO!  F00F0FF0F00F0FF0 OU128B 8 + CCO!
                     0 OU128C CCO!               0 OU128C 8 + CCO!
    0 ['] TESTORPDM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ FFFFFFFFFF00FF00 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " FFFFFFFFFF00FF00 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ FFFF0FF0FFFF0FF0 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " FFFF0FF0FFFF0FF0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testorpdm128->xmm0


HEX
CODE TESTORPSM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  ORPS,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testorpsm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  ORPS, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS1.0 OU128B CCOU32!  FPS1.0 OU128B 4 + CCOU32!   FPS1.0 OU128B 8 + CCOU32!  FPS1.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTORPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS1.0 FPS1.0 OR = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS1.0 FPS1.0 OR U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS2.0 FPS1.0 OR = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 FPS1.0 OR U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS3.0 FPS1.0 OR = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS3.0 FPS1.0 OR U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS1.0 FPS4.0 OR = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS1.0 FPS4.0 OR U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testorpsm128->xmm0


// this instruction totals the absolute differences between the bytes of two byte arrays
//  then shifts over a byte in the source string and does it again
//  then shifts over another byte in the source string and does it again...
//  for a total of 8 results returned
//  the low 3 bits of the immediate value determine the starting bytes in the two arrays
HEX
CODE TESTMPSADBW0NM128->XMM0 
  OU128A [O]  XMM0  MOVDQA,
  0 N  OU128B [O]  XMM0  MPSADBW,   // I wonder what this instruction is used for?
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmpsadbw0nm128->xmm0 ( -- )
    ." testing 0 N OM128 [O]  XMM0  MPSADBW, "
    0807060504030201 OU128A CCO!  0202020201010101 OU128A 8 + CCO!  
    0806040203010301 OU128B CCO!  0100010000010001 OU128B 8 + CCO!
                   0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTMPSADBW0NM128->XMM0 >BODY CALLPROC
    DROP  
     OU128C CCO@ 000E000A00060004 = IF
     ." lo half SUCCESS! "
    ELSE
      ." FAIL! Expected for lo half " 000E000A00060004 U.  
      ." , got " OU128C CCO@ U.
    THEN
    OU128C 8 + CCO@ 000B000D00120012 = IF
     ." hi half SUCCESS!"
    ELSE
      ." FAIL! Expected for hi half " 000B000D00120012 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN
    CR
;

testmpsadbw0nm128->xmm0



HEX
CODE TESTMOVUPDM128->XMM0
  OU128B 1+ [O]  XMM0  MOVUPD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovupdm128->xmm0 ( -- )
    ." testing OM128 1+ [O]  XMM0  MOVUPD, "
    FPD3.0 OU128B 1+ CCO!     FPD2.0 OU128B 9 + CCO!     
         0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTMOVUPDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FPD3.0 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FPD3.0 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FPD2.0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FPD2.0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testmovupdm128->xmm0


HEX
CODE TESTMOVUPDXMM0->M128
  OU128B [O]  XMM0  MOVDQA,
  XMM0  OU128C 1+ [O]  MOVUPD,
  RET,  
END-CODE
  
: testmovupdxmm0->m128 ( -- )
    ." testing  OM128 1+ [O]  XMM0  MOVUPD, "
    FPD3.0 OU128B CCO!     FPD2.0 OU128B 8 + CCO!     
         0 OU128C CCO!          0 OU128C 8 + CCO!    0 OU128C 10 + CCO!
    0 ['] TESTMOVUPDXMM0->M128 >BODY CALLPROC
    DROP  

    OU128C 1+ CCO@ FPD3.0 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FPD3.0 U.  
      ." , got " OU128C 1+ CCO@ U.
    THEN

    OU128C 9 + CCO@ FPD2.0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FPD2.0 U.  
      ." , got " OU128C 9 + CCO@ U.
    THEN

    CR
;

testmovupdxmm0->m128


HEX
CODE TESTMOVUPSM128->XMM0
  OU128B 1+ [O]  XMM0  MOVUPS,
  XMM0  OU128C [O]  MOVDQU,
  RET,  
END-CODE
  
: testmovupsm128->xmm0 ( -- )
    ." testing  OM128 1+ [O]  XMM0  MOVUPS, "
    FPS3.0 OU128B 1+ CCOU32!  FPS2.0 OU128B 5 + CCOU32!   FPS5.0 OU128B 9 + CCOU32!  FPS3.0 OU128B 0D + CCOU32!  
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMOVUPSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS3.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS3.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS5.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS5.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS3.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS3.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmovupsm128->xmm0


HEX
CODE TESTMOVUPSXMM0->M128
  OU128B [O]  XMM0  MOVDQU,
  XMM0  OU128C 1+ [O]  MOVUPS,
  RET,  
END-CODE
  
: testmovupsxmm0->m128 ( -- )
    ." testing  XMM0   OM128 1+ [O]  MOVUPS, "
    FPS3.0 OU128B CCOU32!  FPS2.0 OU128B 4 + CCOU32!   FPS5.0 OU128B 8 + CCOU32!  FPS3.0 OU128B 0C + CCOU32!  
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!    0 OU128C 10 + CCOU32!
    0 ['] TESTMOVUPSXMM0->M128 >BODY CALLPROC
    DROP  

    OU128C 1+ CCOU32@ FPS3.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS3.0 U.  
      ." , got " OU128C 1+ CCOU32@ U.
    THEN

    OU128C 5 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128C 5 + CCOU32@ U.
    THEN

    OU128C 9 + CCOU32@ FPS5.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS5.0 U.  
      ." , got " OU128C 9 + CCOU32@ U.
    THEN

    OU128C 0D + CCOU32@ FPS3.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS3.0 U.  
      ." , got " OU128C 0D + CCOU32@ U.
    THEN

    CR
;

testmovupsxmm0->m128



HEX
CODE TESTMOVSSM128->XMM0
  OU128B [O]  XMM0  MOVSS,
  XMM0  OU128C [O]  MOVDQU,
  RET,  
END-CODE
  
: testmovssm128->xmm0 ( -- )
    ." testing  OM128 [O]  XMM0  MOVSS, "
    FPS3.0 OU128B CCOU32!  FPS2.0 OU128B 4 + CCOU32!   FPS5.0 OU128B 8 + CCOU32!  FPS3.0 OU128B 0C + CCOU32!  
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMOVSSM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS3.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS3.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ 0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " 0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ 0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " 0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ 0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " 0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmovssm128->xmm0


HEX
CODE TESTMOVSSXMM0->M128
  OU128B [O]  XMM0  MOVDQU,
  XMM0  OU128C [O]  MOVSS,
  RET,  
END-CODE
  
: testmovssxmm0->m128 ( -- )
    ." testing  XMM0   OM128 [O]  MOVSS, "
    FPS3.0 OU128B CCOU32!  FPS2.0 OU128B 4 + CCOU32!   FPS5.0 OU128B 8 + CCOU32!  FPS3.0 OU128B 0C + CCOU32!  
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMOVSSXMM0->M128 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS3.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS3.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ 0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " 0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ 0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " 0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ 0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " 0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmovssxmm0->m128


HEX
CODE TESTMOVSD2M128->XMM0
  OU128B [O]  XMM0  MOVSD2,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovsd2m128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  MOVSD2, "
    FPD3.0 OU128B CCO!     FPD2.0 OU128B 8 + CCO!     
         0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTMOVSD2M128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FPD3.0 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FPD3.0 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testmovsd2m128->xmm0


HEX
CODE TESTMOVSD2XMM0->M128
  OU128B [O]  XMM0  MOVDQA,
  XMM0  OU128C [O]  MOVSD2,
  RET,  
END-CODE
  
: testmovsd2xmm0->m128 ( -- )
    ." testing  OM128 [O]  XMM0  MOVSD2, "
    FPD3.0 OU128B CCO!     FPD2.0 OU128B 8 + CCO!     
         0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTMOVSD2XMM0->M128 >BODY CALLPROC
    DROP  

    OU128C CCO@ FPD3.0 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FPD3.0 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testmovsd2xmm0->m128


HEX
CODE TESTAESENCM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  AESENC,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testaesencm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  AESENC, "
         0 OU128A CCO!          0 OU128A 8 + CCO!
         0 OU128B CCO!          0 OU128B 8 + CCO!     
         0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTAESENCM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 6363636363636363 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  6363636363636363 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 6363636363636363 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 6363636363636363 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testaesencm128->xmm0


HEX
CODE TESTAESDECM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  AESDEC,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testaesdecm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  AESDEC, "
6363636363636363 OU128A CCO!  6363636363636363 OU128A 8 + CCO!
               0 OU128B CCO!                 0 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTAESDECM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 0 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  0 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testaesdecm128->xmm0


HEX
CODE TESTAESENCLASTM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  AESENCLAST,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testaesenclastm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  AESENCLAST, "
         0 OU128A CCO!          0 OU128A 8 + CCO!
         0 OU128B CCO!          0 OU128B 8 + CCO!     
         0 OU128C CCO!          0 OU128C 8 + CCO!
    0 ['] TESTAESENCLASTM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 6363636363636363 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  6363636363636363 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 6363636363636363 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 6363636363636363 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testaesenclastm128->xmm0


HEX
CODE TESTAESDECLASTM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  AESDECLAST,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testaesdeclastm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  AESDECLAST, "
6363636363636363 OU128A CCO!  6363636363636363 OU128A 8 + CCO!
               0 OU128B CCO!                 0 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTAESDECLASTM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 0 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  0 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testaesdeclastm128->xmm0



HEX
CODE TESTINSERTPSC4NXMM1->XMM0
  OU128B [O]  XMM0  MOVDQA,
  OU128A [O]  XMM1  MOVDQA,
  C4 N  XMM1  XMM0  INSERTPS,  // moves src 4th to dest 1st and clears dest 3rd
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testinsertpsc4nxmm1->xmm0 ( -- )
    ." testing C4 N  XMM1  XMM0  INSERTPS, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS5.0 OU128B CCOU32!  FPS6.0 OU128B 4 + CCOU32!   FPS8.0 OU128B 8 + CCOU32!  FPS9.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTINSERTPSC4NXMM1->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS4.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS4.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS6.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS6.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ 0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " 0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS9.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS9.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testinsertpsc4nxmm1->xmm0


HEX
CODE TESTMOVSHDUPM128->XMM0
  OU128B [O]  XMM0  MOVDQA,
  OU128A [O]  XMM0  MOVSHDUP,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovshdupm128->xmm0 ( -- )
    ." testing  OM128 [O]  XMM0  MOVSHDUP, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS5.0 OU128B CCOU32!  FPS6.0 OU128B 4 + CCOU32!   FPS8.0 OU128B 8 + CCOU32!  FPS9.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMOVSHDUPM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS2.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS2.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS2.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS2.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS4.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS4.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS4.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS4.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmovshdupm128->xmm0


HEX
CODE TESTMOVSLDUPM128->XMM0
  OU128B [O]  XMM0  MOVDQA,
  OU128A [O]  XMM0  MOVSLDUP,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testmovsldupm128->xmm0 ( -- )
    ." testing  OM128 [O]  XMM0  MOVSLDUP, "
    FPS1.0 OU128A CCOU32!  FPS2.0 OU128A 4 + CCOU32!   FPS3.0 OU128A 8 + CCOU32!  FPS4.0 OU128A 0C + CCOU32!  
    FPS5.0 OU128B CCOU32!  FPS6.0 OU128B 4 + CCOU32!   FPS8.0 OU128B 8 + CCOU32!  FPS9.0 OU128B 0C + CCOU32!
         0 OU128C CCOU32!       0 OU128C 8 + CCOU32!
    0 ['] TESTMOVSLDUPM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCOU32@ FPS1.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS1.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ FPS1.0 = IF
      ." 2nd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp32 " FPS1.0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ FPS3.0 = IF
      ." 3rd fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd fp32 " FPS3.0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ FPS3.0 = IF
      ." 4th fp32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th fp32 " FPS3.0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testmovsldupm128->xmm0


HEX
CODE TESTMASKMOVDQUXMM1XMM0->[RDI]
  VARY N  RDI  MOV,
  OU128B [O]  XMM1  MOVDQA,
  OU128A [O]  XMM0  MOVDQA,
  XMM1  XMM0  MASKMOVDQU,   //  mask source MASKMOVDQU,
  RET,  
END-CODE
  
: testmaskmovdquxmm1xmm0->[rdi] ( -- )
    ." testing  XMM1  XMM0  MASKMOVDQU, "
    0102030405060708 OU128A CCO!  1112131415161718 OU128A 8 + CCO!
    8000800000800080 OU128B CCO!  8000808000000080 OU128B 8 + CCO!     
    0 VARY !                      0 VARY 8 + !
    0 ['] TESTMASKMOVDQUXMM1XMM0->[RDI] >BODY CALLPROC
    DROP  

    VARY @ 0100030000060008 = IF
      ." 1st U64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st U64 "  0100030000060008 U.  
      ." , got " VARY @ U.
    THEN

    VARY 8 + @ 1100131400000018 = IF
      ." 2nd U64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd U64 " 1100131400000018 U.  
      ." , got " VARY 8 + @ U.
    THEN

    CR
;

testmaskmovdquxmm1xmm0->[rdi]  



HEX
CODE TESTMASKMOVQST1ST0->[RDI]
  VARY N  RDI  MOV,
  OU128B [O]  ST1  MOVQ,
  OU128A [O]  ST0  MOVQ,
  ST1  ST0  MASKMOVQ,   //  mask source MASKMOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testmaskmovqst1st0->[rdi] ( -- )
    ." testing  ST1  ST0  MASKMOVQ, "
    0102030405060708 OU128A CCO!  1112131415161718 OU128A 8 + CCO!
    8000800000800080 OU128B CCO!  8000808000000080 OU128B 8 + CCO!     
    0 VARY !                      0 VARY 8 + !
    0 ['] TESTMASKMOVQST1ST0->[RDI] >BODY CALLPROC
    DROP  

    VARY @ 0100030000060008 = IF
      ." 1st U64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st U64 "  0100030000060008 U.  
      ." , got " VARY @ U.
    THEN

    VARY 8 + @ 0 = IF
      ." 2nd U64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd U64 " 0 U.  
      ." , got " VARY 8 + @ U.
    THEN

    CR
;

testmaskmovqst1st0->[rdi]



HEX
CODE TESTPABSBM128->XMM0
  OU128B [O]  XMM0  PABSB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpabsbm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PABSB, "
FFFE0203040506FD OU128B CCO!  FFFFFEFE04050607 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPABSBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 0102020304050603 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  0102020304050603 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0101020204050607 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0101020204050607 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpabsbm128->xmm0


HEX
CODE TESTPABSBM128->ST0
  OU128B [O]  ST0  PABSB,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpabsbm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PABSB, "
FFFE0203040506FD OU128B CCO!  FFFFFEFE04050607 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPABSBM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 0102020304050603 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  0102020304050603 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpabsbm128->st0


HEX
CODE TESTPABSWM128->XMM0
  OU128B [O]  XMM0  PABSW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpabswm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PABSW, "
FFFE0203040506FD OU128B CCO!  FFFFFFFE04050607 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPABSWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 00020203040506FD = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  00020203040506FD U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0001000204050607 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0001000204050607 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpabswm128->xmm0


HEX
CODE TESTPABSWM128->ST0
  OU128B [O]  ST0  PABSW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpabswm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PABSW, "
FFFE0203040506FD OU128B CCO!  FFFFFEFE04050607 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPABSWM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 00020203040506FD = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  00020203040506FD U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpabswm128->st0



HEX
CODE TESTPABSDM128->XMM0
  OU128B [O]  XMM0  PABSD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpabsdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PABSD, "
FFFFFFFE040506FD OU128B CCO!  FFFFFFFF04050607 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPABSDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 00000002040506FD = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  00000002040506FD U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0000000104050607 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0000000104050607 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpabsdm128->xmm0


HEX
CODE TESTPABSDM128->ST0
  OU128B [O]  ST0  PABSD,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpabsdm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PABSD, "
FFFFFFFE040506FD OU128B CCO!  FFFFFFFF04050607 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPABSDM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 00000002040506FD = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  00000002040506FD U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpabsdm128->st0


HEX
CODE TESTPACKSSWBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PACKSSWB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpacksswbm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PACKSSWB, "
007F0080FF80FF7F OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FFFBFFFE0005007D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPACKSSWBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FDFC00087F7F8080 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FDFC00087F7F8080 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FAFF0907FBFE057D = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FAFF0907FBFE057D U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpacksswbm128->xmm0


HEX
CODE TESTPACKSSWBM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PACKSSWB,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpacksswbm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PACKSSWB, "
FFFFFF7F00000080 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
FFFFFFFE007F00FD OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPACKSSWBM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFE7F7FFF80007F = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFE7F7FFF80007F U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpacksswbm128->st0


HEX
CODE TESTPACKSSDWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PACKSSDW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpackssdwm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PACKSSDW, "
00008000FFFF7FFF OU128A CCO!  FFFFFFFC00000008 OU128A 8 + CCO! 
FFFFFFFE0000007D OU128B CCO!  FFFFFFFF00000007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPACKSSDWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFC00087FFF8000 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFC00087FFF8000 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFF0007FFFE007D = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFF0007FFFE007D U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpackssdwm128->xmm0


HEX
CODE TESTPACKSSDWM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PACKSSDW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpackssdwm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PACKSSDW, "
00008000FFFF7FFF OU128A CCO!  FFFFFFFC00000008 OU128A 8 + CCO! 
FFFFFFFE0000007D OU128B CCO!  FFFFFFFF00000007 OU128B 8 + CCO!      
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPACKSSDWM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFE007D7FFF8000 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFE007D7FFF8000 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpackssdwm128->st0



HEX
CODE TESTPACKUSDWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PACKUSDW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpackusdwm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PACKUSDW, "
00008000FFFF7FFF OU128A CCO!  FFFFFFFC00000008 OU128A 8 + CCO! 
FFFFFFFE0000007D OU128B CCO!  FFFFFFFF00000007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPACKUSDWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 0000000880000000 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  0000000880000000 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 000000070000007D = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 000000070000007D U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpackusdwm128->xmm0



HEX
CODE TESTPACKUSWBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PACKUSWB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpackuswbm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PACKUSWB, "
007F0080FF80FF7F OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FFFBFFFE0005007D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPACKUSWBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 000000087F800000 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  000000087F800000 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 000009070000057D = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 000009070000057D U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpackuswbm128->xmm0


HEX
CODE TESTPACKUSWBM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PACKUSWB,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpackuswbm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PACKUSWB, "
FFFFFF7F00000080 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
FFFFFFFE007F00FD OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPACKUSWBM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 00007FFD00000080 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  00007FFD00000080 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpackuswbm128->st0


HEX
CODE TESTPADDBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PADDB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpaddbm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PADDB, "
007F0080FF80FF7F OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FFFBFFFE0005007D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FF7AFF7EFF85FFFC = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FF7AFF7EFF85FFFC U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FEF7FEFB0009000F = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FEF7FEFB0009000F U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpaddbm128->xmm0


HEX
CODE TESTPADDBM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PADDB,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpaddbm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PADDB, "
FFFFFF7F00000080 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
FFFFFFFE007F00FD OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDBM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FEFEFE7D007F007D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FEFEFE7D007F007D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpaddbm128->st0



HEX
CODE TESTPADDWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PADDW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpaddwm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PADDW, "
007F0080FF80FF7F OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FFFBFFFE0005007D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 007A007EFF85FFFC = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  007A007EFF85FFFC U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFF7FFFB0009000F = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFF7FFFB0009000F U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpaddwm128->xmm0


HEX
CODE TESTPADDWM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PADDW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpaddwm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PADDW, "
FFFFFF7F00000080 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
FFFFFFFE007F00FD OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDWM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFEFF7D007F017D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFEFF7D007F017D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpaddwm128->st0


HEX
CODE TESTPADDDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PADDD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpadddm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PADDD, "
00000080FF80FF7F OU128A CCO!  FFFFFFFC00000008 OU128A 8 + CCO! 
FFFFFFFE0005007D OU128B CCO!  FFFFFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 0000007EFF85FFFC = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  0000007EFF85FFFC U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFFFFFB0009000F = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFFFFFB0009000F U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpadddm128->xmm0


HEX
CODE TESTPADDDM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PADDD,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpadddm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PADDD, "
FFFFFF7F00000080 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
FFFFFFFE007F00FD OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDDM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFF7D007F017D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFF7D007F017D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpadddm128->st0



HEX
CODE TESTPADDQM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PADDQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpaddqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PADDQ, "
FFFFFFFFFFFFFF7F OU128A CCO!  8000000000000000 OU128A 8 + CCO! 
FFFFFFFFFFFFFFFC OU128B CCO!  8000000000000001 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDQM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFFFFFFFF7B = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFFFFFFFF7B U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 1 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 1 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpaddqm128->xmm0


HEX
CODE TESTPADDQM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PADDQ,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpaddqm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PADDQ, "
FFFFFFFFFFFFFF7F OU128A CCO!  8000000000000000 OU128A 8 + CCO!
FFFFFFFFFFFFFFFC OU128B CCO!  8000000000000001 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDQM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFFFFFFFF7B = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFFFFFFFF7B U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpaddqm128->st0



HEX
CODE TESTPADDSBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PADDSB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpaddsbm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PADDSB, "
007F0080FF80FF7F OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FFFBFFFE0005007D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDSBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FF7AFF80FF85FF7F = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FF7AFF80FF85FF7F U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FEF7FEFB0009000F = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FEF7FEFB0009000F U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpaddsbm128->xmm0


HEX
CODE TESTPADDSBM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PADDSB,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpaddsbm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PADDSB, "
FFFFFF7F00000080 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
FFFFFFFE007F00FD OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDSBM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FEFEFE7D007F0080 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FEFEFE7D007F0080 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpaddsbm128->st0


HEX
CODE TESTPADDSWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PADDSW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpaddswm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PADDSW, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FFFBFFFE0005008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDSWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 007A007EFF857FFF = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  007A007EFF857FFF U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFF7FFFB0009000F = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFF7FFFB0009000F U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpaddswm128->xmm0


HEX
CODE TESTPADDSWM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PADDSW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpaddswm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PADDSW, "
7FFFFF7F00000080 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
7FFEFFFE007F00FD OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDSWM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 7FFFFF7D007F017D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  7FFFFF7D007F017D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpaddswm128->st0




HEX
CODE TESTPADDUSBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PADDUSB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpaddusbm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PADDUSB, "
007F0080FF80FF7F OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FFFBFFFE0005007D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDUSBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFFFF85FFFC = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFFFF85FFFC U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFFFFFF0009000F = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFFFFFF0009000F U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpaddusbm128->xmm0


HEX
CODE TESTPADDUSBM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PADDUSB,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpaddusbm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PADDUSB, "
FFFFFF7F00000080 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
FFFFFFFE007F00FD OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDUSBM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFF007F00FF = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFF007F00FF U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpaddusbm128->st0


HEX
CODE TESTPADDUSWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PADDUSW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpadduswm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PADDUSW, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FFFBFFFE0005008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDUSWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFFFF85800D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFFFF85800D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFFFFFF0009000F = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFFFFFF0009000F U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpadduswm128->xmm0


HEX
CODE TESTPADDUSWM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PADDUSW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpadduswm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PADDUSW, "
7FFFFF7F00000080 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
7FFEFFFE007F00FD OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPADDUSWM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFDFFFF007F017D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFDFFFF007F017D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpadduswm128->st0



HEX
CODE TESTPALIGNRM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  1 N  OU128B [O]  XMM0  PALIGNR,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpalignrm128->xmm0 ( -- )
    ." testing 1 N  OM128 [O]  XMM0  PALIGNR, "
007F0080FF80FF7F OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FFFBFFFE0005007D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPALIGNRM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 07FFFBFFFE000500 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  07FFFBFFFE000500 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 7FFFFAFFFF000900 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 7FFFFAFFFF000900 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpalignrm128->xmm0


HEX
CODE TESTPALIGNRM128->ST0
  OU128A [O]  ST0  MOVQ,
  1 N  OU128B [O]  ST0  PALIGNR,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpalignrm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PALIGNR, "
FFFFFF7F00000080 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
FFFFFFFE007F00FD OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPALIGNRM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 80FFFFFFFE007F00 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  80FFFFFFFE007F00 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpalignrm128->st0



HEX
CODE TESTPANDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PAND,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpandm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PAND, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FFFBFFFE0005008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPANDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 007B008000000080 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  007B008000000080 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFF8FFFC00000000 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFF8FFFC00000000 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpandm128->xmm0


HEX
CODE TESTPANDM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PAND,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpandm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PAND, "
7FFFFF7F00000080 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
7FFEFFFE007F00FD OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPANDM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 7FFEFF7E00000080 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  7FFEFF7E00000080 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpandm128->st0



HEX
CODE TESTPANDNM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PANDN,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpandnm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PANDN, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FFFBFFFE0005008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPANDNM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 007F0080FF807F80 INVERT FFFBFFFE0005008D AND = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  007F0080FF807F80 INVERT FFFBFFFE0005008D AND U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFDFFFC00000008 INVERT FFFAFFFF00090007 AND  = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFDFFFC00000008 INVERT FFFAFFFF00090007 AND U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpandnm128->xmm0


HEX
CODE TESTPANDNM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PANDN,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpandnm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PANDN, "
7FFFFF7F00000080 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
7FFEFFFE007F00FD OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPANDNM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 7FFFFF7F00000080 INVERT 7FFEFFFE007F00FD AND = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  7FFFFF7F00000080 INVERT 7FFEFFFE007F00FD AND U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpandnm128->st0


HEX
CODE TESTPAVGBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PAVGB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpavgbm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PAVGB, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FFFBFFFE0005008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPAVGBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 80BD80BF80434087 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  80BD80BF80434087 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFCFFFE00050008 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFCFFFE00050008 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpavgbm128->xmm0


HEX
CODE TESTPAVGBM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PAVGB,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpavgbm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PAVGB, "
0102030405060708 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
8080808080808080 OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPAVGBM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 4141424243434444 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  4141424243434444 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpavgbm128->st0



HEX
CODE TESTPAVGWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PAVGW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpavgwm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PAVGW, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FFFBFFFE0005008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPAVGWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 803D803F7FC34007 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  803D803F7FC34007 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFCFFFE00050008 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFCFFFE00050008 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpavgwm128->xmm0


HEX
CODE TESTPAVGWM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PAVGW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpavgwm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PAVGW, "
0180030405060708 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
8080808080808080 OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPAVGWM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 410041C242C343C4 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  410041C242C343C4 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpavgwm128->st0


HEX
CODE TESTPBLENDVBM128->XMM1
  OU128C [O]  XMM0  MOVDQA,
  OU128A [O]  XMM1  MOVDQA,
  OU128B [O]  XMM1  PBLENDVB,
  XMM1  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpblendvbm128->xmm1 ( -- )
    ." testing OM128 [O]  XMM1  PBLENDVB, "
007F0080FF807F80 OU128A CCO!  FEFDFFFC03000508 OU128A 8 + CCO! 
FFFBFFFE0005008D OU128B CCO!  FFFAFDFF01090207 OU128B 8 + CCO!     
8080008080008000 OU128C CCO!  8000800000800080 OU128C 8 + CCO!
    0 ['] TESTPBLENDVBM128->XMM1 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFB00FE00800080 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFB00FE00800080 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFDFDFC03090507 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFDFDFC03090507 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpblendvbm128->xmm1


HEX
CODE TESTPBLENDWM128->XMM1
  OU128A [O]  XMM1  MOVDQA,
  A5 N  OU128B [O]  XMM1  PBLENDW,
  XMM1  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpblendwm128->xmm1 ( -- )
    ." testing A5 N  OM128 [O]  XMM1  PBLENDW, "
007F0080FF807F80 OU128A CCO!  FEFDFFFC03000508 OU128A 8 + CCO! 
FFFBFFFE0005008D OU128B CCO!  FFFAFDFF01090207 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPBLENDWM128->XMM1 >BODY CALLPROC
    DROP  

    OU128C CCO@ 007FFFFEFF80008D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  007FFFFEFF80008D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFAFFFC01090508 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFAFFFC01090508 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpblendwm128->xmm1


HEX
CODE TESTPCMPEQBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PCMPEQB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpcmpeqbm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PCMPEQB, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FF7FFFFE0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPCMPEQBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 00FF000000FF0000 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  00FF000000FF0000 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FF00FF00FF00FF00 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FF00FF00FF00FF00 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpcmpeqbm128->xmm0


HEX
CODE TESTPCMPEQBM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PCMPEQB,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpcmpeqbm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PCMPEQB, "
0102030405060708 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
0180808080808008 OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPCMPEQBM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FF000000000000FF = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FF000000000000FF U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpcmpeqbm128->st0



HEX
CODE TESTPCMPEQWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PCMPEQW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpcmpeqwm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PCMPEQW, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FF7F008000057F80 OU128B CCO!  FFFAFFFC00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPCMPEQWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 0000FFFF0000FFFF = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  0000FFFF0000FFFF U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0000FFFF00000000 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0000FFFF00000000 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpcmpeqwm128->xmm0


HEX
CODE TESTPCMPEQWM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PCMPEQW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpcmpeqwm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PCMPEQW, "
0180030405060708 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
8080030405068080 OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPCMPEQWM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 0000FFFFFFFF0000 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  0000FFFFFFFF0000 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpcmpeqwm128->st0



HEX
CODE TESTPCMPEQDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PCMPEQD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpcmpeqdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PCMPEQD, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FF7F0080FF807F80 OU128B CCO!  FFFDFFFC00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPCMPEQDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 00000000FFFFFFFF = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  00000000FFFFFFFF U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFFFFFF00000000 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFFFFFF00000000 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpcmpeqdm128->xmm0


HEX
CODE TESTPCMPEQDM128->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PCMPEQD,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpcmpeqdm128->st0 ( -- )
    ." testing OM128 [O]  ST0  PCMPEQD, "
0180030405060708 OU128A CCO!  FFFFFFFC00050009 OU128A 8 + CCO!
8080030405060708 OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPCMPEQDM128->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 00000000FFFFFFFF = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  00000000FFFFFFFF U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpcmpeqdm128->st0


HEX
CODE TESTPCMPEQQM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PCMPEQQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpcmpeqqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PCMPEQQ, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FF7F0080FF807F80 OU128B CCO!  FFFDFFFC00000008 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPCMPEQQM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 0 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  0 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFFFFFFFFFFFFFF = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFFFFFFFFFFFFFF U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpcmpeqqm128->xmm0


HEX
CODE TESTPMAXSBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMAXSB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmaxsbm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMAXSB, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FF7FFFFE0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMAXSBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 007F00FE00807F8D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  007F00FE00807F8D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFDFFFF00090008 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFDFFFF00090008 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmaxsbm128->xmm0


HEX
CODE TESTPMAXSWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMAXSW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmaxswm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMAXSW, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMAXSWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 007F008000807F80 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  007F008000807F80 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFDFFFF01000008 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFDFFFF01000008 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmaxswm128->xmm0



HEX
CODE TESTPMAXSDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMAXSD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmaxsdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMAXSD, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0081008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMAXSDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 007F00800081008D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  007F00800081008D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFDFFFC01000008 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFDFFFC01000008 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmaxsdm128->xmm0



HEX
CODE TESTPMINSBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMINSB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpminsbm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMINSB, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FF7FFFFE0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMINSBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FF7FFF80FF800080 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FF7FFF80FF800080 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFAFFFC00000007 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFAFFFC00000007 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpminsbm128->xmm0


HEX
CODE TESTPMINSWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMINSW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpminswm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMINSW, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMINSWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FF7FFFFEFF80008D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FF7FFFFEFF80008D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFAFFFC00090007 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFAFFFC00090007 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpminswm128->xmm0



HEX
CODE TESTPMINSDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMINSD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpminsdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMINSD, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0081008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMINSDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FF7FFFFE00807F80 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FF7FFFFE00807F80 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFAFFFF00090007 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFAFFFF00090007 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpminsdm128->xmm0


HEX
CODE TESTPMAXUBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMAXUB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmaxubm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMAXUB, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FF7FFFFE0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMAXUBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FF7FFFFEFF807F8D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FF7FFFFEFF807F8D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFDFFFF00090008 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFDFFFF00090008 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmaxubm128->xmm0


HEX
CODE TESTPMAXUWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMAXUW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmaxuwm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMAXUW, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMAXUWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FF7FFFFEFF807F80 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FF7FFFFEFF807F80 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFDFFFF01000008 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFDFFFF01000008 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmaxuwm128->xmm0



HEX
CODE TESTPMAXUDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMAXUD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmaxudm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMAXUD, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0081008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMAXUDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FF7FFFFE0081008D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FF7FFFFE0081008D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFDFFFC01000008 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFDFFFC01000008 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmaxudm128->xmm0



HEX
CODE TESTPMINUBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMINUB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpminubm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMINUB, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FF7FFFFE0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMINUBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 007F008000800080 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  007F008000800080 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFAFFFC00000007 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFAFFFC00000007 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpminubm128->xmm0


HEX
CODE TESTPMINUWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMINUW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpminuwm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMINUW, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMINUWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 007F00800080008D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  007F00800080008D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFAFFFC00090007 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFAFFFC00090007 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpminuwm128->xmm0



HEX
CODE TESTPMINUDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMINUD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpminudm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMINUD, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0081008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMINUDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 007F008000807F80 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  007F008000807F80 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFAFFFF00090007 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFAFFFF00090007 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpminudm128->xmm0



HEX
CODE TESTPMOVMSKBXMM0->RAX
  OU128A [O]  RAX  MOV,
  OU128B [O]  XMM0  MOVDQA,
  XMM0  RAX  PMOVMSKB,
  RAX  OU128C [O]  MOV,
  RET,  
END-CODE
  
: testpmovmskbxmm0->rax ( -- )  
    ." testing XMM0  RAX  PMOVMSKB, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FF7FFFFE0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVMSKBXMM0->RAX >BODY CALLPROC
    DROP  

    OU128C CCO@ F0B5 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  F0B5 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovmskbxmm0->rax


HEX
CODE TESTPMOVMSKBST0->RAX  
  OU128A [O]  RAX  MOV,
  OU128B [O]  ST0  MOVQ,
  ST0  RAX  PMOVMSKB,
  RAX  OU128C [O]  MOV,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpmovmskbst0->rax ( -- )  // I checked rex by hand
    ." testing ST0  RAX  PMOVMSKB, "
0102030405060708 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
0180808080808008 OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVMSKBST0->RAX >BODY CALLPROC
    DROP  

    OU128C CCO@ 7E = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  7E U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovmskbst0->rax


HEX
CODE TESTPMOVMSKBXMM0->EAX
  OU128A [O]  RAX  MOV,
  OU128B [O]  XMM0  MOVDQA,
  XMM0  EAX  PMOVMSKB,
  RAX  OU128C [O]  MOV,
  RET,  
END-CODE
  
: testpmovmskbxmm0->eax ( -- )
    ." testing XMM0  EAX  PMOVMSKB, "
007F0080FF807F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FF7FFFFE0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVMSKBXMM0->EAX >BODY CALLPROC
    DROP  

    OU128C CCO@ F0B5 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  F0B5 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovmskbxmm0->eax


HEX
CODE TESTPMOVMSKBST0->EAX
  OU128A [O]  RAX  MOV,
  OU128B [O]  ST0  MOVQ,
  ST0  EAX  PMOVMSKB,
  RAX  OU128C [O]  MOV,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpmovmskbst0->eax ( -- ) // I checked rex by hand
    ." testing ST0  EAX  PMOVMSKB, "
0102030405060708 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
0180808080808008 OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVMSKBST0->EAX >BODY CALLPROC
    DROP  

    OU128C CCO@ 7E = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  7E U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovmskbst0->eax


HEX
CODE TESTPMOVMSKBST0->AL
  OU128A [O]  RAX  MOV,
  OU128B [O]  ST0  MOVQ,
  ST0  AL  PMOVMSKB,
  RAX  OU128C [O]  MOV,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpmovmskbst0->al ( -- ) 
    ." testing ST0  AL  PMOVMSKB, "
0102030405060708 OU128A CCO!  FFFFFFFD00050007 OU128A 8 + CCO!
0180808080808008 OU128B CCO!  FFFFFFFC00080009 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVMSKBST0->AL >BODY CALLPROC
    DROP  

    OU128C CCO@ 7E = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  7E U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovmskbst0->al



HEX
CODE TESTPMOVSXBWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMOVSXBW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmovsxbwm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMOVSXBW, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0081008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVSXBWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 0000FF810000FF8D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  0000FF810000FF8D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFF007FFFFFFFFE = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFF007FFFFFFFFE U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovsxbwm128->xmm0



HEX
CODE TESTPMOVSXBDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMOVSXBD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmovsxbdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMOVSXBD, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0081008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVSXBDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 00000000FFFFFF8D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  00000000FFFFFF8D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 00000000FFFFFF81 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 00000000FFFFFF81 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovsxbdm128->xmm0


HEX
CODE TESTPMOVSXBQM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMOVSXBQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmovsxbqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMOVSXBQ, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0081018D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVSXBQM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFFFFFFFF8D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFFFFFFFF8D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 1 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 1 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovsxbqm128->xmm0


HEX
CODE TESTPMOVSXWDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMOVSXWD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmovsxwdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMOVSXWD, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0081008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVSXWDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 000000810000008D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  000000810000008D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFFFF7FFFFFFFFE = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFFFF7FFFFFFFFE U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovsxwdm128->xmm0


HEX
CODE TESTPMOVSXWQM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMOVSXWQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmovsxwqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMOVSXWQ, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE8081018D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVSXWQM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 000000000000018D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  000000000000018D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFFFFFFFFFF8081 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFFFFFFFFFF8081 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovsxwqm128->xmm0


HEX
CODE TESTPMOVSXDQM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMOVSXDQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmovsxdqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMOVSXDQ, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE8081018D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVSXDQM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFF8081018D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFF8081018D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFFFFFFFF7FFFFE = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFFFFFFFF7FFFFE U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovsxdqm128->xmm0



HEX
CODE TESTPMOVZXBWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMOVZXBW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmovzxbwm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMOVZXBW, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0081008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVZXBWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 000000810000008D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  000000810000008D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 00FF007F00FF00FE = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 00FF007F00FF00FE U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovzxbwm128->xmm0



HEX
CODE TESTPMOVZXBDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMOVZXBD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmovzxbdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMOVZXBD, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0081008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVZXBDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 000000000000008D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  000000000000008D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0000000000000081 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0000000000000081 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovzxbdm128->xmm0


HEX
CODE TESTPMOVZXBQM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMOVZXBQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmovzxbqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMOVZXBQ, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0081018D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVZXBQM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 000000000000008D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  000000000000008D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 1 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 1 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovzxbqm128->xmm0


HEX
CODE TESTPMOVZXWDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMOVZXWD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmovzxwdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMOVZXWD, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE0081008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVZXWDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 000000810000008D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  000000810000008D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0000FF7F0000FFFE = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0000FF7F0000FFFE U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovzxwdm128->xmm0


HEX
CODE TESTPMOVZXWQM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMOVZXWQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmovzxwqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMOVSXWQ, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE8081018D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVZXWQM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 000000000000018D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  000000000000018D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0000000000008081 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0000000000008081 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovzxwqm128->xmm0


HEX
CODE TESTPMOVZXDQM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMOVZXDQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmovzxdqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMOVZXDQ, "
007F008000807F80 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FF7FFFFE8081018D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMOVZXDQM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 000000008081018D = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  000000008081018D U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 00000000FF7FFFFE = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 00000000FF7FFFFE U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmovzxdqm128->xmm0



HEX
CODE TESTPMULDQM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PMULDQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpmuldqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PMULDQ, "
0000000700000003 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
0000000900000005 OU128B CCO!  FFFAFFFF00000007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPMULDQM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 0F = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  0F U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 38 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 38 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpmuldqm128->xmm0


HEX
CODE TESTPSUBBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PSUBB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpsubbm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PSUBB, "
FF7F0083FF847F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FE7FFF800080028D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 01000103FF047DF3 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  01000103FF047DF3 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 000300FD00F70001 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 000300FD00F70001 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubbm128->xmm0


HEX
CODE TESTPSUBBM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PSUBB,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpsubbm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PSUBB, "
FF7F0083FF847F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FE7FFF800080028D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBBM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 01000103FF047DF3 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  01000103FF047DF3 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubbm64->st0


HEX
CODE TESTPSUBWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PSUBW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpsubwm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PSUBW, "
FF7FFF80FF807F8E OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
007FFF7F0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FF000001FF007F01 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FF000001FF007F01 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0003FFFD00F70001 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0003FFFD00F70001 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubwm128->xmm0


HEX
CODE TESTPSUBWM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PSUBW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpsubwm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PSUBW, "
FF7FFF80FF807F8E OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
007FFF7F0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBWM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FF000001FF007F01 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FF000001FF007F01 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubwm64->st0



HEX
CODE TESTPSUBDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PSUBD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpsubdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PSUBD, "
1000000000827F8E OU128A CCO!  FFFDFFFC010A0008 OU128A 8 + CCO! 
100000010081008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFF00017F01 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFF00017F01 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0002FFFD01010001 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0002FFFD01010001 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubdm128->xmm0


HEX
CODE TESTPSUBDM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PSUBD,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpsubdm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PSUBD, "
1000000000827F8E OU128A CCO!  FFFDFFFC010A0008 OU128A 8 + CCO! 
100000010081008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBDM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFF00017F01 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFF00017F01 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubdm64->st0


HEX
CODE TESTPSUBQM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PSUBQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpsubqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PSUBQ, "
1000000000827F8E OU128A CCO!  FFFDFFFC010A0008 OU128A 8 + CCO! 
100000000091008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBQM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFFFFF17F01 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFFFFF17F01 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0002FFFD01010001 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0002FFFD01010001 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubqm128->xmm0


HEX
CODE TESTPSUBDM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PSUBQ,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpsubdm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PSUBD, "
1000000000827F8E OU128A CCO!  FFFDFFFC010A0008 OU128A 8 + CCO! 
100000000091008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBDM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFFFFF17F01 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFFFFF17F01 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubdm64->st0



HEX
CODE TESTPHADDWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PHADDW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testphaddwm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PHADDW, "
000EFF8000900005 OU128A CCO!  FFFCFFFC01000008 OU128A 8 + CCO! 
007FFF7F00800003 OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPHADDWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFF80108FF8E0095 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFF80108FF8E0095 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFF90010FFFE0083 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFF90010FFFE0083 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testphaddwm128->xmm0


HEX
CODE TESTPHADDWM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PHADDW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testphaddwm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PHADDW, "
FF7F0080FF800003 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
007FFF7F0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPHADDWM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFE010DFFFFFF83 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFE010DFFFFFF83 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testphaddwm64->st0


HEX
CODE TESTPHADDSWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PHADDSW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testphaddswm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PHADDSW, "
000EFF8000900005 OU128A CCO!  FFFCFFFC01000008 OU128A 8 + CCO! 
00017FFF00800003 OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPHADDSWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFF80108FF8E0095 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFF80108FF8E0095 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFF900107FFF0083 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFF900107FFF0083 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testphaddswm128->xmm0


HEX
CODE TESTPHADDSWM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PHADDSW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testphaddswm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PHADDSW, "
FF7F0080FF800003 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
00837F7F0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPHADDSWM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 7FFF010DFFFFFF83 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  7FFF010DFFFFFF83 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testphaddswm64->st0



HEX
CODE TESTPHADDDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PHADDD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testphadddm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PHADDD, "
000EFF8000000005 OU128A CCO!  FFFCFFFC00000008 OU128A 8 + CCO! 
007FFF7F00000003 OU128B CCO!  FFFAFFFF00000007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPHADDDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFD0004000EFF85 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFD0004000EFF85 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFB0006007FFF82 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFB0006007FFF82 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testphadddm128->xmm0


HEX
CODE TESTPHADDDM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PHADDD,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testphadddm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PHADDD, "
000EFF8000000005 OU128A CCO!  FFFCFFFC00000008 OU128A 8 + CCO! 
007FFF7F00000003 OU128B CCO!  FFFAFFFF00000007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPHADDDM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 007FFF82000EFF85 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  007FFF82000EFF85 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testphadddm64->st0



HEX
CODE TESTPHSUBWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PHSUBW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testphsubwm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PHSUBW, "
000EFF8000050090 OU128A CCO!  FFFCFFFC00080100 OU128A 8 + CCO! 
007FFF7F00800003 OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPHSUBWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 000000F8FF72008B = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  000000F8FF72008B U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0005FFFEFF00FF83 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0005FFFEFF00FF83 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testphsubwm128->xmm0


HEX
CODE TESTPHSUBWM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PHSUBW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testphsubwm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PHSUBW, "
000EFF8000050090 OU128A CCO!  FFFCFFFC00080100 OU128A 8 + CCO! 
007FFF7F00800003 OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPHSUBWM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FF00FF83FF72008B = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FF00FF83FF72008B U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testphsubwm64->st0


HEX
CODE TESTPHSUBSWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PHSUBSW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testphsubswm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PHSUBSW, "
000EFF80FFFF7FFF OU128A CCO!  FFFCFFFC00080100 OU128A 8 + CCO! 
007FFF7F00800003 OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPHSUBSWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 000000F8FF727FFF = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  000000F8FF727FFF U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0005FFFEFF00FF83 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0005FFFEFF00FF83 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testphsubswm128->xmm0


HEX
CODE TESTPHSUBSWM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PHSUBSW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testphsubswm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PHSUBSW, "
000EFF80FFFF7FFF OU128A CCO!  FFFCFFFC00080100 OU128A 8 + CCO! 
007FFF7F00800003 OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPHSUBSWM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FF00FF83FF727FFF = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FF00FF83FF727FFF U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testphsubswm64->st0



HEX
CODE TESTPHSUBDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PHSUBD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testphsubdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PHSUBD, "
0000000100000005 OU128A CCO!  FFFFFFFF00000008 OU128A 8 + CCO! 
FFFFFFFF7FFFFFFF OU128B CCO!  0000000270000007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPHSUBDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 0000000900000004 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  0000000900000004 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 7000000580000000 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 7000000580000000 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testphsubdm128->xmm0


HEX
CODE TESTPHSUBDM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PHSUBD,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testphsubdm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PHSUBD, "
0000000100000005 OU128A CCO!  FFFFFFFF00000008 OU128A 8 + CCO! 
FFFFFFFF7FFFFFFF OU128B CCO!  0000000270000007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPHSUBDM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 8000000000000004 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  8000000000000004 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testphsubdm64->st0


HEX
CODE TESTPHMINPOSUWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PHMINPOSUW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testphminposuwm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PHMINPOSUW, "
000EFF80FFFF7FFF OU128A CCO!  FFFCFFFC00080100 OU128A 8 + CCO! 
007F0003FF7F0080 OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPHMINPOSUWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 20003 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  20003 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testphminposuwm128->xmm0


HEX
CODE TESTPSUBSBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PSUBSB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpsubsbm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PSUBSB, "
FF7F0083FF847F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FE7FFF8000800201 OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBSBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 01000103FF047D80 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  01000103FF047D80 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 000300FD00F70001 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 000300FD00F70001 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubsbm128->xmm0


HEX
CODE TESTPSUBSBM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PSUBSB,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpsubsbm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PSUBSB, "
FF7F0083FF847F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FE7FFF8000800201 OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBSBM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 01000103FF047D80 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  01000103FF047D80 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubsbm64->st0


HEX
CODE TESTPSUBSWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PSUBSW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpsubswm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PSUBSW, "
7FFFFF80FF807F8E OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FFFEFF7F0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBSWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 7FFF0001FF007F01 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  7FFF0001FF007F01 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0003FFFD00F70001 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0003FFFD00F70001 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubswm128->xmm0


HEX
CODE TESTPSUBSWM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PSUBSW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpsubswm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PSUBSW, "
7FFFFF80FF807F8E OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FFFEFF7F0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBSWM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 7FFF0001FF007F01 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  7FFF0001FF007F01 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubswm64->st0



HEX
CODE TESTPSUBUSBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PSUBUSB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpsubusbm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PSUBUSB, "
FF7F0083FF847F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FE7FFF8000800201 OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBUSBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 01000003FF047D7F = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  01000003FF047D7F U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0003000000000001 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0003000000000001 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubusbm128->xmm0


HEX
CODE TESTPSUBUSBM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PSUBUSB,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpsubusbm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PSUBUSB, "
FF7F0083FF847F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FE7FFF8000800201 OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBUSBM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 01000003FF047D7F = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  01000003FF047D7F U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubusbm64->st0


HEX
CODE TESTPSUBUSWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PSUBUSW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpsubuswm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PSUBUSW, "
7FFFFF80FF807F8E OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FFFEFF7F0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBUSWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 00000001FF007F01 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  00000001FF007F01 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0003000000F70001 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0003000000F70001 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubuswm128->xmm0


HEX
CODE TESTPSUBUSWM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PSUBUSW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpsubuswm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PSUBUSW, "
7FFFFF80FF807F8E OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FFFEFF7F0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSUBUSWM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 00000001FF007F01 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  00000001FF007F01 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsubuswm64->st0


HEX
CODE TESTEXTRACTPSXMM0->EAX
  OU128A [O]  RAX  MOV,
  OU128B [O]  XMM0  MOVDQA,
  2 N  XMM0  EAX  EXTRACTPS,
  RET,  
END-CODE
  
: testextractpsxmm0->eax ( -- )
    ." testing 2 N  XMM0  EAX  EXTRACTPS, "
    7FFFFF80FF807F8E OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
    FPS1.0 OU128B CCOU32!  FPS2.0 OU128B 4 + CCOU32!  FPS3.0 OU128B 8 + CCOU32!  FPS4.0 OU128B 0C + CCOU32!     
    0 ['] TESTEXTRACTPSXMM0->EAX >BODY CALLPROC  OU128C CCO!

    OU128C CCOU32@ FPS3.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS3.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ 0 = IF
      ." 2nd u32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd u32 " 0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ 0 = IF
      ." 3rd u32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd u32 " 0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ 0 = IF
      ." 4th u32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th u32 " 0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testextractpsxmm0->eax


HEX
CODE TESTEXTRACTPSXMM0->RAX
  OU128A [O]  RAX  MOV,
  OU128B [O]  XMM0  MOVDQA,
  2 N  XMM0  RAX  EXTRACTPS,  // this instruction is be encoded the same as ->EAX (checked by hand)  
  RET,  
END-CODE
  
: testextractpsxmm0->rax ( -- )
    ." testing 2 N  XMM0  RAX  EXTRACTPS, "
    7FFFFF80FF807F8E OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
    FPS1.0 OU128B CCOU32!  FPS2.0 OU128B 4 + CCOU32!  FPS3.0 OU128B 8 + CCOU32!  FPS4.0 OU128B 0C + CCOU32!     
    0 ['] TESTEXTRACTPSXMM0->RAX >BODY CALLPROC  OU128C CCO!

    OU128C CCOU32@ FPS3.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS3.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ 0 = IF
      ." 2nd u32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd u32 " 0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ 0 = IF
      ." 3rd u32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd u32 " 0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ 0 = IF
      ." 4th u32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th u32 " 0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testextractpsxmm0->rax


HEX
CODE TESTEXTRACTPSXMM0->RAXR
  OU128A [O]  RAX  MOV,
  OU128B [O]  XMM0  MOVDQA,
  2 N  XMM0  RAX R  EXTRACTPS,  // this instruction is with REX.W (checked by hand)
  RET,  
END-CODE
  
: testextractpsxmm0->raxr ( -- )
    ." testing 2 N  XMM0  RAXR  EXTRACTPS, "
    7FFFFF80FF807F8E OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
    FPS1.0 OU128B CCOU32!  FPS2.0 OU128B 4 + CCOU32!  FPS3.0 OU128B 8 + CCOU32!  FPS4.0 OU128B 0C + CCOU32!     
    0 ['] TESTEXTRACTPSXMM0->RAXR >BODY CALLPROC  OU128C CCO!

    OU128C CCOU32@ FPS3.0 = IF
      ." 1st fp32 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp32 "  FPS3.0 U.  
      ." , got " OU128C CCOU32@ U.
    THEN

    OU128C 4 + CCOU32@ 0 = IF
      ." 2nd u32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd u32 " 0 U.  
      ." , got " OU128C 4 + CCOU32@ U.
    THEN

    OU128C 8 + CCOU32@ 0 = IF
      ." 3rd u32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 3rd u32 " 0 U.  
      ." , got " OU128C 8 + CCOU32@ U.
    THEN

    OU128C 0C + CCOU32@ 0 = IF
      ." 4th u32 SUCCESS!"
    ELSE
      ." FAIL! Expected for 4th u32 " 0 U.  
      ." , got " OU128C 0C + CCOU32@ U.
    THEN

    CR
;

testextractpsxmm0->raxr



HEX
CODE TESTPCLMULQDQM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  11 N  OU128B [O]  XMM0  PCLMULQDQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpclmulqdqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PCLMULQDQ, "
2 OU128A CCO!  05 OU128A 8 + CCO! 
4 OU128B CCO!  03 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPCLMULQDQM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 0F = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  0F U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpclmulqdqm128->xmm0



HEX
CODE TESTPCMPGTBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PCMPGTB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpcmpgtbm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PCMPGTB, "
FF7F0083FF847F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FE7FFF8000800201 OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPCMPGTBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FF00FFFF00FFFF00 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FF00FFFF00FFFF00 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 00FF0000000000FF = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 00FF0000000000FF U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpcmpgtbm128->xmm0


HEX
CODE TESTPCMPGTBM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PCMPGTB,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpcmpgtbm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PCMPGTB, "
FF7F0083FF847F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FE7FFF8000800201 OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPCMPGTBM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FF00FFFF00FFFF00 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FF00FFFF00FFFF00 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpcmpgtbm64->st0


HEX
CODE TESTPCMPGTWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PCMPGTW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpcmpgtwm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PCMPGTW, "
7FFFFF80FF807F8E OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FFFEFF7F0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPCMPGTWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFF0000FFFF = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFF0000FFFF U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFF0000FFFFFFFF = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFF0000FFFFFFFF U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpcmpgtwm128->xmm0


HEX
CODE TESTPCMPGTWM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PCMPGTW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpcmpgtwm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PCMPGTW, "
7FFFFF80FF807F8E OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FFFEFF7F0080008D OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPCMPGTWM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFF0000FFFF = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFF0000FFFF U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpcmpgtwm64->st0


HEX
CODE TESTPCMPGTDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PCMPGTD,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpcmpgtdm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PCMPGTD, "
0000000100000005 OU128A CCO!  FFFFFFFF00000008 OU128A 8 + CCO! 
FFFFFFFF7FFFFFFF OU128B CCO!  0000000200000007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPCMPGTDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFF00000000 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFF00000000 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 00000000FFFFFFFF = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 00000000FFFFFFFF U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpcmpgtdm128->xmm0


HEX
CODE TESTPCMPGTDM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PCMPGTD,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpcmpgtdm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PCMPGTD, "
0000000100000005 OU128A CCO!  FFFFFFFF00000008 OU128A 8 + CCO! 
FFFFFFFF7FFFFFFF OU128B CCO!  0000000200000007 OU128B 8 + CCO!      
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPCMPGTDM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFF00000000 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFF00000000 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpcmpgtdm64->st0


HEX
CODE TESTPCMPGTQM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PCMPGTQ,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpcmpgtqm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PCMPGTQ, "
0000000100000005 OU128A CCO!  FFFFFFFF00000008 OU128A 8 + CCO! 
FFFFFFFF7FFFFFFF OU128B CCO!  0000000200000007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPCMPGTQM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ FFFFFFFFFFFFFFFF = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  FFFFFFFFFFFFFFFF U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpcmpgtqm128->xmm0


HEX
CODE TESTPSIGNBM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PSIGNB,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpsignbm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PSIGNB, "
FF7F0083FF847F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FE7FFF8000800291 OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSIGNBM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 017F007D007C7F80 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  017F007D007C7F80 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0103010400000008 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0103010400000008 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsignbm128->xmm0


HEX
CODE TESTPSIGNBM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PSIGNB,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpsignbm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PSIGNB, "
FF7F0083FF847F80 OU128A CCO!  FFFDFFFC00000008 OU128A 8 + CCO! 
FE7FFF8000800291 OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSIGNBM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 017F007D007C7F80 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  017F007D007C7F80 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsignbm64->st0



HEX
CODE TESTPSIGNWM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PSIGNW,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpsignwm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PSIGNW, "
7FFFFF80FF808000 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FFFEFF7F0080FFFF OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSIGNWM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 80010080FF808000 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  80010080FF808000 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0003000401000008 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0003000401000008 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsignwm128->xmm0


HEX
CODE TESTPSIGNWM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PSIGNW,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpsignwm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PSIGNW, "
7FFFFF80FF808000 OU128A CCO!  FFFDFFFC01000008 OU128A 8 + CCO! 
FFFEFF7F0080FFFF OU128B CCO!  FFFAFFFF00090007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSIGNWM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 80010080FF808000 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  80010080FF808000 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsignwm64->st0


HEX
CODE TESTPSIGNDM128->XMM0
  OU128A [O]  XMM0  MOVDQA,
  OU128B [O]  XMM0  PSIGND,
  XMM0  OU128C [O]  MOVDQA,
  RET,  
END-CODE
  
: testpsigndm128->xmm0 ( -- )
    ." testing OM128 [O]  XMM0  PSIGND, "
8000000100000005 OU128A CCO!  FFFFFFFE80000000 OU128A 8 + CCO! 
FFFFFFFF7FFFFFFF OU128B CCO!  0000000280000007 OU128B 8 + CCO!     
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSIGNDM128->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 7FFFFFFF00000005 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  7FFFFFFF00000005 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ FFFFFFFE80000000 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " FFFFFFFE80000000 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsigndm128->xmm0


HEX
CODE TESTPSIGNDM64->ST0
  OU128A [O]  ST0  MOVQ,
  OU128B [O]  ST0  PSIGND,
  ST0  OU128C [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testpsigndm64->st0 ( -- )
    ." testing OM64 [O]  ST0  PSIGND, "
8000000100000005 OU128A CCO!  FFFFFFFE80000000 OU128A 8 + CCO! 
FFFFFFFF7FFFFFFF OU128B CCO!  0000000280000007 OU128B 8 + CCO!      
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTPSIGNDM64->ST0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 7FFFFFFF00000005 = IF
      ." 1st fp64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st fp64 "  7FFFFFFF00000005 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd fp64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd fp64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testpsigndm64->st0


HEX
CODE TESTMOVQ2M64->XMM0
  OU128A [O]  XMM0  MOVQ2,
  XMM0  OU128C [O]  MOVQ,
  RET,  
END-CODE
  
: testmovq2m64->xmm0 ( -- )
    ." testing OM64 [O]  XMM0  MOVQ2, "
8000000100000005 OU128A CCO!  FFFFFFFE80000000 OU128A 8 + CCO!      
               0 OU128C CCO!                 0 OU128C 8 + CCO!
    0 ['] TESTMOVQ2M64->XMM0 >BODY CALLPROC
    DROP  

    OU128C CCO@ 8000000100000005 = IF
      ." 1st u64 SUCCESS! "
    ELSE
      ." FAIL! Expected for 1st u64 "  8000000100000005 U.  
      ." , got " OU128C CCO@ U.
    THEN

    OU128C 8 + CCO@ 0 = IF
      ." 2nd u64 SUCCESS!"
    ELSE
      ." FAIL! Expected for 2nd u64 " 0 U.  
      ." , got " OU128C 8 + CCO@ U.
    THEN

    CR
;

testmovq2m64->xmm0


HEX
CODE TESTMOVQXMM0->XMM1
  O3 [O]  XMM0  MOVQ,
  XMM0  XMM1  MOVQ,
  XMM1  O2 [O]  MOVQ,
  RET,  
END-CODE
  
: testmovqxmm0->xmm1 ( -- )
    ." testing  XMM0  XMM1  MOVQ, "
    0 O2 CCO!
    1122334455667789 O3 CCO!
    0 ['] TESTMOVQXMM0->XMM1 >BODY CALLPROC
    DROP  
    O2 CCO@ 1122334455667789 = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 1122334455667789 U.  // 6.0
      ." , got " O2 CCO@ U.
    THEN
    CR
;

testmovqxmm0->xmm1



HEX
CODE TESTMOVQST0->ST1
  O3 [O]  ST0  MOVQ,
  ST0  ST1  MOVQ,
  ST1  O2 [O]  MOVQ,
  EMMS, // this is needed to undo mmx state (system V abi requirement)
  RET,  
END-CODE
  
: testmovqst0->st1 ( -- )
    ." testing  ST0  ST1  MOVQ, "
    0 O2 CCO!
    112233445566778A O3 CCO!
    0 ['] TESTMOVQST0->ST1 >BODY CALLPROC
    DROP  
    O2 CCO@ 112233445566778A = IF
     ." SUCCESS!"
    ELSE
      ." FAIL! Expected " 112233445566778A U.  // 6.0
      ." , got " O2 CCO@ U.
    THEN
    CR
;

testmovqst0->st1



HEX
CODE TESTINVLPG  
  OU128B [O]  INVLPG,  // must be at privledge level 0... and I think it releases the memory pages...
                       // so this particular test won't work...
  RET,
END-CODE

: testinvlpg ( -- )
    ." testing INVLPG "
    0 ['] TESTINVLPG >BODY CALLPROC DROP
    ." SUCCESS!"
    CR
;

( testinvlpg )

OHERE CONSTANT OINCVARY2

CODE INCVARY2
  VARY N  RAX  MOV,
  RAX [R] 64BIT  INC,
  2 N  RAX  MOV,
  RET,
END-CODE


CODE TESTJMPRIP+N
  ' INCVARY2 >BODY // ." target = " DUP U.  
  CODE-HERE 5 +   // ." source = " DUP U. // instruction size is 5 bytes
  -  RIP+N JMP, 
  5 N  RAX  MOV,
  RET,
END-CODE

: testjmprip+n ( -- )
    ." testing TESTJMPEIP+N "
    12345687 VARY !
    0 ['] TESTJMPRIP+N >BODY CALLPROC
    VARZ !
    CR
    VARY @ 12345688 =
    IF
      ."  SUCCESS! correct result"
    ELSE
      ."  FAIL! Expected result = " 12345688 U. 
      ." , got " VARY @ U.
    THEN
    CR
    VARZ @ 2 =
    IF
      ."  SUCCESS! correct return"
    ELSE
      ."  FAIL! Expected return = " 2 U. 
      ." , got " VARZ @ U.
    THEN 
    CR
;

testjmprip+n


CODE TESTJMPR
  ' INCVARY2 >BODY N  RAX MOV,
  RAX JMP, 
  5 N  RAX  MOV,
  RET,
END-CODE

: testjmpr ( -- )
    ." testing TESTJMPR "
    12345685 VARY !
    0 ['] TESTJMPR >BODY CALLPROC
    VARZ !
    CR
    VARY @ 12345686 =
    IF
      ."  SUCCESS! correct result"
    ELSE
      ."  FAIL! Expected result = " 12345686 U. 
      ." , got " VARY @ U.
    THEN
    CR
    VARZ @ 2 =
    IF
      ."  SUCCESS! correct return"
    ELSE
      ."  FAIL! Expected return = " 2 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testjmpr


CODE TESTJMPM
  VARX N  RSI  MOV,
  ' INCVARY2 >BODY N  RDI  MOV, 
  RDI  RSI [R]  MOV,
  RSI [R]  JMP,
  5 N  RAX  MOV, 
  RET,
END-CODE


: testjmpm ( -- )
    ." testing TESTJMPM "
    12345683 VARY !
    0 ['] TESTJMPM >BODY CALLPROC
    VARZ !
    CR
    VARY @ 12345684 =
    IF
      ."  SUCCESS! correct result "
    ELSE
      ."  FAIL! Expected result = " 12345684 U. 
      ." , got " VARY @ U.
    THEN
    CR
    VARZ @ 2 =
    IF
      ."  SUCCESS! correct return "
    ELSE
      ."  FAIL! Expected return = " 2 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testjmpm


CODE TESTJMPO 
  OINCVARY2 O JMP,
  5 N  RAX  MOV, 
  RET,
END-CODE


: testjmpo ( -- )
    ." testing TESTJMPO "
    12345683 VARY !
    0 ['] TESTJMPO >BODY CALLPROC
    VARZ !
    CR
    VARY @ 12345684 =
    IF
      ."  SUCCESS! correct result "
    ELSE
      ."  FAIL! Expected result = " 12345684 U. 
      ." , got " VARY @ U.
    THEN
    CR
    VARZ @ 2 =
    IF
      ."  SUCCESS! correct return "
    ELSE
      ."  FAIL! Expected return = " 2 U. 
      ." , got " VARZ @ U.
    THEN
    CR
;

testjmpo


CODE TEST20NRDISHR
  20 N  RDI  SHR,  
  RDI  RAX  MOV,
  RET,
END-CODE


: test20nrdishr ( -- )
    ." testing 20 N  RDI  SHR, "
    1112131415161718 1 ['] TEST20NRDISHR >BODY CALLPROC VARZ !

    CR
    VARZ @ 11121314 =
    IF
      ."  SUCCESS! correct result "
    ELSE
      ."  FAIL! Expected result = " 11121314 U. 
      ." , got " VARZ @ U.
    THEN

    CR
;

test20nrdishr

// ' TEST20NRDISHR >BODY HEX 20 DUMP

CODE TEST[R][R]MOV,
    RDI PUSH,
    RSP RDX MOV,
    RSI PUSH,
    RSP RCX MOV,
    RDX [R]  RCX [R]  MOV,
    RAX POP,  RDI POP,
    RET,
END-CODE


: test[r][r]mov, ( -- )
    ." testing RDX [R] RCX [R] MOV,"
    1112131415161718 1 ['] TEST[R][R]MOV, >BODY CALLPROC VARZ !

    CR
    VARZ @ 1112131415161718 =
    IF
      ."  SUCCESS! correct result "
    ELSE
      ."  FAIL! Expected result = " 1112131415161718 U. 
      ." , got " VARZ @ U.
    THEN

    CR
;

test[r][r]mov,


CODE TEST[R+N][R+N]MOV,
    RDI PUSH,
    RSI PUSH,
    RSP RDX MOV,
    RSI PUSH,
    RSP RCX MOV,
    RDX 8 [R+N]  RCX 8 [R+N]  MOV,
    RDI POP,  RAX POP,  RSI POP,
    RET,
END-CODE


: test[r+n][r+n]mov, ( -- )
    ." testing RDX 8 [R+N] RCX 8 [R+N] MOV,"
    1112131415161718 1 ['] TEST[R+N][R+N]MOV, >BODY CALLPROC VARZ !

    CR
    VARZ @ 1112131415161718 =
    IF
      ."  SUCCESS! correct result "
    ELSE
      ."  FAIL! Expected result = " 1112131415161718 U. 
      ." , got " VARZ @ U.
    THEN

    CR
;

test[r+n][r+n]mov,


CODE TEST[R][R]MOVQ,
    RDI PUSH,
    RSP RDX MOV,
    RSI PUSH,
    RSP RCX MOV,
    RDX [R]  RCX [R]  MOVQ,
    RAX POP,  RDI POP,
    RET,
END-CODE


: test[r][r]movq, ( -- )
    ." testing RDX [R] RCX [R] MOVQ,"
    1112131415161718 1 ['] TEST[R][R]MOVQ, >BODY CALLPROC VARZ !

    CR
    VARZ @ 1112131415161718 =
    IF
      ."  SUCCESS! correct result "
    ELSE
      ."  FAIL! Expected result = " 1112131415161718 U. 
      ." , got " VARZ @ U.
    THEN

    CR
;

test[r][r]movq,


CODE TEST[R]8BIT[R]MOV,
    RDI PUSH,
    RSP RDX MOV,
    RSI RSI XOR,
    RSI PUSH,
    RSP RCX MOV,
    RDX [R]  RCX [R]  8BIT  MOV,
    RAX POP,  RDI POP,
    RET,
END-CODE


: test[r][r]8bitmov, ( -- )
    ." testing RDX [R] RCX [R] 8BIT MOV,"
    1112131415161718 1 ['] TEST[R]8BIT[R]MOV, >BODY CALLPROC VARZ !

    CR
    VARZ @ 18 =
    IF
      ."  SUCCESS! correct result "
    ELSE
      ."  FAIL! Expected result = " 18 U. 
      ." , got " VARZ @ U.
    THEN

    CR
;

test[r][r]8bitmov,


CODE TEST[R]16BIT[R]MOV,
    RDI PUSH,
    RSP RDX MOV,
    RSI RSI XOR,
    RSI PUSH,
    RSP RCX MOV,
    RDX [R]  RCX [R]  16BIT  MOV,
    RAX POP,  RDI POP,
    RET,
END-CODE


: test[r][r]16bitmov, ( -- )
    ." testing RDX [R] RCX [R] 16BIT MOV,"
    1112131415161718 1 ['] TEST[R]16BIT[R]MOV, >BODY CALLPROC VARZ !

    CR
    VARZ @ 1718 =
    IF
      ."  SUCCESS! correct result "
    ELSE
      ."  FAIL! Expected result = " 1718 U. 
      ." , got " VARZ @ U.
    THEN

    CR
;

test[r][r]16bitmov,



CODE TEST[R]32BIT[R]MOV,
    RDI PUSH,
    RSP RDX MOV,
    RSI RSI XOR,
    RSI PUSH,
    RSP RCX MOV,
    RDX [R]  RCX [R]  32BIT  MOV,
    RAX POP,  RDI POP,
    RET,
END-CODE


: test[r][r]32bitmov, ( -- )
    ." testing RDX [R] RCX [R] 32BIT MOV,"
    1112131415161718 1 ['] TEST[R]32BIT[R]MOV, >BODY CALLPROC VARZ !

    CR
    VARZ @ 15161718 =
    IF
      ."  SUCCESS! correct result "
    ELSE
      ."  FAIL! Expected result = " 15161718 U. 
      ." , got " VARZ @ U.
    THEN

    CR
;

test[r][r]32bitmov,


CR ." ***********"
CR ." Stack Check"
CR .S
CR


// testclac ( need to be running at priveledge level 0 to test... )

// CMPXCHG8B  0F C7 M/1 nnnnnnnn nnnnnnnn

// CFLUSH  0F AE M/7 (byte)

// REP, REPE, REPNE, MOVSB, CMPSB, SCASB, etc


// print out decimal int
// print out hex int
// print out string
// print out float (try anyways)

// inline skip over string constant
// string constant in same buffer
// string constant at offset bufferid in same buffer (pc relative full calculation)
// string constant at offset bufferid in same buffer (relative to base register address) 
// string constant in another buffer
// string constant in core (at absolute address)

// Diaperglu Forth script from assembler

// accessing memory allocated with VARIABLE or ALLOT
// accessing a variable at offset bufferid
// cbuffer from assembler
// clstering from assembler
// chlist from assembler

// (shouldn't have variable in same buffer)

// 10010110000
