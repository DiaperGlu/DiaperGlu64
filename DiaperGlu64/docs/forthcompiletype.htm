<!--
// //////////////////////////////////////////////////////////////////////////////////////
//
//    Copyright 2023 James Patrick Norris
//
//    This file is part of DiaperGlu v5.13.
//
//    DiaperGlu v5.13 is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    DiaperGlu v5.13 is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with DiaperGlu v5.13; if not, write to the Free Software
//    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// //////////////////////////////////////////////////////////////////////////////////////

// /////////////////////////////
// James Patrick Norris       //
// www.rainbarrel.com         //
// February 2, 2025           //
// version 5.13               //
// /////////////////////////////
-->


<html>

  <head>
    <link rel='stylesheet' type='text/css' href='diaperglu.css'>
  </head>

  <body><div id=content>

    <div id=pageheader>
      forthcompiletype.cpp functions
    </div>
    
    <div id=sitedirectory>
      <a href=index.htm>Home</a>
      <a href=building.htm>Building</a>
      <a href=usingcgi.htm>DHTML Scripting</a>
      <a href=usingdiaperglu.htm>Using Diaperglu</a>
      <a href=documentationkey.htm>Documention Key</a>
      <a href=diapergluwords.htm>Script Commands Reference</a>
      <a href=cfunctions.htm>C Library API Reference</a>
      <a href=reference.htm>Handy References</a>
      <a href=about.htm>About</a>
      <a href=license.htm>License</a>
      <a href=contact.htm>Contact</a>
      <a href=forthdraftstandard.htm>Forth Draft Standard</a>
    </div>

    <div id=pagedirectory>
      
        <a href=index.htm                                                      >Directory</a>
        <a href=documentationkey.htm                                           >Documentation key</a>
        <a                                                                     >&nbsp;</a>

        <a                                                                     >C functions</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypealwaysexecute        >OCRALWAYSEXECUTE</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypesubroutine           >OCREXECUTE</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypesafesubroutine       >OCRSAFEEXECUTE</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypedpushn               >OCRPUSHN</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypedpushdn              >OCRPUSHDN</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypedpushp               >OCRPUSHBUFADDR</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypedpushs               >OCRPUSH$</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypewordsstringquotes    >OCRWORDS$&quot;</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypewords0stringquotes   >OCRWORDS0$&quot;</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletyperunfileandwaitnoenvquotes    >OCRRUNFILEANDWAITNOENV&quot;</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypecdecl                >OCRCALLPROC</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypecdeclretuint128      >OCRCALLPROCRETUINT128</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypecppmemberfunction    >OCRCALLCPPMEMBER</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypecall                 >OCRCALL</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypebracketwordlistdot   >OCR[WORDLIST.]</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypebracketlibdot        >OCR[LIB.]</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypevalue                >OCRVALUE</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypefvalue               >OCRFVALUE</a>
        <a href=forthcompiletype.htm#dg_forthdocompiletypetwovalue             >OCR2VALUE</a>
      
    </div>

    <div id=pagestuff>

      <div class=word id=dg_forthdocompiletypealwaysexecute>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypealwaysexecute ( OCRALWAYSEXECUTE ) 
//
// C prototype:
//  void dg_forthdocompiletypealwaysexecute (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid state -- )
//
// Data stack in:
//  bufferid                      buffer the target routine is in
//  bufferoffset                  offset in bytes of the target routine in the buffer
//  state                         the state action for the target routine to do
//                                                            
// Action:
//   calls the routine at bufferoffset in bufferid regardless of the state passed in
//
// Failure cases:
//  subroutine may report errors
//
// See Also:
//  <a href='forthwordlist.htm#dg_forthnewdefinition'>NEWDEFINITION</a>
//  <a href='forthwordlist.htm#dg_forthputnewestdefinitioncompiletype'>PUTNEWESTDEFINITIONCOMPILETYPE</a>
//  <a href='forthwordlist.htm#dg_forthsetocr'>SETOCR</a>
//
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>

      <div class=word id=dg_forthdocompiletypesubroutine>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypesubroutine ( OCREXECUTE )
//
// C prototype:
//  void dg_forthdocompiletypesubroutine (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid state -- )
//
// Data stack in:
//  dataoffset                    offset in bytes of the target routine in the buffer
//  databufid                     buffer the target routine is in
//  state                         the state action for the target routine to do
//                                                            
// Action:
//  Removes dataoffset and databufid from the data stack then:
//   If state is execute, this calls the routine at bufferoffset in bufferid 
//   If state is compile, this compiles a call to the routine at 
//    bufferoffset in bufferid
//   If state is anything else, this does nothing
//
// Failure cases:
//  error getting a pointer to the data stack
//  data stack underflow
//  error getting the state
//  
// See Also:
//  <a href='forthwordlist.htm#dg_forthnewdefinition'>NEWDEFINITION</a>
//  <a href='forthwordlist.htm#dg_forthputnewestdefinitioncompiletype'>PUTNEWESTDEFINITIONCOMPILETYPE</a>
//  <a href='forthwordlist.htm#dg_forthsetocr'>SETOCR</a>
//
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>
      

      <div class=word id=dg_forthdocompiletypesafesubroutine>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypesafesubroutine ( OCRSAFEEXECUTE )
//
// C prototype:
//  void dg_forthdocompiletypesafesubroutine (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid -- )
//  
// Data stack in:
//  dataoffset                     offset of the target routine in the buffer
//  databufid                      buffer the target routine is in
//                                                            
// Action:
//  Removes dataoffset and databufid from the data stack then:
//   If the script processing state is execute, this calls the routine at bufferoffset 
//    in bufferid 
//   If the script processing state is compile, this compiles a safe call to the 
//    routine at bufferoffset in bufferid and sets the flag showing a safe call was 
//    compiled.
//   If the script processing state is anything else, this does nothing
//
//  Note: The default safe behavior errs on the side of caution. Only compiling words
//    and words that could be used to push to the current compile buffer need to be 
//    marked as safe. Safe subroutine calls execute slower but can handle the case 
//    where the buffer they are called from relocates while they are executing.
//
// Failure cases:
//  error getting the state
//  
// See Also:
//  <a href='forthwordlist.htm#dg_forthnewdefinition'>NEWDEFINITION</a>
//  <a href='forthwordlist.htm#dg_forthputnewestdefinitioncompiletype'>PUTNEWESTDEFINITIONCOMPILETYPE</a>
//  <a href='forthwordlist.htm#dg_forthsetocr'>SETOCR</a>
//
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>
      

      <div class=word id=dg_forthdocompiletypedpushn>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypedpushn ( OCRPUSHN ) 
//
// C prototype:
//  void dg_forthdocompiletypedpushn (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid -- )
//
// Data stack in:
//  dataoffset                    n
//  databufid                     this is 0 (doesn't really matter what this is) 
//  state                         the state action for the target routine to do
//                                                            
// Action:
//  Removes dataoffset and databufid from the data stack then:
//   If state is execute, this pushes n (the data offset) to the data stack 
//   If state is compile, this compiles push n to the data stack
//   If state is anything else, this does nothing
//
// Failure cases:
//  error getting the state
//  
// See Also:
//  <a href='forthwordlist.htm#dg_forthnewdefinition'>NEWDEFINITION</a>
//  <a href='forthwordlist.htm#dg_forthputnewestdefinitioncompiletype'>PUTNEWESTDEFINITIONCOMPILETYPE</a>
//  <a href='forthwordlist.htm#dg_forthsetocr'>SETOCR</a>
//
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>
      

      <div class=word id=dg_forthdocompiletypedpushdn>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypedpushdn ( OCRPUSHDN )
//
// C prototype:
//  void dg_forthdocompiletypedpushdn (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid -- )
//
// Data stack in:
//  dataoffset                    n lo
//  databufid                     n hi
//  state                         the state action for the target routine to do
//                                                            
// Action:
//  Removes dataoffset and databufid from the data stack then:
//   If state is execute, this pushes n lo n hi to the data stack 
//   If state is compile, this compiles push n lo n hi to the 
//    data stack
//   If state is anything else, this does nothing
//
// Failure cases:
//  error getting the state
//
// See Also:
//  <a href='forthwordlist.htm#dg_forthnewdefinition'>NEWDEFINITION</a>
//  <a href='forthwordlist.htm#dg_forthputnewestdefinitioncompiletype'>PUTNEWESTDEFINITIONCOMPILETYPE</a>
//  <a href='forthwordlist.htm#dg_forthsetocr'>SETOCR</a>
//  
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>


      <div class=word id=dg_forthdocompiletypedpushp>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypedpushp ( OCRPUSHBUFADDR )
//
// C prototype:
//  void dg_forthdocompiletypedpushp (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid -- )
// 
// Data stack in:
//  dataoffset                    n lo
//  databufid                     n hi
//  state                         the state action for the target routine to do
//                                                            
// Action:
//  Removes dataoffset and databufid from the data stack then:
//   If state is execute, this calculates and pushes the address 
//    to the data stack 
//   If state is compile, this compiles calculate and push address 
//    to the data stack
//   If state is anything else, this does nothing
//
// Failure cases:
//  error getting the state
//
// See Also:
//  <a href='forthwordlist.htm#dg_forthnewdefinition'>NEWDEFINITION</a>
//  <a href='forthwordlist.htm#dg_forthputnewestdefinitioncompiletype'>PUTNEWESTDEFINITIONCOMPILETYPE</a>
//  <a href='forthwordlist.htm#dg_forthsetocr'>SETOCR</a>
//  
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>


      <div class=word id=dg_forthdocompiletypedpushs>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypedpushs ( OCRPUSH$ ) 
//
// C prototype:
//  void dg_forthdocompiletypedpushs (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid state -- )
// 
// Data stack in:
//  dataoffset                    not used
//  databufid                     not used
//  state                         the state action for the target routine to do
//                                                            
// Action:
//  Removes dataoffset and databufid from the data stack then:
//   If state is execute, this parses until " and pushes the parsed 
//    string to the string stack 
//   If state is compile, this parses until " and compiles push 
//    a copy of the parsed string to the string stack
//   If state is anything else, this does nothing
//
// Failure cases:
//  error getting the state
//  
// See Also:
//  <a href='forthwordlist.htm#dg_forthnewdefinition'>NEWDEFINITION</a>
//  <a href='forthwordlist.htm#dg_forthputnewestdefinitioncompiletype'>PUTNEWESTDEFINITIONCOMPILETYPE</a>
//  <a href='forthwordlist.htm#dg_forthsetocr'>SETOCR</a>
//
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>
      

      <div class=word id=dg_forthdocompiletypewordsstringquotes>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypewordsstringquotes ( OCRWORDS$&quot; )
//
// C prototype:
//  void dg_forthdocompiletypewordsstringquotes (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is
//                                 used as the bufferhandle for the array where the
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid state -- )
//
// Data stack in:
//  dataoffset                    not used
//  databufid                     not used
//  state                         the state action for the target routine to do
//
// Action:
//  Removes dataoffset and databufid from the data stack then:
//   If state is execute, this parses words until " and pushes
//    each parsed word string to the string stack
//   If state is compile, this parses words until " and
//    compiles push a copy of each parsed word string to the string stack
//   If state is anything else, this does nothing
//
// Failure cases:
//  error getting the state
//
// See Also:
//  <a href='forthwordlist.htm#dg_forthnewdefinition'>NEWDEFINITION</a>
//  <a href='forthwordlist.htm#dg_forthputnewestdefinitioncompiletype'>PUTNEWESTDEFINITIONCOMPILETYPE</a>
//  <a href='forthwordlist.htm#dg_forthsetocr'>SETOCR</a>
//
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>
      
      
      <div class=word id=dg_forthdocompiletypewords0stringquotes>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypewords0stringquotes ( OCRWORDS0$&quot; )
//
// C prototype:
//  void dg_forthdocompiletypewords0stringquotes (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is
//                                 used as the bufferhandle for the array where the
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid state -- )
//
// Data stack in:
//  dataoffset                    not used
//  databufid                     not used
//  state                         the state action for the target routine to do
//
// Action:
//  Removes dataoffset and databufid from the data stack then:
//   If state is execute, this parses words until " and pushes
//    each parsed word string with a null terminator added onto the end
//    to the string stack
//   If state is compile, this parses words until " and
//    compiles push a copy of each parsed word string with a null terminator added
//    onto the end to the string stack
//   If state is anything else, this does nothing
//
// Failure cases:
//  error getting the state
//
// See Also:
//  <a href='forthwordlist.htm#dg_forthnewdefinition'>NEWDEFINITION</a>
//  <a href='forthwordlist.htm#dg_forthputnewestdefinitioncompiletype'>PUTNEWESTDEFINITIONCOMPILETYPE</a>
//  <a href='forthwordlist.htm#dg_forthsetocr'>SETOCR</a>
//
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>
      

      <div class=word id=dg_forthdocompiletyperunfileandwaitnoenvquotes>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletyperunfileandwaitnoenvquotes ( OCRRUNFILEANDWAITNOENV&quot; )
//
// C prototype:
//  void dg_forthdocompiletyperunfileandwaitnoenvquotes (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is
//                                 used as the bufferhandle for the array where the
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid state -- )
//
// Data stack in:
//  dataoffset                    not used
//  databufid                     not used
//  state                         the state action for the target routine to do
//
// Action:
//  Removes dataoffset and databufid from the data stack then:
//   If state is execute, this parses words until " and then
//    uses the first word parsed as a filename to run, then passes all the words
//    parsed as arguments to the filename to run, then runs the filename with a
//    null environment passed in then waits for it to completely finish running.
//   If state is compile, this parses words until " and then
//    uses the first word parsed as a filename to run, and all the words
//    as arguments, then this compiles code to run the filename with the argurments
//    parsed a null environment passed in,
//    then waits for it to completely finish running.
//   If state is anything else, this does nothing
//
// Failure cases:
//  error getting the state
//
// See Also:
//  <a href='forthwordlist.htm#dg_forthnewdefinition'>NEWDEFINITION</a>
//  <a href='forthwordlist.htm#dg_forthputnewestdefinitioncompiletype'>PUTNEWESTDEFINITIONCOMPILETYPE</a>
//  <a href='forthwordlist.htm#dg_forthsetocr'>SETOCR</a>
//
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>


      <div class=word id=dg_forthdocompiletypecdecl>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypecdecl ( OCRCALLPROC )
//
// C prototype:
//  void dg_forthdocompiletypecdecl (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid state -- )
// 
// Data stack in:
//  dataoffset                    address or offset in buffer of the proc
//  databufid                     DG_CORE_BUFFERID or bufferid of the proc
//  state                         the state action for the target routine to do
//                                                            
// Action:
//  Removes dataoffset and databufid from the data stack then:
//   If state is execute, calls the proc at dataoffset databufid 
//   If state is compile, this compiles a call to the proc at
//    at dataoffset databufid
//   If state is anything else, this does nothing
//
// Note:
//  This lets you call cdecl, stdcall, and c++ functions from the DiaperGlu
//   script. DiaperGlu can do this because the DiaperGlu frame keeps track 
//   of the number of locals on the the return stack, and the depth, 
//   and uses that to reset the return stack before each call.
//
//  When building a call to a word with this compile type, the parameters
//   go on the data stack in reverse order, the number of paramaters for the
//   the call go on the data stack after the parameters, then
//   the word with this compile type is used. Diaperglu will move the
//   parameters to the return stack before calling the word's function.
//
//  If you are calling C++ functions, the first parameter is the instance
//   pointer.
//  
// See Also:
//  <a href='forthwordlist.htm#dg_forthnewdefinition'>NEWDEFINITION</a>
//  <a href='forthwordlist.htm#dg_forthputnewestdefinitioncompiletype'>PUTNEWESTDEFINITIONCOMPILETYPE</a>
//  <a href='forthwordlist.htm#dg_forthsetocr'>SETOCR</a>
//
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>


      <div class=word id=dg_forthdocompiletypecdeclretuint128>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypecdeclretuint128 ( OCRCALLPROCRETUINT128 )
//
// C prototype:
//  void dg_forthdocompiletypecdeclretuint128 (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid state -- )
// 
// Data stack in:
//  dataoffset                    address of the proc
//  databufid                     not used - usually set to core buffer id
//  state                         the state action for the target routine to do
//                                                            
// Action:
//  Removes dataoffset and databufid from the data stack then:
//   If state is execute, calls the proc address at dataoffset 
//   If state is compile, this compiles a call to the proc address 
//    at dataoffset
//   If state is anything else, this does nothing
//
// Note:
//  On return, the compiled code sets the return stack pointer back to
//   where it was before the call.
//
//  When building a call to a word with this compile type, the parameters
//   go on the data stack in reverse order, the number of paramaters for the
//   the call go on the data stack after the parameters, then
//   the word with this compile type is used. Diaperglu will move the
//   parameters to registers and/or the return stack before calling the proc.
//  
// See Also:
//  <a href='forthwordlist.htm#dg_forthnewdefinition'>NEWDEFINITION</a>
//  <a href='forthwordlist.htm#dg_forthputnewestdefinitioncompiletype'>PUTNEWESTDEFINITIONCOMPILETYPE</a>
//  <a href='forthwordlist.htm#dg_forthsetocr'>SETOCR</a>
//
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>


      <div class=word id=dg_forthdocompiletypecppmemberfunction>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypecppmemberfunction ( OCRCALLCPPMEMBER ) 
//
// C prototype:
//  void dg_forthdocompiletypecppmemberfunction (Bufferhandle* pBHarrayhead)
//
// C prototype:
//  void dg_forthdocompiletypecppmemberfunction (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid state -- )
// 
// Data stack in:
//  dataoffset                    address or buffer offset of the proc
//  databufid                     CORE_BUFFER_ID or bufferid of the proc
//  state                         the state action for the target routine to do
//                                                            
// Action:
//  Removes dataoffset and databufid from the data stack then:
//   If the script processing state is execute, calls the proc address at dataoffset 
//   If the script processing state is compile, this compiles a call to the proc address 
//    at dataoffset
//   If the script processing state is anything else, this does nothing
//
// Note:
//  On return, the compiled code sets the return stack pointer back to
//   where it was before the call.
//
//  When building a call to a word with this compile type, the parameters
//   go on the data stack in reverse order, the number of paramaters for the
//   the call go on the data stack after the parameters, then
//   the word with this compile type is used. Diaperglu will move the
//   parameters to the return stack before calling the word's function.
//
//  Also, the 'this' pointer is included in the parameter count. Yes, this
//   makes setting up the call the same as for cdecl and stdcall.
//
// See Also:
//  <a href='forthwordlist.htm#dg_forthnewdefinition'>NEWDEFINITION</a>
//  <a href='forthwordlist.htm#dg_forthputnewestdefinitioncompiletype'>PUTNEWESTDEFINITIONCOMPILETYPE</a>
//  <a href='forthwordlist.htm#dg_forthsetocr'>SETOCR</a>
//
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>
      
      
      <div class=word id=dg_forthdocompiletypecall>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypecall ( OCRCALL )
//
// C prototype:
//  void dg_forthdocompiletypecall (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid state -- )
// 
// Data stack in:
//  dataoffset                    offset of the subroutine in buffer
//  databufid                     bufferid of buffer containing subroutine
//  state                         the state action for the target routine to do
//                                                            
// Action:
//  Removes state, dataoffset and databufid from the data stack then:
//   This compile type ignores state.
//   If the bufferid is the same as the calling routine, compiles a relative call to 
//    the subroutine
//   If the bufferid is DG_CORE_BUFFERID, compiles a call to an absolute address 
//    - note that this case trashes the RAX register.
//   If the bufferid is not the same as the calling routine or DG_CORE_BUFFERID, errors 
//    are pushed to the error stack.
//
// Note:
//  The assembler uses this compile type.
//  No setup or cleanup is performed. This is just a straight simple call. Nothing is 
//   pushed to the return stack before the call, and nothing is popped off the return 
//   stack after. You have to do that.
//
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>


      <div class=word id=dg_forthdocompiletypebracketwordlistdot>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypebracketwordlistdot ( OCR[WORDLIST.] )
//
// C prototype:
//  void dg_forthdocompiletypebracketwordlistdot (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid state -- )
// 
// Data stack in:
//  dataoffset                    word list id of the wordlist to search
//  databufid                     not used
//  state                         the state action for the target routine to do
//                                                            
// Action:
//  Ignores state passed in.
//  Removes databufid from the data stack then does WORDLIST which is the 
//   following:
//    Pops dataoffset off the data stack and uses it as the wordlist id of the
//     wordlist to search.
//    Then parses the next wordname in the current input buffer. 
//    Then searches the wordlist for the wordname.
//    If the wordname is found, this uses the state passed in to do the state action
//     of the word.
//    If the wordname is not found, this pushes an error to the error stack.
//
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>


      <div class=word id=dg_forthdocompiletypebracketlibdot>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypebracketlibdot ( OCR[LIB.] )
//
// C prototype:
//  void dg_forthdocompiletypebracketlibdot (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid state -- )
// 
// Data stack in:
//  dataoffset                    handle of shared library to search
//  databufid                     not used
//  state                         the state action for the target routine to do
//                                                            
// Action:
//  Ignores state passed in.
//  Removes databufid from the data stack then does LIB. which is the 
//   following:
//    Pops dataoffset off the data stack and uses it as the handle of the
//     shared library to search.
//    Then parses the next wordname in the current input buffer. 
//    Then searches the shared library for the symbol with wordname.
//    If the wordname is found, 
//      if state is execute it pushes the symbol's value to the data stack
//      if state is compile it compiles code to push the symbol's vlue to the 
//        data stack 
//    If the wordname is not found, this pushes an error to the error stack.
//
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>


      <div class=word id=dg_forthdocompiletypevalue>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypevalue ( OCRVALUE )
//
// C prototype:
//  void dg_forthdocompiletypevalue (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid state -- )
// 
// Data stack in:
//  dataoffset                    uint64 offset
//  databufid                     uint64 bufferid
//  state                         the state action for the target routine to do
//                                                            
// Action:
//  Removes dataoffset and databufid from the data stack then:
//   If state is execute, this pushes the uint64 value in memory 
//    at the dataoffset in buffer databufid to the data stack. 
//   If state is compile, this compiles code that pushes the uint64 
//    value in memory at the dataoffset in buffer databufid to the data stack. 
//   If state is anything else, this does nothing
//  
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>


      <div class=word id=dg_forthdocompiletypefvalue>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypefvalue ( OCRFVALUE )
//
// C prototype:
//  void dg_forthdocompiletypefvalue (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid state -- )
// 
// Data stack in:
//  dataoffset                    f64 value offset
//  databufid                     f64 value bufferid
//  state                         the state action for the target routine to do
//                                                            
// Action:
//  Removes dataoffset and databufid from the data stack then:
//   If state is execute, this pushes the uint64 value in memory 
//    at the dataoffset in buffer databufid to the f64 stack. 
//   If state is compile, this compiles code that pushes the uint64 
//    value in memory at the dataoffset in buffer databufid to the f64 stack. 
//   If the script processing state is anything else, this does nothing
//  
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>


      <div class=word id=dg_forthdocompiletypetwovalue>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdocompiletypetwovalue ( OCR2VALUE )
//
// C prototype:
//  void dg_forthdocompiletypetwovalue (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( dataoffset databufid -- )
// 
// Data stack in:
//  dataoffset                    uint 128 offset
//  databufid                     uint 128 bufferid
//  state                         the state action for the target routine to do
//                                                            
// Action:
//  Removes dataoffset and databufid from the data stack then:
//   If state is execute, this pushes the uint128 value in memory 
//    at the dataoffset in buffer databufid to the data stack. 
//   If state is compile, this compiles code that pushes the 
//    uint128 value in memory at the dataoffset in buffer databufid to the data stack. 
//   If the script processing state is anything else, this does nothing
//
// Note:
//  The hi uint64 of the uint128 value is at the offset bufferid, the lo uint64 comes
//   after the hi in memory. When the uint128 is pushed to the data stack, the lo
//   uint64 is pushed first, then the hi uint64 is on top.
//  
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>

    </div>

  </div></body>
</html>
