<!--
// //////////////////////////////////////////////////////////////////////////////////////
//
//    Copyright 2025 James Patrick Norris
//
//    This file is part of DiaperGlu v5.14.
//
//    DiaperGlu v5.14 is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    DiaperGlu v5.14 is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with DiaperGlu v5.14; if not, write to the Free Software
//    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// //////////////////////////////////////////////////////////////////////////////////////

// /////////////////////////////
// James Patrick Norris       //
// www.rainbarrel.com         //
// February 20, 2025          //
// version 5.14               //
// /////////////////////////////
-->

<html>

  <head>
    <link rel='stylesheet' type='text/css' href='diaperglu.css'>
  </head>

  <body><div id=content>

    <div id=pageheader>
      forthprogrammingtools.cpp functions
    </div>
    
    <div id=sitedirectory>
      <a href=index.htm>Home</a>
      <a href=building.htm>Building</a>
      <a href=usingcgi.htm>DHTML Scripting</a>
      <a href=usingdiaperglu.htm>Using Diaperglu</a>
      <a href=documentationkey.htm>Documention Key</a>
      <a href=diapergluwords.htm>Script Commands Reference</a>
      <a href=cfunctions.htm>C Library API Reference</a>
      <a href=reference.htm>Handy References</a>
      <a href=about.htm>About</a>
      <a href=license.htm>License</a>
      <a href=contact.htm>Contact</a>
      <a href=forthdraftstandard.htm>Forth Draft Standard</a>
    </div>

    <div id=pagedirectory>
      
      <a href=index.htm                                       >Directory</a>
      <a href=documentationkey.htm                            >Documentation key</a>
      <a                                                      >&nbsp;</a>

      <a                                                      >C Functions</a>
      <a href=forthprogrammingtools.htm#dg_forthdots          >dg_forthdots</a>
      <a href=forthprogrammingtools.htm#dg_forthdumphex       >dg_forthdumphex</a>
      <a href=forthprogrammingtools.htm#dg_forthwords         >dg_forthwords</a>
      <a href=forthprogrammingtools.htm#dg_forthbye           >dg_forthbye</a>
      <a href=forthprogrammingtools.htm#dg_forthsynonym       >dg_forthsynonym</a>
      <a href=forthprogrammingtools.htm#dg_forthif            >dg_forthif</a>
      <a href=forthprogrammingtools.htm#dg_forthelse          >dg_forthelse</a>
      <a href=forthprogrammingtools.htm#dg_forththen          >dg_forththen</a>
      
    </div>

    <div id=pagestuff>

      <div class=word id=dg_forthdots>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdots ( .S )  
//
// C prototype:
//  void dg_forthdots (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( -- )
//                                                            
// Action:
//  displays the contents of the data stack from first pushed to most recently pushed
//
// Forth standard:
//  15.6.1.0220
//
// Failure cases:
//  not checked
//  
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>


      <div class=word id=dg_forthdumphex>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthdumphex ( DUMP )
//
// C prototype:
//  void dg_forthdumphex (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead  pointer to a Bufferhandle structure which is 
//
//
// Stack action shorthand:
//  ( addr length -- )
//
// Data stack in:
//  addr                        start address of memory to display
//  length                      length of memory to display
//
// Action:
//  displays memory in DUMP format
//
// Forth standard:
//  15.6.1.1280
//
// Failure cases:
//  error popping parameters from the data stack
//  error changing base
//  bad address error
//   
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>

           
      <div class=word id=dg_forthwords>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthwords ( WORDS )  
//
// C prototype:
//  void dg_forthwords (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( -- )
//                                                            
// Action:
//  shows the names of the definitions in the top word list in the search order
//
// Forth standard:
//  15.6.1.2465
//
// Failure cases:
//  not checked
//  
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>          


      <div class=word id=dg_forthbye>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthbye ( BYE )
//
// C prototype:
//  void dg_forthbye (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle*  pBHarrayhead      pointer to a Bufferhandle structure which is 
//                                    used as the bufferhandle for the array where the 
//                                    other bufferhandles are stored
//
// Stack action shorthand:
//  ( -- )
//
// Action:
//  Sets the exit process flag which causes the process to exit the next time it gets 
//   back to the main QUIT loop.
//
// Forth standard:
//  15.6.2.0830
//
// Failure cases:
//  error changing the state of the exit flag (subroutine pushes error)
//   
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>


      <div class=word id=dg_forthsynonym>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthsynonym ( SYNONYM )
//
// C prototype:
//  void dg_forthsynonym (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( &quot;&lt;delimiters&gt;oldword&lt;delimiters&gt;morestuff&lt;delimiters&gt;
//    newword&lt;delimiters&gt;morestuff&quot;
//     -currentinputbuffer- &quot;&lt;delimiters&gt;morestuff&quot;)
//  ( -- )
//            
// Current input buffer at current offset in:
//  &quot;&lt;delimiters&gt;oldword&lt;delimiters&gt;morestuff&lt;delimiters&gt;
//    newword&lt;delimiters&gt;morestuff&quot;                     
//
// Current input buffer at current offset out:
//  &quot;&lt;spaces&gt;morestuff&quot;  
//                                                              
// Action:
//  Parses two word names from the current input buffer. Then finds the first name in
//   current search order. If a word is found that has the first name, this then 
//   creates a new word in the current new word wordlist that has the same compile 
//   routine buffer and offset of the first word, and the same data buffer and offset 
//   of the first word, but has the 2nd parsed name as it's name.
//   The new word will have a different execution token from the old word.
//
// Forth standard:
//  in the proposal state July 26, 2020
//
// Handling of ambiguous conditions:  
//
// Failure cases:
//  
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>

      <div class=word id=dg_forthbracketif>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthbracketif ( [IF] )
//
// C prototype:
//  void dg_forthbracketif (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( flag -- )
//
// Data stack in:
//  flag                          TRUE or FALSE  equal or not equal FALSE is used          
//                                                   
// Action:
//  In both execute or compile:
//  If the flag is TRUE, nothing is done, otherwise, this parses words and 
//   matching [IF] ... [THEN] pairs from the current input buffer until 
//   either a matching [ELSE] or [THEN] or the end of the current input buffer is parsed.
//   Nested [IF] ... [THEN] pairs are recursively skipped.
//   
// Note:
//  This is a multi-line parse.
//  For now, until I add another dg_parsewords that does not need a terminating
//   character, encountering EOF 0x1A is treated the same as reaching the end of the
//   current input buffer. 
//
// Forth standard:
//  15.6.2.2532 
//  
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>


      <div class=word id=dg_forthbracketelse>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthbracketelse ( [ELSE] )
//
// C prototype:
//  void dg_forthbracketelse (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( -- )          
//                                                   
// Action:
//  In both execute or compile:
//   This parses words and matching [IF] ... [THEN] pairs from the current input buffer 
//   until either a matching [THEN] or the end of the current input buffer 
//   is parsed.
//   Nested [IF] ... [THEN] pairs are recursively skipped.
// 
// Note:
//  This is a multi-line parse.
//  For now, until I add another dg_parsewords that does not need a terminating
//   character, encountering EOF 0x1A is treated the same as reaching the end of the
//   current input buffer. 
//
// Forth standard:
//  15.6.2.2531 
//  
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>


      <div class=word id=dg_forthbracketthen>
<pre>
// //////////////////////////////////////////////////////////////////////////////////////
//
// dg_forthbracketthen ( [THEN] )
//
// C prototype:
//  void dg_forthbracketthen (Bufferhandle* pBHarrayhead)
//
// Inputs:
//  Bufferhandle* pBHarrayhead    pointer to a Bufferhandle structure which is 
//                                 used as the bufferhandle for the array where the 
//                                 other bufferhandles are stored.
//
// Stack action shorthand:
//  ( -- )          
//                                                   
// Action:
//  This does nothing.
//   
//
// Forth standard:
//  15.6.2.2533 
//  
// //////////////////////////////////////////////////////////////////////////////////////
</pre>
      </div>


    </div>

  </div></body>
</html>
