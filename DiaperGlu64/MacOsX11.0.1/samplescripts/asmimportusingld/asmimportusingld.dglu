( //////////////////////////////////////////////////////////////////////////////////////// )
( //                                                                                       )
( //    Copyright 2021 James Patrick Norris                                                )
( //                                                                                       )
( //    This file is part of Diaperglu 5.0.                                                )
( //                                                                                       )
( //    Diaperglu 5.0 is free software; you can redistribute it and/or modify              )
( //    it under the terms of the GNU General Public License as published by               )
( //    the Free Software Foundation; either version 2 of the License, or                  )
( //    {at your option} any later version.                                                )
( //                                                                                       )
( //    Diaperglu 5.0 is distributed in the hope that it will be useful,                   )
( //    but WITHOUT ANY WARRANTY; without even the implied warranty of                     )
( //    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      )
( //    GNU General Public License for more details.                                       )
( //                                                                                       )
( //    You should have received a copy of the GNU General Public License                  )
( //    along with Diaperglu 5.0; if not, write to the Free Software                       )
( //    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA          )
( //                                                                                       )
( //////////////////////////////////////////////////////////////////////////////////////// )

( /////////////////////////////// )
( // James Patrick Norris      // )
( // www.rainbarrel.com        // )
( // January 9, 2021           // )
( // version 5.0               // )
( /////////////////////////////// )


// last changed December 18, 2020

// this script first makes a .o file for the shared library doing the export
// then runs ld to build the .dylib file that will do the export from the .o file
// then opens the .dylib and calls the test functions


// making the export only shared library...
// I'd use libdiaperglu.dylib except Mac OS X has new security stuff that makes changing the default shared library
//  search path difficult.

PCURRENTCOMPILEBUFFER @ CONSTANT OLDCOMPILEBUFID


// make new empty compile buffer

HEX 10000 -1 NEWBUFFER CONSTANT MYEXPORTONLYCOMPILEBUFID
MYEXPORTONLYCOMPILEBUFID PCURRENTCOMPILEBUFFER !


 // adding the assembler to the search order

 X86-WORDLIST >SEARCH-ORDER
 

// making an hlist to hold a symbol list and making it the current elementid hlistid

NEW-NGLULIST>EH

( noparentelementid_myhlistid -EH- )


// adding a root element to the current EH hlist
//  this element is not used other than as a parent to the export symbol list elements

$" myexportsymbollistparent" 0 >NEW$  EH-NEW-ELEMENT>EH


( noparentelementid_myhlistid exportsparentelemendid_mylistid -EH- )

HEX
// showing two ways to add a symbol for the current compile buffer offset

OSYMBOL dg_bswap
  RDI RAX -> MOV,
  RAX BSWAP,
  RET,

OLDCOMPILEBUFID PCURRENTCOMPILEBUFFER !

// saving the compiled buffer in the mach-o .o format

MYEXPORTONLYCOMPILEBUFID
EH>                                              // export symbol list parent
-1 -1                                            // import symbol list parent
BUF>NEWEXPORTIMPORT.OBUF

$" asmexportonlyusingld.o" SAVEFILE$

CRLF ." running ld to turn the .o file into a .dylib... this might take a minute" CRLF

RUNFILEANDWAITNOENV" ld -demangle -dynamic -dylib -no_uuid -no_eh_labels -arch x86_64 -platform_version macos 11.0.0 11.1 -syslibroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -o libasmexportonlyusingld.dylib -L. -L/usr/local/lib asmexportonlyusingld.o"



PCURRENTCOMPILEBUFFER @ CONSTANT OLDCOMPILEBUFID


// make new empty compile buffer

HEX 10000 -1 NEWBUFFER CONSTANT MYCOMPILEBUFID
MYCOMPILEBUFID PCURRENTCOMPILEBUFFER !


// adding the assembler to the search order... was done above, so don't need to do it here
 

// making an hlist to hold a symbol list and making it the current elementid hlistid

NEW-NGLULIST>EH

( noparentelementid_myhlistid -EH- )


 // adding a root element to the current EH hlist
 //  this element is not used other than as a parent to the import symbol list elements
$" myimportsymbollistparent" 0 >NEW$ EH-NEW-ELEMENT>EH

( noparentelementid_myhlistid importsparentelementid_myhlistid -EH- )

// it would be nice to be able to add symbol lists to the search order... 12/25/2019


// adding another root element to the current EH hlist
//  this element is not used other than as a parent to the export symbol list elements

$" myexportsymbollistparent" 0 >NEW$
1 EH[ND] // noparentelementid_myhlistid on data stack
DUP >R   // saving a copy of the myhlistid
NEW-ELEMENT
R> >EH

( noparentelementid_myhlistid importsparentelementid_myhlistid exportsparentelemendid_mylistid -EH- )

HEX
// showing two ways to add a symbol for the current compile buffer offset

OHERE >NEW$ $" dg_firstfunction" EH-NEW-ELEMENT
// OSYMBOL dg_firstfunction 
  1122334455667788 N RAX MOV,
  RET,

OSYMBOL dg_secondfunction
  1213141516171819 N RAX MOV,
  RET,

OSYMBOL dg_thirdfunction  // this shows how to do a .o file import
  RIP 0 [R+N] CALL,  // this will call the import function
  OHERE 4 - >NEW$   $" dg_bswap"  1 EH[ND]  NEW-ELEMENT  DROP  // this adds the import
  
  // ld makes an import table for you with one import per unique symbol name, and will
  //   fill in the offset from your [RIP+N] instruction to the import table at link time
  // At this time, I do not know how to tell ld which import symbol comes from which library. 12/26/2019
  
  RET,


OLDCOMPILEBUFID PCURRENTCOMPILEBUFFER !

// saving the compiled buffer in the mach-o .o format

MYCOMPILEBUFID
EH>                                              // export symbol list parent
EH>                                              // import symbol list parent
BUF>NEWEXPORTIMPORT.OBUF

$" asmimportusingld.o" SAVEFILE$


CRLF ." running ld to turn the import .o file into a .dylib" CRLF

RUNFILEANDWAITNOENV" ld -demangle -dynamic -dylib -no_uuid -no_eh_labels -arch x86_64 -platform_version macos 11.0.0 11.1 -syslibroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -o libasmimportusingld.dylib -L. -L/usr/local/lib asmimportusingld.o -lasmexportonlyusingld -lSystem" 


CRLF ." opening the new shared library that does imports and calling the test functions " CRLF

$" libasmimportusingld.dylib" OPENLIBRARY$ CONSTANT MYLIBHANDLE CONSTANT MYWORDLISTID

$" dg_firstfunction" MYLIBHANDLE FINDLIBRARYSYMBOL CONSTANT firstfunction
$" dg_secondfunction" MYLIBHANDLE FINDLIBRARYSYMBOL CONSTANT secondfunction
$" dg_thirdfunction" MYLIBHANDLE FINDLIBRARYSYMBOL CONSTANT thirdfunction

CRLF ." Calling first function, I expect 1122334455667788, I got "
0 firstfunction CALLPROC HEX U. CRLF

CRLF ." Calling second function, I expect 1213141516171819, I got "  
0 secondfunction CALLPROC HEX U. CRLF

 CRLF ." Calling second function, I expect 8877665514131211, I got "
 1112131455667788 1 thirdfunction CALLPROC HEX U. CRLF

CRLF 
CRLF

// cleaning up

MYLIBHANDLE FREELIBRARY

RUNFILEANDWAITNOENV" rm asmimportusingld.o asmexportonlyusingld.o"


TRUE ?END-EVALUATE  // this ends the script


// ///////////////////////////////
//  the hard way to call run ld //
// ///////////////////////////////

// this part of the script is not run
 
// building the args array

( 0A ) $" ld" $>0$
( 9 ) $" -macosx_version_min" $>0$
( 8 ) $" 10.11" $>0$
( 7 ) $" -dynamic" $>0$
( 6 ) $" -dylib" $>0$
( 5 ) $" -no_uuid" $>0$
( 4 ) $" -no_eh_labels" $>0$
( 3 ) $" -o" $>0$
( 2 ) $" libasmexportonlyusingld.dylib" $>0$
( 1 ) $" asmexportonlyusingld.o" $>0$
( 0 ) $" ld" $>0$            // $" /Applications/Xcode.app/Contents/Developer/usr/bin/ld" $>0$

// pushing more strings may change the base address of the string stack buffers
//   so you have to use the pointers before any more strings are pushed
//   or... know exactly how much stuff you can push onto the string stack before it grows...

// using the rstack to hold the args array
//   not assuming the rstack is empty
RSTACKBUFFERID GETBUFFERLENGTH CONSTANT myrstackbaselength

HEX
0A GETS$[ND] DROP >R
9 GETS$[ND] DROP >R
8 GETS$[ND] DROP >R
7 GETS$[ND] DROP >R
6 GETS$[ND] DROP >R
5 GETS$[ND] DROP >R
4 GETS$[ND] DROP >R
3 GETS$[ND] DROP >R
2 GETS$[ND] DROP >R
1 GETS$[ND] DROP >R
0 >R

// this runs ld
( pargv ) RSTACKBUFFERID GETSBUFFER DROP myrstackbaselength +
( penvp ) 0
( pfilename ) 0 GETS$[ND] DROP
RUNFILEANDWAIT

// cleaning the rstack
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP



// building the args array

( 0D ) $" ld" $>0$
( 0C ) $" -macosx_version_min" $>0$
( 0B ) $" 10.11" $>0$
( 0A ) $" -dynamic" $>0$
( 9 ) $" -dylib" $>0$
( 8 ) $" -no_uuid" $>0$
( 7 ) $" -no_eh_labels" $>0$
( 6 ) $" -L." $>0$
( 5 ) $" -lasmexportonlyusingld" $>0$
( 4 ) $" -lSystem" $>0$      // ld needs this to generate the import table stubs or something
( 3 ) $" -o" $>0$
( 2 ) $" libasmimportusingld.dylib" $>0$
( 1 ) $" asmimportusingld.o" $>0$
( 0 ) $" ld" $>0$            // $" /Applications/Xcode.app/Contents/Developer/usr/bin/ld" $>0$

// pushing more strings may change the base address of the string stack buffers
//   so you have to use the pointers before any more strings are pushed
//   or... know exactly how much stuff you can push onto the string stack before it grows...

// using the rstack to hold the args array
//   not assuming the rstack is empty
RSTACKBUFFERID GETBUFFERLENGTH CONSTANT myrstackbaselength

HEX
0D GETS$[ND] DROP >R
0C GETS$[ND] DROP >R
0B GETS$[ND] DROP >R
0A GETS$[ND] DROP >R
9 GETS$[ND] DROP >R
8 GETS$[ND] DROP >R
7 GETS$[ND] DROP >R
6 GETS$[ND] DROP >R
5 GETS$[ND] DROP >R
4 GETS$[ND] DROP >R
3 GETS$[ND] DROP >R
2 GETS$[ND] DROP >R
1 GETS$[ND] DROP >R
0 >R

// this runs ld
( pargv ) RSTACKBUFFERID GETSBUFFER DROP myrstackbaselength +
( penvp ) 0
( pfilename ) 0 GETS$[ND] DROP
RUNFILEANDWAIT

// cleaning the rstack
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP
R> DROP



     

