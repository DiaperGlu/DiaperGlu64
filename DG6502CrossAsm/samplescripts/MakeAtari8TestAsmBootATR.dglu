// //////////////////////////////////////////////////////////////////////////////////////
//
//    Copyright 2023 James Patrick Norris
//
//    This file is part of DG6502CrossAsm v1.3
//
//    DG6502CrossAsm v1.3 is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    DG6502CrossAsm v1.3 is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with DG6502CrossAsm v1.3; if not, write to the Free Software
//    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// //////////////////////////////////////////////////////////////////////////////////////

// /////////////////////////////
// James Patrick Norris       //
// www.rainbarrel.com         //
// July 06, 2023              //
// version 1.3                //
// /////////////////////////////

$" ../DG6502CrossAsm.dglu" INCLUDEFILE$
$" BufToATR.dglu" INCLUDEFILE$


HEX
// CIO from https://www.atarimax.com/freenet/freenet_material/12.AtariLibrary/2.MiscellaneousTextFiles/showarticle.php?30

0342 CONSTANT ICCOM // command ( writeappendeol=09 )
0344 CONSTANT ICBAL // buffer address low   
0345 CONSTANT ICBAH // buffer address hi

0348 CONSTANT ICBLL // buffer length low
0349 CONSTANT ICBLH // buffer length hi

E456 CONSTANT CIOV

0B CONSTANT ICCOMwrite
09 CONSTANT ICCOMwriteline

// page zero user variable
80 CONSTANT pUserVec


// Make the disk image buffer
HEX 600 NEWCROSSBUFFER  


44474C56 CONSTANT StackMarker

StackMarker

// Atari810 Disk Header

//   This program loads at 600 and never exits the initialization routine

//   There is a limit to how big a program can be using this method. One thing
//     I read said eventually you will overwrite the display list, which would be
//     the limit. I am not sure where it is, but you could look at the shadow
//     variable after boot to find out. 
//     If you have your own display list in your program, you may
//     have all of the ram after 600 available... so maybe up to BFFF?

( 0x600 ) 0 CC,           // probably has to be 0 (disassemble OS to find out for sure)
OHERE CONSTANT oNumberOfBootSectors
( 0x601 ) 0 CC,           // number of boot sectors
( 0x602 ) 600 CODE-U16,   // boot load address
( 0x604 ) 606 CODE-U16,   // boot init routine address

( 0x606 )

CLC, CS LONGIF,

  17 CONSTANT TestConstantValue
  BARHERE CONSTANT pTestConstant TestConstantValue CODE-U8,  // known value at [U16] location
  BARHERE CONSTANT pParam0   0 CODE-U8,
  BARHERE CONSTANT pTestVar  0 CODE-U8,
  BARHERE CONSTANT pTestVarHi 0 CODE-U8,

  BARHERE CONSTANT pStartTestMsg
  $" Starting ASM Tests - Y=pass N=fail" LENGTH$ CONSTANT StartTestMsgSize
  0 GETS$[ND] CODE-S, DROP$

  BARHERE CONSTANT pTestDoneMessage
    $" Tests Done" LENGTH$ CONSTANT TestDoneMsgSize
    0 GETS$[ND] CODE-S, DROP$

  BARHERE CONSTANT pWriteStartTestMsg
    pStartTestMsg FF AND U8 LDX,
    pStartTestMsg 8 RSHIFT U8 LDY,
    StartTestMsgSize U8 LDA,

  BARHERE CONSTANT pWriteLine ( Y = pmessagehi, X = pmessaglo, A = messagelength -reg- )

    // setting IOCB i/o buffer pointer to point to Hello World message  
    ICBAL [U] STX,
    ICBAH [U] STY,

    // setting IOCB i/o buffer length to length of Hello World message
               ICBLL [U] STA,
    0 U8 LDA,  ICBLH [U] STA, 

    // setting register X to IOCB 0 which is the screen or editor and is already open after boot
    00 U8 LDX, 

    // setting IOCB 0 command to writeappendeol
    ICCOMwriteline U8 LDA,
    ICCOM [U] STA,  

    CIOV U16 JMP,

  BARHERE CONSTANT pWriteTestDoneMsg
    pTestDoneMessage FF AND U8 LDX,
    pTestDoneMessage 8 RSHIFT U8 LDY,
    TestDoneMsgSize U8 LDA,
    pWriteLine U16 JMP,

  BARHERE CONSTANT p?WriteYorN ( zflag -flags- )
    EQ IF,
      CHAR Y U8 LDA,
    ELSE,
      CHAR N U8 LDA,
    THEN,

  BARHERE CONSTANT pWriteChar ( A=char -- )

    // copying character to buffer
    pParam0 [U] STA,

    // setting register X to IOCB 0 which is the screen or editor and is already open after boot
    00 U8 LDX, 

    // setting IOCB 0 command to writeappendeol
    ICCOMwrite U8 LDA,
    ICCOM [U] STA,  

    // setting IOCB i/o buffer pointer to point to pParam0
    pParam0 FF AND U8 LDA,    ICBAL [U] STA,
    pParam0 8 RSHIFT U8 LDA,  ICBAH [U] STA,

    // setting IOCB i/o buffer length to 1 character
    1 U8 LDA,     ICBLL [U] STA,
    0 U8 LDA,     ICBLH [U] STA, 

    CIOV U16 JMP,

  BARHERE CONSTANT p?NEYorN ( zflag -flags- )
    NE IF,
      CHAR Y U8 LDA,
    ELSE,
      CHAR N U8 LDA,
    THEN,
    pWriteChar U16 JMP,

  BARHERE CONSTANT pWriteBL
    BL U8 LDA,
    pWriteChar U16 JMP,

  BARHERE CONSTANT pWriteEOL
    9B U8 LDA,
    pWriteChar U16 JMP,


  // Test routines

  BARHERE CONSTANT pTestU8LDA,U8CMP,
    92 U8 LDA,
    92 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestU8LDX,TXA,
    0 U8 LDA,
    0 U8 LDY,
    92 U8 LDX,
    TXA,
    92 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestU8LDY,TYA,
    0 U8 LDA,
    92 U8 LDY,
    0 U8 LDX,
    TYA,
    92 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestTAX,
    92 U8 LDA,
    0 U8 LDY,
    34 U8 LDX,
    TAX,
    0 U8 LDA, 
    TXA,
    92 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestTAY,
    92 U8 LDA,
    0 U8 LDX,
    34 U8 LDY,
    TAY,
    0 U8 LDA, 
    TYA,
    92 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestU8CPX,
    0 U8 LDA,
    0 U8 LDY,
    92 U8 LDX,
    92 U8 CPX,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestU8CPY,
    0 U8 LDA,
    0 U8 LDX,
    92 U8 LDY,
    92 U8 CPY,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestINX,
    92 U8 LDX,
    INX,
    93 U8 CPX,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestINY,
    92 U8 LDY,
    INY,
    93 U8 CPY,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestDEX,
    92 U8 LDX,
    DEX,
    91 U8 CPX,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestDEY,
    92 U8 LDY,
    DEY,
    91 U8 CPY,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]LDA,
    pTestConstant [U16] LDA,
    TestConstantValue U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]STA,
    97 U8 LDA,
    pUserVec [U8] STA,
    pUserVec [U16] LDA,
    97 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]STA,
    93 U8 LDA,
    pTestVar [U16] STA,
    pTestVar [U16] LDA,
    93 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]LDA,
    38 U8 LDA,
    pUserVec [U8] STA,
    pUserVec [U8] LDA,
    38 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8+X]LDA,
    73 U8 LDA,
    pUserVec [U8] STA,
    34 U8 LDX,
    pUserVec 34 - [U8+X] LDA,
    73 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+X]LDA,
    0 U8 LDY,
    37 U8 LDX,
    pTestConstant 37 - [U16+X] LDA,
    TestConstantValue U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+Y]LDA,
    37 U8 LDY,
    0 U8 LDX,
    pTestConstant 37 - [U16+Y] LDA,
    TestConstantValue U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8+X]]LDA,
    pTestVar FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    28 U8 LDA,
    pTestVar [U] STA,
    0 U8 LDA,
    34 U8 LDX,
    0 U8 LDY,
    pUserVec 34 - [[U8+X]] LDA,
    28 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8]+Y]LDA,
    pTestVar 34 - FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 34 - 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    36 U8 LDA,
    pTestVar [U] STA,
    0 U8 LDA,
    34 U8 LDY,
    0 U8 LDX,
    pUserVec [[U8]+Y] LDA,
    36 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8+X]STA,
    72 U8 LDA,
    34 U8 LDX,
    pUserVec 34 - [U8+X] STA,
    pUserVec [U8] LDA,
    72 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+X]STA,
    99 U8 LDA,
    34 U8 LDX,
    0 U8 LDY,
    pTestVar 34 - [U16+X] STA,
    pTestVar [U16] LDA,
    99 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+Y]STA,
    93 U8 LDA,
    34 U8 LDY,
    0 U8 LDX,
    pTestVar 34 - [U16+Y] STA,
    pTestVar [U16] LDA,
    93 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8+X]]STA,
    pTestVar FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    11 U8 LDA,
    34 U8 LDX,
    0 U8 LDY,
    pUserVec 34 - [[U8+X]] STA,
    pTestVar [U] LDA,
    11 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8]+Y]STA,
    pTestVar 34 - FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 34 - 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    37 U8 LDA,
    34 U8 LDY,
    0 U8 LDX,
    pUserVec [[U8]+Y] STA,
    pTestVar [U] LDA,
    37 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]LDX,
    pTestConstant [U16] LDX,
    TestConstantValue U8 CPX,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]LDY,
    pTestConstant [U16] LDY,
    TestConstantValue U8 CPY,
    p?WriteYorN U16 JMP,
    

  BARHERE CONSTANT pTestU8ADC,
    1 U8 LDA,
    SEC,
    2 U8 ADC,
    4 U8 CMP,
    p?WriteYorN U16 JSR,
    4 U8 LDA,
    CLC,
    3 U8 ADC,
    7 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]ADC,
    1 U8 LDA,
    pUserVec [U8] STA,
    2 U8 LDA,
    SEC,
    pUserVec [U8] ADC,
    4 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]ADC,
    1 U8 LDA,
    pTestVar [U16] STA,
    2 U8 LDA,
    SEC,
    pTestVar [U16] ADC,
    4 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+X]ADC,
    1 U8 LDA,
    pTestVar [U16] STA,
    2 U8 LDA,
    SEC,
    0 U8 LDY,
    34 U8 LDX,
    pTestVar 34 - [U16+X] ADC,
    4 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+Y]ADC,
    1 U8 LDA,
    pTestVar [U16] STA,
    2 U8 LDA,
    SEC,
    0 U8 LDX,
    34 U8 LDY,
    pTestVar 34 - [U16+Y] ADC,
    4 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8+X]]ADC,
    pTestVar FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    1 U8 LDA,
    pTestVar [U] STA,
    2 U8 LDA,
    34 U8 LDX,
    0 U8 LDY,
    SEC,
    pUserVec 34 - [[U8+X]] ADC,
    4 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8]+Y]ADC,
    pTestVar 34 - FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 34 - 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    1 U8 LDA,
    pTestVar [U] STA,
    2 U8 LDA,
    34 U8 LDY,
    0 U8 LDX,
    SEC,
    pUserVec [[U8]+Y] ADC,
    4 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestU8AND,
    F0 U8 LDA,
    33 U8 AND,
    30 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]AND,
    F0 U8 LDA,
    pUserVec [U8] STA,
    33 U8 LDA,
    pUserVec [U8] AND,
    30 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]AND,
    F0 U8 LDA,
    pTestVar [U16] STA,
    33 U8 LDA,
    pTestVar [U16] AND,
    30 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+X]AND,
    F0 U8 LDA,
    pTestVar [U16] STA,
    33 U8 LDA,
    0 U8 LDY,
    34 U8 LDX,
    pTestVar 34 - [U16+X] AND,
    30 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+Y]AND,
    F0 U8 LDA,
    pTestVar [U16] STA,
    33 U8 LDA,
    0 U8 LDX,
    34 U8 LDY,
    pTestVar 34 - [U16+Y] AND,
    30 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8+X]]AND,
    pTestVar FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    F0 U8 LDA,
    pTestVar [U] STA,
    33 U8 LDA,
    34 U8 LDX,
    0 U8 LDY,
    pUserVec 34 - [[U8+X]] AND,
    30 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8]+Y]AND,
    pTestVar 34 - FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 34 - 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    F0 U8 LDA,
    pTestVar [U] STA,
    33 U8 LDA,
    34 U8 LDY,
    0 U8 LDX,
    pUserVec [[U8]+Y] AND,
    30 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestU8ORA,
    F0 U8 LDA,
    33 U8 ORA,
    F3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]ORA,
    F0 U8 LDA,
    pUserVec [U8] STA,
    33 U8 LDA,
    pUserVec [U8] ORA,
    F3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]ORA,
    F0 U8 LDA,
    pTestVar [U16] STA,
    33 U8 LDA,
    pTestVar [U16] ORA,
    F3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+X]ORA,
    F0 U8 LDA,
    pTestVar [U16] STA,
    33 U8 LDA,
    0 U8 LDY,
    34 U8 LDX,
    pTestVar 34 - [U16+X] ORA,
    F3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+Y]ORA,
    F0 U8 LDA,
    pTestVar [U16] STA,
    33 U8 LDA,
    0 U8 LDX,
    34 U8 LDY,
    pTestVar 34 - [U16+Y] ORA,
    F3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8+X]]ORA,
    pTestVar FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    F0 U8 LDA,
    pTestVar [U] STA,
    33 U8 LDA,
    34 U8 LDX,
    0 U8 LDY,
    pUserVec 34 - [[U8+X]] ORA,
    F3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8]+Y]ORA,
    pTestVar 34 - FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 34 - 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    F0 U8 LDA,
    pTestVar [U] STA,
    33 U8 LDA,
    34 U8 LDY,
    0 U8 LDX,
    pUserVec [[U8]+Y] ORA,
    F3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestU8EOR,
    F0 U8 LDA,
    33 U8 EOR,
    C3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]EOR,
    F0 U8 LDA,
    pUserVec [U8] STA,
    33 U8 LDA,
    pUserVec [U8] EOR,
    C3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]EOR,
    F0 U8 LDA,
    pTestVar [U16] STA,
    33 U8 LDA,
    pTestVar [U16] EOR,
    C3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+X]EOR,
    F0 U8 LDA,
    pTestVar [U16] STA,
    33 U8 LDA,
    0 U8 LDY,
    34 U8 LDX,
    pTestVar 34 - [U16+X] EOR,
    C3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+Y]EOR,
    F0 U8 LDA,
    pTestVar [U16] STA,
    33 U8 LDA,
    0 U8 LDX,
    34 U8 LDY,
    pTestVar 34 - [U16+Y] EOR,
    C3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8+X]]EOR,
    pTestVar FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    F0 U8 LDA,
    pTestVar [U] STA,
    33 U8 LDA,
    34 U8 LDX,
    0 U8 LDY,
    pUserVec 34 - [[U8+X]] EOR,
    C3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8]+Y]EOR,
    pTestVar 34 - FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 34 - 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    F0 U8 LDA,
    pTestVar [U] STA,
    33 U8 LDA,
    34 U8 LDY,
    0 U8 LDX,
    pUserVec [[U8]+Y] EOR,
    C3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]CMP,
    83 U8 LDA,
    pUserVec [U8] STA,
    82 U8 LDA,
    pUserVec [U8] CMP,
    p?NEYorN U16 JSR,
    83 U8 LDA,
    pUserVec [U8] CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]CMP,
    83 U8 LDA,
    pTestVar [U16] STA,
    82 U8 LDA,
    pTestVar [U16] CMP,
    p?NEYorN U16 JSR,
    83 U8 LDA,
    pTestVar [U16] CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+X]CMP,
    38 U8 LDA,
    pTestVar [U16] STA,
    33 U8 LDA,
    0 U8 LDY,
    34 U8 LDX,
    pTestVar 34 - [U16+X] CMP,
    p?NEYorN U16 JSR,
    38 U8 LDA,
    0 U8 LDY,
    34 U8 LDX,
    pTestVar 34 - [U16+X] CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+Y]CMP,
    F0 U8 LDA,
    pTestVar [U16] STA,
    33 U8 LDA,
    0 U8 LDX,
    34 U8 LDY,
    pTestVar 34 - [U16+Y] CMP,
    p?NEYorN U16 JSR,
    0 U8 LDX,
    34 U8 LDY,
    F0 U8 LDA,
    pTestVar 34 - [U16+Y] CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8+X]]CMP,
    pTestVar FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    97 U8 LDA,
    pTestVar [U] STA,
    33 U8 LDA,
    34 U8 LDX,
    0 U8 LDY,
    pUserVec 34 - [[U8+X]] CMP,
    p?NEYorN U16 JSR,
    97 U8 LDA,
    34 U8 LDX,
    0 U8 LDY,
    pUserVec 34 - [[U8+X]] CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8]+Y]CMP,
    pTestVar 34 - FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 34 - 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    87 U8 LDA,
    pTestVar [U] STA,
    33 U8 LDA,
    34 U8 LDY,
    0 U8 LDX,
    pUserVec [[U8]+Y] CMP,
    p?NEYorN U16 JSR,
    87 U8 LDA,
    34 U8 LDY,
    0 U8 LDX,
    pUserVec [[U8]+Y] CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestU8SBC,
    38 U8 LDA,
    SEC,
    38 U8 SBC,
    39 U8 LDA,
    CLC,
    38 U8 SBC,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]SBC,
    83 U8 LDA,
    pUserVec [U8] STA,
    SEC,
    pUserVec [U8] SBC,
    p?WriteYorN U16 JSR,
    84 U8 LDA,
    CLC,
    pUserVec [U8] SBC,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]SBC,
    83 U8 LDA,
    pTestVar [U16] STA,
    SEC,
    pTestVar [U16] SBC,
    p?WriteYorN U16 JSR,
    84 U8 LDA,
    CLC,
    pTestVar [U16] SBC,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+X]SBC,
    38 U8 LDA,
    pTestVar [U16] STA,
    0 U8 LDY,
    34 U8 LDX,
    SEC,
    pTestVar 34 - [U16+X] SBC,
    p?WriteYorN U16 JSR,
    39 U8 LDA,
    0 U8 LDY,
    34 U8 LDX,
    CLC,
    pTestVar 34 - [U16+X] SBC,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+Y]SBC,
    F0 U8 LDA,
    pTestVar [U16] STA,
    0 U8 LDX,
    34 U8 LDY,
    SEC,
    pTestVar 34 - [U16+Y] SBC,
    p?WriteYorN U16 JSR,
    0 U8 LDX,
    34 U8 LDY,
    F1 U8 LDA,
    CLC,
    pTestVar 34 - [U16+Y] SBC,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8+X]]SBC,
    pTestVar FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    97 U8 LDA,
    pTestVar [U] STA,
    34 U8 LDX,
    0 U8 LDY,
    SEC,
    pUserVec 34 - [[U8+X]] SBC,
    p?WriteYorN U16 JSR,
    98 U8 LDA,
    34 U8 LDX,
    0 U8 LDY,
    CLC,
    pUserVec 34 - [[U8+X]] SBC,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[[U8]+Y]SBC,
    pTestVar 34 - FF AND U8 LDA,
    pUserVec [U] STA,
    pTestVar 34 - 8 RSHIFT U8 LDA,
    pUserVec 1+ [U] STA,
    87 U8 LDA,
    pTestVar [U] STA,
    34 U8 LDY,
    0 U8 LDX,
    SEC,
    pUserVec [[U8]+Y] SBC,
    p?WriteYorN U16 JSR,
    88 U8 LDA,
    34 U8 LDY,
    0 U8 LDX,
    CLC,
    pUserVec [[U8]+Y] SBC,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestASLA,
    F0 U8 LDA,
    SEC,
    RA ASL,
    E0 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]ASL,
    F0 U8 LDA,
    pUserVec [U8] STA,
    SEC,
    pUserVec [U8] ASL,
    pUserVec [U8] LDA,
    E0 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]ASL,
    F0 U8 LDA,
    pTestVar [U16] STA,
    SEC,
    pTestVar [U16] ASL,
    pTestVar [U16] LDA,
    E0 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8+X]ASL,
    F0 U8 LDA,
    pUserVec [U8] STA,
    0 U8 LDY,
    34 U8 LDX,
    SEC,
    pUserVec 34 - [U8+X] ASL,
    pUserVec [U8] LDA,
    E0 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+X]ASL,
    F0 U8 LDA,
    pTestVar [U16] STA,
    0 U8 LDY,
    34 U8 LDX,
    SEC,
    pTestVar 34 - [U16+X] ASL,
    pTestVar [U16] LDA,
    E0 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestLSRA,
    F0 U8 LDA,
    SEC,
    RA LSR,
    78 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]LSR,
    F0 U8 LDA,
    pUserVec [U8] STA,
    SEC,
    pUserVec [U8] LSR,
    pUserVec [U8] LDA,
    78 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]LSR,
    F0 U8 LDA,
    pTestVar [U16] STA,
    SEC,
    pTestVar [U16] LSR,
    pTestVar [U16] LDA,
    78 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8+X]LSR,
    F0 U8 LDA,
    pUserVec [U8] STA,
    0 U8 LDY,
    34 U8 LDX,
    SEC,
    pUserVec 34 - [U8+X] LSR,
    pUserVec [U8] LDA,
    78 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+X]LSR,
    F0 U8 LDA,
    pTestVar [U16] STA,
    0 U8 LDY,
    34 U8 LDX,
    SEC,
    pTestVar 34 - [U16+X] LSR,
    pTestVar [U16] LDA,
    78 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestROLA,
    F0 U8 LDA,
    SEC,
    RA ROL,
    E1 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]ROL,
    F0 U8 LDA,
    pUserVec [U8] STA,
    SEC,
    pUserVec [U8] ROL,
    pUserVec [U8] LDA,
    E1 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]ROL,
    F0 U8 LDA,
    pTestVar [U16] STA,
    SEC,
    pTestVar [U16] ROL,
    pTestVar [U16] LDA,
    E1 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8+X]ROL,
    F0 U8 LDA,
    pUserVec [U8] STA,
    0 U8 LDY,
    34 U8 LDX,
    SEC,
    pUserVec 34 - [U8+X] ROL,
    pUserVec [U8] LDA,
    E1 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+X]ROL,
    F0 U8 LDA,
    pTestVar [U16] STA,
    0 U8 LDY,
    34 U8 LDX,
    SEC,
    pTestVar 34 - [U16+X] ROL,
    pTestVar [U16] LDA,
    E1 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestRORA,
    F0 U8 LDA,
    SEC,
    RA ROR,
    F8 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]ROR,
    F0 U8 LDA,
    pUserVec [U8] STA,
    SEC,
    pUserVec [U8] ROR,
    pUserVec [U8] LDA,
    F8 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]ROR,
    F0 U8 LDA,
    pTestVar [U16] STA,
    SEC,
    pTestVar [U16] ROR,
    pTestVar [U16] LDA,
    F8 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8+X]ROR,
    F0 U8 LDA,
    pUserVec [U8] STA,
    0 U8 LDY,
    34 U8 LDX,
    SEC,
    pUserVec 34 - [U8+X] ROR,
    pUserVec [U8] LDA,
    F8 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+X]ROR,
    F0 U8 LDA,
    pTestVar [U16] STA,
    0 U8 LDY,
    34 U8 LDX,
    SEC,
    pTestVar 34 - [U16+X] ROR,
    pTestVar [U16] LDA,
    F8 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]INC,
    F0 U8 LDA,
    pUserVec [U8] STA,
    SEC,
    pUserVec [U8] INC,
    pUserVec [U8] LDA,
    F1 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]INC,
    F0 U8 LDA,
    pTestVar [U16] STA,
    SEC,
    pTestVar [U16] INC,
    pTestVar [U16] LDA,
    F1 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8+X]INC,
    F0 U8 LDA,
    pUserVec [U8] STA,
    0 U8 LDY,
    34 U8 LDX,
    SEC,
    pUserVec 34 - [U8+X] INC,
    pUserVec [U8] LDA,
    F1 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+X]INC,
    F0 U8 LDA,
    pTestVar [U16] STA,
    0 U8 LDY,
    34 U8 LDX,
    SEC,
    pTestVar 34 - [U16+X] INC,
    pTestVar [U16] LDA,
    F1 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]DEC,
    F0 U8 LDA,
    pUserVec [U8] STA,
    SEC,
    pUserVec [U8] DEC,
    pUserVec [U8] LDA,
    EF U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]DEC,
    F0 U8 LDA,
    pTestVar [U16] STA,
    SEC,
    pTestVar [U16] DEC,
    pTestVar [U16] LDA,
    EF U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8+X]DEC,
    F0 U8 LDA,
    pUserVec [U8] STA,
    0 U8 LDY,
    34 U8 LDX,
    SEC,
    pUserVec 34 - [U8+X] DEC,
    pUserVec [U8] LDA,
    EF U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+X]DEC,
    F0 U8 LDA,
    pTestVar [U16] STA,
    0 U8 LDY,
    34 U8 LDX,
    SEC,
    pTestVar 34 - [U16+X] DEC,
    pTestVar [U16] LDA,
    EF U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]BIT,
    F0 U8 LDA,
    pUserVec [U8] STA,
    0F U8 LDA,
    pUserVec [U8] BIT,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]BIT,
    F0 U8 LDA,
    pTestVar [U16] STA,
    0F U8 LDA,
    pTestVar [U16] BIT,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestPLA,
    pTestPLA, 3 + U16 JSR, // return address -1 is pushed to the stack
    PLA, 
    pTestPLA, 2 + FF AND U8 CMP, 
    p?WriteYorN U16 JSR,
    PLA,
    pTestPLA, 2 + 8 RSHIFT U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestPHA,
    84 U8 LDA,
    PHA, PLA,
    84 U8 CMP,
    p?WriteYorN U16 JMP,
   
  BARHERE CONSTANT pTestTSX,
    TSX, TXA,
    pUserVec [U8] STA,
    pUserVec [U8] DEC,
    PHA,
    TSX,
    PLA, 
    TXA,
    pUserVec [U8] CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestTXS,
    TSX, TXA,
    pUserVec [U8] STA,
    PHA, PHA,
    TXS,
    TSX,
    TXA,
    pUserVec [U8] CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestPHP,
    F0 U8 LDA,
    F0 U8 CMP,
    PHP, PLA,
    2 U8 AND,
    p?NEYorN U16 JSR,
    F0 U8 LDA,
    F1 U8 CMP,
    PHP, PLA,
    2 U8 AND,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestPLP,
    PHP, PLA,
    FD U8 AND,
    PHA, PLP,
    p?NEYorN U16 JSR,
    PHP, PLA,
    2 U8 ORA,
    PHA, PLP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestCLC,
    FF U8 LDA,
    1 U8 ADC,
    CLC,
    PHP, PLA,
    1 U8 AND,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestSEC,
    0 U8 LDA,
    1 U8 ADC,
    SEC,
    PHP, PLA,
    1 U8 AND,
    p?NEYorN U16 JMP,

  BARHERE CONSTANT pTestCLV,
    7F U8 LDA,
    7E U8 ADC,
    CLV,
    PHP, PLA,
    40 U8 AND,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestCLD,
    PHP,
    CLD,
    PHP, PLA,
    PLP,
    8 U8 AND,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestSED,
    PHP, // saving and restoring decimal flag because SED seems to cause Atari CIOV to lock
    SED,
    PHP, PLA,
    PLP,
    8 U8 AND,
    p?NEYorN U16 JMP,

  BARHERE CONSTANT pTestCLI,
    PHP,
    CLI,
    PHP, PLA,
    PLP,
    4 U8 AND,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestSEI,
    PHP,
    SEI,
    PHP, PLA,
    PLP,
    4 U8 AND,
    p?NEYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]LDX,
    75 U8 LDA,
    pUserVec [U8] STA,
    0 U8 LDX,
    pUserVec [U8] LDX,
    75 U8 CPX,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8+Y]LDX,
    75 U8 LDA,
    pUserVec [U8] STA,
    21 U8 LDY,
    0 U8 LDX,
    pUserVec 21 - [U8+Y] LDX,
    75 U8 CPX,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+Y]LDX,
    71 U8 LDA,
    pTestVar [U16] STA,
    7 U8 LDY,
    0 U8 LDX,
    pTestVar 7 - [U16+Y] LDX,
    71 U8 CPX,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]STX,
    F3 U8 LDX,
    pUserVec [U8] STX,
    pUserVec [U8] LDA,
    F3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8+Y]STX,
    43 U8 LDX,
    21 U8 LDY,
    pUserVec 21 - [U8+Y] STX,
    pUserVec [U8] LDA,
    43 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]STX,
    F5 U8 LDX,
    pTestVar [U16] STX,
    pTestVar [U16] LDA,
    F5 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]LDY,
    75 U8 LDA,
    pUserVec [U8] STA,
    0 U8 LDY,
    pUserVec [U8] LDY,
    75 U8 CPY,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8+X]LDY,
    75 U8 LDA,
    pUserVec [U8] STA,
    21 U8 LDX,
    0 U8 LDY,
    pUserVec 21 - [U8+X] LDY,
    75 U8 CPY,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16+X]LDY,
    71 U8 LDA,
    pTestVar [U16] STA,
    7 U8 LDX,
    0 U8 LDY,
    pTestVar 7 - [U16+X] LDY,
    71 U8 CPY,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]STY,
    F3 U8 LDY,
    pUserVec [U8] STY,
    pUserVec [U8] LDA,
    F3 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8+X]STY,
    43 U8 LDY,
    21 U8 LDX,
    pUserVec 21 - [U8+X] STY,
    pUserVec [U8] LDA,
    43 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]STY,
    F5 U8 LDY,
    pTestVar [U16] STY,
    pTestVar [U16] LDA,
    F5 U8 CMP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]CPX,
    74 U8 LDA,
    pUserVec [U8] STA,
    TAX,
    0 U8 LDA,
    pUserVec [U8] CPX,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]CPX,
    74 U8 LDA,
    pTestVar [U16] STA,
    TAX,
    0 U8 LDA,
    pTestVar [U16] CPX,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U8]CPY,
    74 U8 LDA,
    pUserVec [U8] STA,
    TAY,
    0 U8 LDA,
    pUserVec [U8] CPY,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]CPY,
    74 U8 LDA,
    pTestVar [U16] STA,
    TAY,
    0 U8 LDA,
    pTestVar [U16] CPY,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTestRTI,return
    CLC, CS IF,
  
  BARHERE CONSTANT pTestRTI,
      pTestRTI,return 8 RSHIFT U8 LDA,
      PHA,
      pTestRTI,return FF AND U8 LDA,
      PHA,
      pTestRTI,return FF AND U8 CMP, // to set zero flag
      PHP,
      pTestRTI,return 1 - FF AND U8 CMP, // to clear zero flag
      RTI,
    THEN,
    p?WriteYorN U16 JMP, 

  BARHERE CONSTANT pTestNOP,
    74 U8 LDA,
    74 U8 CMP,
    NOP,
    p?WriteYorN U16 JMP,

  BARHERE CONSTANT pTest[U16]JMP,
    pTestNOP, FF AND U8 LDA,
    pTestVar [U16] STA,
    pTestNOP, 8 RSHIFT U8 LDA,
    pTestVarHi [U16] STA,
    pTestVar [U16] JMP,

  BARHERE CONSTANT pTestCSIF,
    SEC,

  BARHERE CONSTANT p?CSYorN ( zflag -flags- )
    CS IF,
      CHAR Y U8 LDA,
    ELSE,
      CHAR N U8 LDA,
    THEN,
    pWriteChar U16 JMP,

  BARHERE CONSTANT pTestNCIF,
    CLC,

  BARHERE CONSTANT p?NCYorN ( zflag -flags- )
    NC IF,
      CHAR Y U8 LDA,
    ELSE,
      CHAR N U8 LDA,
    THEN,
    pWriteChar U16 JMP,

  BARHERE CONSTANT pTestVSIF,
    7F U8 LDA,
    7E U8 ADC,

  BARHERE CONSTANT p?VSYorN ( zflag -flags- )
    VS IF,
      CHAR Y U8 LDA,
    ELSE,
      CHAR N U8 LDA,
    THEN,
    pWriteChar U16 JMP,

  BARHERE CONSTANT pTestVCIF,
    CLV,

  BARHERE CONSTANT pVCYorN ( zflag -flags- )
    VC IF,
      CHAR Y U8 LDA,
    ELSE,
      CHAR N U8 LDA,
    THEN,
    pWriteChar U16 JMP,

  BARHERE CONSTANT pTestPLIF,
    CLC,
    0 U8 LDA,
    0 U8 ADC,

  BARHERE CONSTANT p?PLYorN ( zflag -flags- )
    PL IF,
      CHAR Y U8 LDA,
    ELSE,
      CHAR N U8 LDA,
    THEN,
    pWriteChar U16 JMP,

  BARHERE CONSTANT pTestMIIF,
    CLC,
    80 U8 LDA,
    0 U8 ADC,

  BARHERE CONSTANT p?MIYorN ( zflag -flags- )
    MI IF,
      CHAR Y U8 LDA,
    ELSE,
      CHAR N U8 LDA,
    THEN,
    pWriteChar U16 JMP,

  BARHERE CONSTANT pTestUNTIL,
    27 U8 LDA,
    pUserVec [U8] STA,
    3 U8 LDX,
    0 U8 LDA,
    BEGIN,
      pUserVec [U8+X] STA,
      CLC, 
      2 U8 ADC,
      DEX,
    EQ UNTIL,

    pUserVec 3 + [U8] LDA,
    0 U8 CMP,
    p?WriteYorN U16 JSR,

    pUserVec 2 + [U8] LDA,
    2 U8 CMP,
    p?WriteYorN U16 JSR,

    pUserVec 1 + [U8] LDA,
    4 U8 CMP,
    p?WriteYorN U16 JSR,

    pUserVec 0 + [U8] LDA,
    27 U8 CMP,
    p?WriteYorN U16 JMP,


  BARHERE CONSTANT pTestREPEAT,

    72 U8 LDA,
    pUserVec [U8] STA,
    3 U8 LDX,
    0 U8 LDA,
    BEGIN,
      DEX,
    NE WHILE,
      pUserVec 1 + [U8+X] STA,
      CLC, 
      2 U8 ADC,
    REPEAT,

    pUserVec 3 + [U8] LDA,
    0 U8 CMP,
    p?WriteYorN U16 JSR,

    pUserVec 2 + [U8] LDA,
    2 U8 CMP,
    p?WriteYorN U16 JSR,

    pUserVec 1 + [U8] LDA,
    4 U8 CMP,
    p?WriteYorN U16 JSR,

    pUserVec 0 + [U8] LDA,
    72 U8 CMP,
    p?WriteYorN U16 JMP,

LONGTHEN,

pWriteStartTestMsg U16 JSR,
pWriteBL U16 JSR,

pTestU8LDA,U8CMP, U16 JSR,
pTestU8LDX,TXA, U16 JSR,
pTestU8LDY,TYA, U16 JSR,
pTestTAX, U16 JSR,
pTestTAY, U16 JSR,
pTestU8CPX, U16 JSR,
pTestU8CPY, U16 JSR,
pTestINX, U16 JSR,
pTestINY, U16 JSR,
pTestDEX, U16 JSR,
pTestDEY, U16 JSR,

pWriteBL U16 JSR,
pTest[U16]LDA, U16 JSR,
pTest[U8]STA, U16 JSR,
pTest[U16]STA, U16 JSR,
pTest[U8]LDA, U16 JSR,
pTest[U8+X]LDA, U16 JSR,
pTest[U16+X]LDA, U16 JSR,
pTest[U16+Y]LDA, U16 JSR,
pTest[[U8+X]]LDA, U16 JSR,
pTest[[U8]+Y]LDA, U16 JSR,
pTest[U8+X]STA, U16 JSR,
pTest[U16+X]STA, U16 JSR,
pTest[U16+Y]STA, U16 JSR,
pTest[[U8+X]]STA, U16 JSR,
pTest[[U8]+Y]STA, U16 JSR,

pWriteBL U16 JSR,
pTest[U16]LDX, U16 JSR,
pTest[U16]LDY, U16 JSR,

pWriteBL U16 JSR,
pTestU8ADC, U16 JSR,
pTest[U8]ADC, U16 JSR,
pTest[U16]ADC, U16 JSR,
pTest[U16+X]ADC, U16 JSR,
pTest[U16+Y]ADC, U16 JSR,
pTest[[U8+X]]ADC, U16 JSR,
pTest[[U8]+Y]ADC, U16 JSR,

pWriteBL U16 JSR,
pTestU8AND, U16 JSR,
pTest[U8]AND, U16 JSR,
pTest[U16]AND, U16 JSR,
pTest[U16+X]AND, U16 JSR,
pTest[U16+Y]AND, U16 JSR,
pTest[[U8+X]]AND, U16 JSR,
pTest[[U8]+Y]AND, U16 JSR,

pWriteBL U16 JSR,
pTestU8ORA, U16 JSR,
pTest[U8]ORA, U16 JSR,
pTest[U16]ORA, U16 JSR,
pTest[U16+X]ORA, U16 JSR,
pTest[U16+Y]ORA, U16 JSR,
pTest[[U8+X]]ORA, U16 JSR,
pTest[[U8]+Y]ORA, U16 JSR,

pWriteBL U16 JSR,
pTestU8EOR, U16 JSR,
pTest[U8]EOR, U16 JSR,
pTest[U16]EOR, U16 JSR,
pTest[U16+X]EOR, U16 JSR,
pTest[U16+Y]EOR, U16 JSR,
pTest[[U8+X]]EOR, U16 JSR,
pTest[[U8]+Y]EOR, U16 JSR,

pWriteBL U16 JSR,
pTest[U8]CMP, U16 JSR,
pTest[U16]CMP, U16 JSR,
pTest[U16+X]CMP, U16 JSR,
pTest[U16+Y]CMP, U16 JSR,
pTest[[U8+X]]CMP, U16 JSR,
pTest[[U8]+Y]CMP, U16 JSR,

pWriteBL U16 JSR,
pTestU8SBC, U16 JSR,
pTest[U8]SBC, U16 JSR,
pTest[U16]SBC, U16 JSR,
pTest[U16+X]SBC, U16 JSR,
pTest[U16+Y]SBC, U16 JSR,
pTest[[U8+X]]SBC, U16 JSR,
pTest[[U8]+Y]SBC, U16 JSR,

pWriteBL U16 JSR,
pTestASLA, U16 JSR,
pTest[U8]ASL, U16 JSR,
pTest[U16]ASL, U16 JSR,
pTest[U8+X]ASL, U16 JSR,
pTest[U16+X]ASL, U16 JSR,

pWriteBL U16 JSR,
pTestLSRA, U16 JSR,
pTest[U8]LSR, U16 JSR,
pTest[U16]LSR, U16 JSR,
pTest[U8+X]LSR, U16 JSR,
pTest[U16+X]LSR, U16 JSR,

pWriteBL U16 JSR,
pTestROLA, U16 JSR,
pTest[U8]ROL, U16 JSR,
pTest[U16]ROL, U16 JSR,
pTest[U8+X]ROL, U16 JSR,
pTest[U16+X]ROL, U16 JSR,

pWriteBL U16 JSR,
pTestRORA, U16 JSR,
pTest[U8]ROR, U16 JSR,
pTest[U16]ROR, U16 JSR,
pTest[U8+X]ROR, U16 JSR,
pTest[U16+X]ROR, U16 JSR,

pWriteBL U16 JSR,
pTest[U8]INC, U16 JSR,
pTest[U16]INC, U16 JSR,
pTest[U8+X]INC, U16 JSR,
pTest[U16+X]INC, U16 JSR,

pWriteBL U16 JSR,
pTest[U8]DEC, U16 JSR,
pTest[U16]DEC, U16 JSR,
pTest[U8+X]DEC, U16 JSR,
pTest[U16+X]DEC, U16 JSR,

pWriteBL U16 JSR,
pTest[U8]BIT, U16 JSR,
pTest[U16]BIT, U16 JSR,

pWriteBL U16 JSR,
pTestPHA, U16 JSR,
pTestPLA, U16 JSR,
pTestTSX, U16 JSR,
pTestTXS, U16 JSR,
pTestPHP, U16 JSR,
pTestPLP, U16 JSR,
pTestCLC, U16 JSR,
pTestSEC, U16 JSR,
pTestCLV, U16 JSR,
pTestCLD, U16 JSR,
pTestSED, U16 JSR, // setting the decimal flag seems to cause Atari CIOV to lock up
pTestCLI, U16 JSR,
pTestSEI, U16 JSR,

pWriteBL U16 JSR,
pTest[U8]LDX, U16 JSR,
pTest[U8+Y]LDX, U16 JSR,
pTest[U16+Y]LDX, U16 JSR,
pTest[U8]STX, U16 JSR,
pTest[U8+Y]STX, U16 JSR,
pTest[U16]STX, U16 JSR,

pWriteBL U16 JSR,
pTest[U8]LDY, U16 JSR,
pTest[U8+X]LDY, U16 JSR,
pTest[U16+X]LDY, U16 JSR,
pTest[U8]STY, U16 JSR,
pTest[U8+X]STY, U16 JSR,
pTest[U16]STY, U16 JSR,

pWriteBL U16 JSR,
pTest[U8]CPX, U16 JSR,
pTest[U16]CPX, U16 JSR,
pTest[U8]CPY, U16 JSR,
pTest[U16]CPY, U16 JSR,

pWriteBL U16 JSR,
pTestRTI, U16 JSR,
pTestNOP, U16 JSR,
pTest[U16]JMP, U16 JSR,

pWriteBL U16 JSR,
pTestCSIF, U16 JSR,
pTestNCIF, U16 JSR,
pTestVSIF, U16 JSR,
pTestVCIF, U16 JSR,
pTestPLIF, U16 JSR,
pTestMIIF, U16 JSR,

pWriteBL U16 JSR,
pTestUNTIL, U16 JSR,
pTestREPEAT, U16 JSR,

pWriteEOL U16 JSR,
pWriteTestDoneMsg U16 JSR,

// Busy Wait Forever
BEGIN,
CLC, CS UNTIL,

CRLF ." Expecting stack marker =  ... " StackMarker U. ."  got " U.
CRLF ." Stack should now be empty. Stack is: " .S

OHERE SectorSize ROUNDUP SectorSize /   // calculate number of sectors needed
oNumberOfBootSectors PCURRENTCOMPILEBUFFER @ O>P C!

BARHERE ." after compilation BARHERE = " U.


$" TestAsm.atr" PCURRENTCOMPILEBUFFER @ Buf>ATRFile

